
STM32F4_ModbusRTU_ADS1115.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08009cf0  08009cf0  00019cf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e98  08009e98  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009e98  08009e98  00019e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ea0  08009ea0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ea0  08009ea0  00019ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ea4  08009ea4  00019ea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004560  20000078  08009f20  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045d8  08009f20  000245d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa4c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c23  00000000  00000000  0003aaf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  0003e718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001440  00000000  00000000  0003fce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024b2a  00000000  00000000  00041120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c09  00000000  00000000  00065c4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d73eb  00000000  00000000  0007d853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154c3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006550  00000000  00000000  00154c94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cd4 	.word	0x08009cd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08009cd4 	.word	0x08009cd4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_uldivmod>:
 8000ae8:	b953      	cbnz	r3, 8000b00 <__aeabi_uldivmod+0x18>
 8000aea:	b94a      	cbnz	r2, 8000b00 <__aeabi_uldivmod+0x18>
 8000aec:	2900      	cmp	r1, #0
 8000aee:	bf08      	it	eq
 8000af0:	2800      	cmpeq	r0, #0
 8000af2:	bf1c      	itt	ne
 8000af4:	f04f 31ff 	movne.w	r1, #4294967295
 8000af8:	f04f 30ff 	movne.w	r0, #4294967295
 8000afc:	f000 b96e 	b.w	8000ddc <__aeabi_idiv0>
 8000b00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b08:	f000 f806 	bl	8000b18 <__udivmoddi4>
 8000b0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b14:	b004      	add	sp, #16
 8000b16:	4770      	bx	lr

08000b18 <__udivmoddi4>:
 8000b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b1c:	9d08      	ldr	r5, [sp, #32]
 8000b1e:	4604      	mov	r4, r0
 8000b20:	468c      	mov	ip, r1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f040 8083 	bne.w	8000c2e <__udivmoddi4+0x116>
 8000b28:	428a      	cmp	r2, r1
 8000b2a:	4617      	mov	r7, r2
 8000b2c:	d947      	bls.n	8000bbe <__udivmoddi4+0xa6>
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	b142      	cbz	r2, 8000b46 <__udivmoddi4+0x2e>
 8000b34:	f1c2 0020 	rsb	r0, r2, #32
 8000b38:	fa24 f000 	lsr.w	r0, r4, r0
 8000b3c:	4091      	lsls	r1, r2
 8000b3e:	4097      	lsls	r7, r2
 8000b40:	ea40 0c01 	orr.w	ip, r0, r1
 8000b44:	4094      	lsls	r4, r2
 8000b46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4a:	0c23      	lsrs	r3, r4, #16
 8000b4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000b50:	fa1f fe87 	uxth.w	lr, r7
 8000b54:	fb08 c116 	mls	r1, r8, r6, ip
 8000b58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x60>
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6a:	f080 8119 	bcs.w	8000da0 <__udivmoddi4+0x288>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 8116 	bls.w	8000da0 <__udivmoddi4+0x288>
 8000b74:	3e02      	subs	r6, #2
 8000b76:	443b      	add	r3, r7
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b80:	fb08 3310 	mls	r3, r8, r0, r3
 8000b84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b8c:	45a6      	cmp	lr, r4
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x8c>
 8000b90:	193c      	adds	r4, r7, r4
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b96:	f080 8105 	bcs.w	8000da4 <__udivmoddi4+0x28c>
 8000b9a:	45a6      	cmp	lr, r4
 8000b9c:	f240 8102 	bls.w	8000da4 <__udivmoddi4+0x28c>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	443c      	add	r4, r7
 8000ba4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba8:	eba4 040e 	sub.w	r4, r4, lr
 8000bac:	2600      	movs	r6, #0
 8000bae:	b11d      	cbz	r5, 8000bb8 <__udivmoddi4+0xa0>
 8000bb0:	40d4      	lsrs	r4, r2
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xaa>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f282 	clz	r2, r2
 8000bc6:	2a00      	cmp	r2, #0
 8000bc8:	d150      	bne.n	8000c6c <__udivmoddi4+0x154>
 8000bca:	1bcb      	subs	r3, r1, r7
 8000bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd0:	fa1f f887 	uxth.w	r8, r7
 8000bd4:	2601      	movs	r6, #1
 8000bd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bda:	0c21      	lsrs	r1, r4, #16
 8000bdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be4:	fb08 f30c 	mul.w	r3, r8, ip
 8000be8:	428b      	cmp	r3, r1
 8000bea:	d907      	bls.n	8000bfc <__udivmoddi4+0xe4>
 8000bec:	1879      	adds	r1, r7, r1
 8000bee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf2:	d202      	bcs.n	8000bfa <__udivmoddi4+0xe2>
 8000bf4:	428b      	cmp	r3, r1
 8000bf6:	f200 80e9 	bhi.w	8000dcc <__udivmoddi4+0x2b4>
 8000bfa:	4684      	mov	ip, r0
 8000bfc:	1ac9      	subs	r1, r1, r3
 8000bfe:	b2a3      	uxth	r3, r4
 8000c00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c0c:	fb08 f800 	mul.w	r8, r8, r0
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	d907      	bls.n	8000c24 <__udivmoddi4+0x10c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x10a>
 8000c1c:	45a0      	cmp	r8, r4
 8000c1e:	f200 80d9 	bhi.w	8000dd4 <__udivmoddi4+0x2bc>
 8000c22:	4618      	mov	r0, r3
 8000c24:	eba4 0408 	sub.w	r4, r4, r8
 8000c28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c2c:	e7bf      	b.n	8000bae <__udivmoddi4+0x96>
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0x12e>
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	f000 80b1 	beq.w	8000d9a <__udivmoddi4+0x282>
 8000c38:	2600      	movs	r6, #0
 8000c3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3e:	4630      	mov	r0, r6
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f683 	clz	r6, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d14a      	bne.n	8000ce4 <__udivmoddi4+0x1cc>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0x140>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80b8 	bhi.w	8000dc8 <__udivmoddi4+0x2b0>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	468c      	mov	ip, r1
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	d0a8      	beq.n	8000bb8 <__udivmoddi4+0xa0>
 8000c66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6a:	e7a5      	b.n	8000bb8 <__udivmoddi4+0xa0>
 8000c6c:	f1c2 0320 	rsb	r3, r2, #32
 8000c70:	fa20 f603 	lsr.w	r6, r0, r3
 8000c74:	4097      	lsls	r7, r2
 8000c76:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7e:	40d9      	lsrs	r1, r3
 8000c80:	4330      	orrs	r0, r6
 8000c82:	0c03      	lsrs	r3, r0, #16
 8000c84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c88:	fa1f f887 	uxth.w	r8, r7
 8000c8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb06 f108 	mul.w	r1, r6, r8
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x19c>
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ca6:	f080 808d 	bcs.w	8000dc4 <__udivmoddi4+0x2ac>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 808a 	bls.w	8000dc4 <__udivmoddi4+0x2ac>
 8000cb0:	3e02      	subs	r6, #2
 8000cb2:	443b      	add	r3, r7
 8000cb4:	1a5b      	subs	r3, r3, r1
 8000cb6:	b281      	uxth	r1, r0
 8000cb8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb00 f308 	mul.w	r3, r0, r8
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0x1c4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd2:	d273      	bcs.n	8000dbc <__udivmoddi4+0x2a4>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	d971      	bls.n	8000dbc <__udivmoddi4+0x2a4>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4439      	add	r1, r7
 8000cdc:	1acb      	subs	r3, r1, r3
 8000cde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce2:	e778      	b.n	8000bd6 <__udivmoddi4+0xbe>
 8000ce4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ce8:	fa03 f406 	lsl.w	r4, r3, r6
 8000cec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf0:	431c      	orrs	r4, r3
 8000cf2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d02:	431f      	orrs	r7, r3
 8000d04:	0c3b      	lsrs	r3, r7, #16
 8000d06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0a:	fa1f f884 	uxth.w	r8, r4
 8000d0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d16:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1a:	458a      	cmp	sl, r1
 8000d1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000d20:	fa00 f306 	lsl.w	r3, r0, r6
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x220>
 8000d26:	1861      	adds	r1, r4, r1
 8000d28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d2c:	d248      	bcs.n	8000dc0 <__udivmoddi4+0x2a8>
 8000d2e:	458a      	cmp	sl, r1
 8000d30:	d946      	bls.n	8000dc0 <__udivmoddi4+0x2a8>
 8000d32:	f1a9 0902 	sub.w	r9, r9, #2
 8000d36:	4421      	add	r1, r4
 8000d38:	eba1 010a 	sub.w	r1, r1, sl
 8000d3c:	b2bf      	uxth	r7, r7
 8000d3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4a:	fb00 f808 	mul.w	r8, r0, r8
 8000d4e:	45b8      	cmp	r8, r7
 8000d50:	d907      	bls.n	8000d62 <__udivmoddi4+0x24a>
 8000d52:	19e7      	adds	r7, r4, r7
 8000d54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d58:	d22e      	bcs.n	8000db8 <__udivmoddi4+0x2a0>
 8000d5a:	45b8      	cmp	r8, r7
 8000d5c:	d92c      	bls.n	8000db8 <__udivmoddi4+0x2a0>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4427      	add	r7, r4
 8000d62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d66:	eba7 0708 	sub.w	r7, r7, r8
 8000d6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6e:	454f      	cmp	r7, r9
 8000d70:	46c6      	mov	lr, r8
 8000d72:	4649      	mov	r1, r9
 8000d74:	d31a      	bcc.n	8000dac <__udivmoddi4+0x294>
 8000d76:	d017      	beq.n	8000da8 <__udivmoddi4+0x290>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x27a>
 8000d7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000d7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000d82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d86:	40f2      	lsrs	r2, r6
 8000d88:	ea4c 0202 	orr.w	r2, ip, r2
 8000d8c:	40f7      	lsrs	r7, r6
 8000d8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	462e      	mov	r6, r5
 8000d9c:	4628      	mov	r0, r5
 8000d9e:	e70b      	b.n	8000bb8 <__udivmoddi4+0xa0>
 8000da0:	4606      	mov	r6, r0
 8000da2:	e6e9      	b.n	8000b78 <__udivmoddi4+0x60>
 8000da4:	4618      	mov	r0, r3
 8000da6:	e6fd      	b.n	8000ba4 <__udivmoddi4+0x8c>
 8000da8:	4543      	cmp	r3, r8
 8000daa:	d2e5      	bcs.n	8000d78 <__udivmoddi4+0x260>
 8000dac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db0:	eb69 0104 	sbc.w	r1, r9, r4
 8000db4:	3801      	subs	r0, #1
 8000db6:	e7df      	b.n	8000d78 <__udivmoddi4+0x260>
 8000db8:	4608      	mov	r0, r1
 8000dba:	e7d2      	b.n	8000d62 <__udivmoddi4+0x24a>
 8000dbc:	4660      	mov	r0, ip
 8000dbe:	e78d      	b.n	8000cdc <__udivmoddi4+0x1c4>
 8000dc0:	4681      	mov	r9, r0
 8000dc2:	e7b9      	b.n	8000d38 <__udivmoddi4+0x220>
 8000dc4:	4666      	mov	r6, ip
 8000dc6:	e775      	b.n	8000cb4 <__udivmoddi4+0x19c>
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e74a      	b.n	8000c62 <__udivmoddi4+0x14a>
 8000dcc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd0:	4439      	add	r1, r7
 8000dd2:	e713      	b.n	8000bfc <__udivmoddi4+0xe4>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	443c      	add	r4, r7
 8000dd8:	e724      	b.n	8000c24 <__udivmoddi4+0x10c>
 8000dda:	bf00      	nop

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <delay_init+0x44>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <delay_init+0x44>)
 8000df0:	f023 0304 	bic.w	r3, r3, #4
 8000df4:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <delay_init+0x48>)
 8000dfe:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <delay_init+0x48>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	461a      	mov	r2, r3
 8000e08:	0152      	lsls	r2, r2, #5
 8000e0a:	1ad2      	subs	r2, r2, r3
 8000e0c:	0092      	lsls	r2, r2, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <delay_init+0x4c>)
 8000e16:	801a      	strh	r2, [r3, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e010 	.word	0xe000e010
 8000e28:	20000094 	.word	0x20000094
 8000e2c:	20000096 	.word	0x20000096

08000e30 <delay_ms>:

void delay_ms(uint16_t nms)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <delay_ms+0x60>)
 8000e3e:	8812      	ldrh	r2, [r2, #0]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <delay_ms+0x64>)
 8000e44:	fb01 f303 	mul.w	r3, r1, r3
 8000e48:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           //清空計數器
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <delay_ms+0x64>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <delay_ms+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <delay_ms+0x64>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <delay_ms+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d004      	beq.n	8000e76 <delay_ms+0x46>
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f2      	beq.n	8000e5c <delay_ms+0x2c>
	SysTick->CTRL=0x00;       //關閉計數器
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <delay_ms+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <delay_ms+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000096 	.word	0x20000096
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <Read_ads1115>:
	HAL_I2C_Master_Receive(&hi2c1, i2c_addr+1, RX_buffer, 1, 100);
	//delay_ms(1);
}

void Read_ads1115(ADS1115_BOARD * ADS1115_BOARD_SELECT,uint8_t ADDRESS)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	70fb      	strb	r3, [r7, #3]
	 * 			01: VDD (8'b1001001 - 49)
	 * 			10: SDA (8'b1001010 - 4A)
	 * 			11: SCL (8'b1001011 - 4B)
	 *
	 */
	for( int i = 0; i < 2; i++) {
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	e064      	b.n	8000f74 <Read_ads1115+0xdc>
		 * --------------------------------------------
		 * ADSwrite[1]	| config MSB
		 * ADSwrite[2]	| config LSB
		 * --------------------------------------------
		 */
		ADSwrite[0] = 0x01;
 8000eaa:	4b36      	ldr	r3, [pc, #216]	; (8000f84 <Read_ads1115+0xec>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
		switch(i)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <Read_ads1115+0x26>
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d004      	beq.n	8000ec6 <Read_ads1115+0x2e>
 8000ebc:	e007      	b.n	8000ece <Read_ads1115+0x36>
		{
			case(0): //MSB
				ADSwrite[1] = 0x81; // 1.000.000.1 CH0 + CH1
 8000ebe:	4b31      	ldr	r3, [pc, #196]	; (8000f84 <Read_ads1115+0xec>)
 8000ec0:	2281      	movs	r2, #129	; 0x81
 8000ec2:	705a      	strb	r2, [r3, #1]
			break;
 8000ec4:	e003      	b.n	8000ece <Read_ads1115+0x36>
			case(1):
				ADSwrite[1] = 0xB1;// 1.011.000.1 CH2 + CH3
 8000ec6:	4b2f      	ldr	r3, [pc, #188]	; (8000f84 <Read_ads1115+0xec>)
 8000ec8:	22b1      	movs	r2, #177	; 0xb1
 8000eca:	705a      	strb	r2, [r3, #1]
			break;
 8000ecc:	bf00      	nop
		}
		ADSwrite[2] = 0xE3; // 1.000.0011 LSB 03/23/83/E3
 8000ece:	4b2d      	ldr	r3, [pc, #180]	; (8000f84 <Read_ads1115+0xec>)
 8000ed0:	22e3      	movs	r2, #227	; 0xe3
 8000ed2:	709a      	strb	r2, [r3, #2]
		HAL_I2C_Master_Transmit(&hi2c1, ADDRESS<<1, ADSwrite, 3, 100);
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	b299      	uxth	r1, r3
 8000edc:	2364      	movs	r3, #100	; 0x64
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	4a28      	ldr	r2, [pc, #160]	; (8000f84 <Read_ads1115+0xec>)
 8000ee4:	4828      	ldr	r0, [pc, #160]	; (8000f88 <Read_ads1115+0xf0>)
 8000ee6:	f002 fa43 	bl	8003370 <HAL_I2C_Master_Transmit>

		/* Conversion register
		 * transform to Conversion register
		 * ADSwrite[0]: 00
		 */
		ADSwrite[0] = 0x00;
 8000eea:	4b26      	ldr	r3, [pc, #152]	; (8000f84 <Read_ads1115+0xec>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, ADDRESS<<1, ADSwrite, 1, 100);
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	b299      	uxth	r1, r3
 8000ef8:	2364      	movs	r3, #100	; 0x64
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2301      	movs	r3, #1
 8000efe:	4a21      	ldr	r2, [pc, #132]	; (8000f84 <Read_ads1115+0xec>)
 8000f00:	4821      	ldr	r0, [pc, #132]	; (8000f88 <Read_ads1115+0xf0>)
 8000f02:	f002 fa35 	bl	8003370 <HAL_I2C_Master_Transmit>
		//HAL_Delay(20);
		osDelay(2); // millisec, must have delay time for catch new raw data
 8000f06:	2002      	movs	r0, #2
 8000f08:	f005 f843 	bl	8005f92 <osDelay>
		/* Read from ADS
		 * 2Byte, FILO
		 * MSB into ADSwrite[0]
		 * LSB into ADSwrite[1]
		 */
		HAL_I2C_Master_Receive(&hi2c1, ADDRESS<<1, ADSwrite, 2, 100);
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	b299      	uxth	r1, r3
 8000f14:	2364      	movs	r3, #100	; 0x64
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2302      	movs	r3, #2
 8000f1a:	4a1a      	ldr	r2, [pc, #104]	; (8000f84 <Read_ads1115+0xec>)
 8000f1c:	481a      	ldr	r0, [pc, #104]	; (8000f88 <Read_ads1115+0xf0>)
 8000f1e:	f002 fb25 	bl	800356c <HAL_I2C_Master_Receive>
		reading = (ADSwrite[0] << 8 | ADSwrite[1]);
 8000f22:	4b18      	ldr	r3, [pc, #96]	; (8000f84 <Read_ads1115+0xec>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <Read_ads1115+0xec>)
 8000f2c:	785b      	ldrb	r3, [r3, #1]
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	4b15      	ldr	r3, [pc, #84]	; (8000f8c <Read_ads1115+0xf4>)
 8000f36:	801a      	strh	r2, [r3, #0]
		}



		// update value
		if(i == 0)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10a      	bne.n	8000f54 <Read_ads1115+0xbc>
		{
			// for voltage mode
			//ADS1115_BOARD_SELECT->ADS1115_CH1.data = reading * voltageConv;
			ADS1115_BOARD_SELECT->ADS1115_CH1.data = reading;
 8000f3e:	4b13      	ldr	r3, [pc, #76]	; (8000f8c <Read_ads1115+0xf4>)
 8000f40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f44:	ee07 3a90 	vmov	s15, r3
 8000f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	edc3 7a00 	vstr	s15, [r3]
 8000f52:	e00c      	b.n	8000f6e <Read_ads1115+0xd6>

			//for current mode
			//ADS1115_BOARD_SELECT->ADS1115_CH1.data = ((reading * currentConv) + 4);
		}
		else if(i == 1)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d109      	bne.n	8000f6e <Read_ads1115+0xd6>
			//ADS1115_BOARD_SELECT->ADS1115_CH2.data = reading * voltageConv;
			//ADS1115_BOARD_SELECT->ADS1115_CH2.data = reading;

			//for current mode
			//ADS1115_BOARD_SELECT->ADS1115_CH2.data = ((reading * currentConv) + 4);
			ADS1115_BOARD_SELECT->ADS1115_CH2.data = reading;
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <Read_ads1115+0xf4>)
 8000f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f60:	ee07 3a90 	vmov	s15, r3
 8000f64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	edc3 7a01 	vstr	s15, [r3, #4]
	for( int i = 0; i < 2; i++) {
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	3301      	adds	r3, #1
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	dd97      	ble.n	8000eaa <Read_ads1115+0x12>
		}
	}

}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	3710      	adds	r7, #16
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2000414c 	.word	0x2000414c
 8000f88:	200040c8 	.word	0x200040c8
 8000f8c:	20004128 	.word	0x20004128

08000f90 <Convert2Modbus>:

int Convert2Modbus(float Data)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	ed87 0a01 	vstr	s0, [r7, #4]
	int ConvertData = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]

	ConvertData = ((Data+5)*65535)/10;
 8000f9e:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fa2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000fa6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000faa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8000fd4 <Convert2Modbus+0x44>
 8000fae:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fb2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000fb6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000fbe:	ee17 3a90 	vmov	r3, s15
 8000fc2:	60fb      	str	r3, [r7, #12]

	return ConvertData;
 8000fc4:	68fb      	ldr	r3, [r7, #12]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3714      	adds	r7, #20
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	477fff00 	.word	0x477fff00

08000fd8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4a07      	ldr	r2, [pc, #28]	; (8001004 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fe8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <vApplicationGetIdleTaskMemory+0x30>)
 8000fee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000098 	.word	0x20000098
 8001008:	200000ec 	.word	0x200000ec
 800100c:	00000000 	.word	0x00000000

08001010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b096      	sub	sp, #88	; 0x58
 8001014:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001016:	f001 f969 	bl	80022ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800101a:	f000 f911 	bl	8001240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800101e:	f000 f9f1 	bl	8001404 <MX_GPIO_Init>
  MX_DMA_Init();
 8001022:	f000 f9cf 	bl	80013c4 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8001026:	f000 f9a3 	bl	8001370 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 800102a:	f000 f973 	bl	8001314 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  delay_init(10);
 800102e:	200a      	movs	r0, #10
 8001030:	f7ff fed6 	bl	8000de0 <delay_init>


  //TODO: read DIP switch
  SwitchValue[0] = HAL_GPIO_ReadPin(GPIOE, Switch1_Pin);
 8001034:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001038:	4875      	ldr	r0, [pc, #468]	; (8001210 <main+0x200>)
 800103a:	f002 f83d 	bl	80030b8 <HAL_GPIO_ReadPin>
 800103e:	4603      	mov	r3, r0
 8001040:	461a      	mov	r2, r3
 8001042:	4b74      	ldr	r3, [pc, #464]	; (8001214 <main+0x204>)
 8001044:	701a      	strb	r2, [r3, #0]
  SwitchValue[1] = HAL_GPIO_ReadPin(GPIOE, Switch2_Pin);
 8001046:	f44f 7100 	mov.w	r1, #512	; 0x200
 800104a:	4871      	ldr	r0, [pc, #452]	; (8001210 <main+0x200>)
 800104c:	f002 f834 	bl	80030b8 <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	4b6f      	ldr	r3, [pc, #444]	; (8001214 <main+0x204>)
 8001056:	705a      	strb	r2, [r3, #1]
  SwitchValue[2] = HAL_GPIO_ReadPin(GPIOE, Switch3_Pin);
 8001058:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800105c:	486c      	ldr	r0, [pc, #432]	; (8001210 <main+0x200>)
 800105e:	f002 f82b 	bl	80030b8 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4b6b      	ldr	r3, [pc, #428]	; (8001214 <main+0x204>)
 8001068:	709a      	strb	r2, [r3, #2]
  SwitchValue[3] = HAL_GPIO_ReadPin(GPIOE, Switch4_Pin);
 800106a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800106e:	4868      	ldr	r0, [pc, #416]	; (8001210 <main+0x200>)
 8001070:	f002 f822 	bl	80030b8 <HAL_GPIO_ReadPin>
 8001074:	4603      	mov	r3, r0
 8001076:	461a      	mov	r2, r3
 8001078:	4b66      	ldr	r3, [pc, #408]	; (8001214 <main+0x204>)
 800107a:	70da      	strb	r2, [r3, #3]
  SwitchValue[4] = HAL_GPIO_ReadPin(GPIOE, Switch5_Pin);
 800107c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001080:	4863      	ldr	r0, [pc, #396]	; (8001210 <main+0x200>)
 8001082:	f002 f819 	bl	80030b8 <HAL_GPIO_ReadPin>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	4b62      	ldr	r3, [pc, #392]	; (8001214 <main+0x204>)
 800108c:	711a      	strb	r2, [r3, #4]
  SwitchValue[5] = HAL_GPIO_ReadPin(GPIOE, Switch6_Pin);
 800108e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001092:	485f      	ldr	r0, [pc, #380]	; (8001210 <main+0x200>)
 8001094:	f002 f810 	bl	80030b8 <HAL_GPIO_ReadPin>
 8001098:	4603      	mov	r3, r0
 800109a:	461a      	mov	r2, r3
 800109c:	4b5d      	ldr	r3, [pc, #372]	; (8001214 <main+0x204>)
 800109e:	715a      	strb	r2, [r3, #5]
  SwitchValue[6] = HAL_GPIO_ReadPin(GPIOE, Switch7_Pin);
 80010a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010a4:	485a      	ldr	r0, [pc, #360]	; (8001210 <main+0x200>)
 80010a6:	f002 f807 	bl	80030b8 <HAL_GPIO_ReadPin>
 80010aa:	4603      	mov	r3, r0
 80010ac:	461a      	mov	r2, r3
 80010ae:	4b59      	ldr	r3, [pc, #356]	; (8001214 <main+0x204>)
 80010b0:	719a      	strb	r2, [r3, #6]
  SwitchValue[7] = HAL_GPIO_ReadPin(GPIOE, Switch8_Pin);
 80010b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010b6:	4856      	ldr	r0, [pc, #344]	; (8001210 <main+0x200>)
 80010b8:	f001 fffe 	bl	80030b8 <HAL_GPIO_ReadPin>
 80010bc:	4603      	mov	r3, r0
 80010be:	461a      	mov	r2, r3
 80010c0:	4b54      	ldr	r3, [pc, #336]	; (8001214 <main+0x204>)
 80010c2:	71da      	strb	r2, [r3, #7]


  //TODO: converter DIP switch to modbus slave using binary
  for(uint8_t i = 0; i <8; i++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80010ca:	e039      	b.n	8001140 <main+0x130>
  {
	  slaveID += SwitchValue[i] * pow(2,i);
 80010cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80010d0:	4a50      	ldr	r2, [pc, #320]	; (8001214 <main+0x204>)
 80010d2:	5cd3      	ldrb	r3, [r2, r3]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff f9cd 	bl	8000474 <__aeabi_i2d>
 80010da:	4604      	mov	r4, r0
 80010dc:	460d      	mov	r5, r1
 80010de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f9b6 	bl	8000454 <__aeabi_ui2d>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	ec43 2b11 	vmov	d1, r2, r3
 80010f0:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8001208 <main+0x1f8>
 80010f4:	f007 fe38 	bl	8008d68 <pow>
 80010f8:	ec53 2b10 	vmov	r2, r3, d0
 80010fc:	4620      	mov	r0, r4
 80010fe:	4629      	mov	r1, r5
 8001100:	f7ff fa22 	bl	8000548 <__aeabi_dmul>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4614      	mov	r4, r2
 800110a:	461d      	mov	r5, r3
 800110c:	4b42      	ldr	r3, [pc, #264]	; (8001218 <main+0x208>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff f9af 	bl	8000474 <__aeabi_i2d>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4620      	mov	r0, r4
 800111c:	4629      	mov	r1, r5
 800111e:	f7ff f85d 	bl	80001dc <__adddf3>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fcbd 	bl	8000aa8 <__aeabi_d2uiz>
 800112e:	4603      	mov	r3, r0
 8001130:	b2da      	uxtb	r2, r3
 8001132:	4b39      	ldr	r3, [pc, #228]	; (8001218 <main+0x208>)
 8001134:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i <8; i++)
 8001136:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800113a:	3301      	adds	r3, #1
 800113c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001140:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001144:	2b07      	cmp	r3, #7
 8001146:	d9c1      	bls.n	80010cc <main+0xbc>
  }

  delay_ms(1);
 8001148:	2001      	movs	r0, #1
 800114a:	f7ff fe71 	bl	8000e30 <delay_ms>

 //ADCstatus =  HAL_ADC_Stop_DMA(&hadc1);

  //HAL_UART_Receive_DMA(&huart6, rxbuffer, 8);
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 800114e:	4b33      	ldr	r3, [pc, #204]	; (800121c <main+0x20c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68da      	ldr	r2, [r3, #12]
 8001154:	4b31      	ldr	r3, [pc, #196]	; (800121c <main+0x20c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f042 0210 	orr.w	r2, r2, #16
 800115c:	60da      	str	r2, [r3, #12]
  //set DMA receive, transmit 255 word every time.
  HAL_UART_Receive_DMA(&huart6, (uint8_t*)rxbuffer, 255);
 800115e:	22ff      	movs	r2, #255	; 0xff
 8001160:	492f      	ldr	r1, [pc, #188]	; (8001220 <main+0x210>)
 8001162:	482e      	ldr	r0, [pc, #184]	; (800121c <main+0x20c>)
 8001164:	f003 feea 	bl	8004f3c <HAL_UART_Receive_DMA>

  ADS1115_ADDRES[0] = ADS1115_ADDRESS_ADDR_GND;
 8001168:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <main+0x214>)
 800116a:	2248      	movs	r2, #72	; 0x48
 800116c:	701a      	strb	r2, [r3, #0]
  ADS1115_ADDRES[1] = ADS1115_ADDRESS_ADDR_VDD;
 800116e:	4b2d      	ldr	r3, [pc, #180]	; (8001224 <main+0x214>)
 8001170:	2249      	movs	r2, #73	; 0x49
 8001172:	705a      	strb	r2, [r3, #1]
  ADS1115_ADDRES[2] = ADS1115_ADDRESS_ADDR_SDA;
 8001174:	4b2b      	ldr	r3, [pc, #172]	; (8001224 <main+0x214>)
 8001176:	224a      	movs	r2, #74	; 0x4a
 8001178:	709a      	strb	r2, [r3, #2]
  ADS1115_ADDRES[3] = ADS1115_ADDRESS_ADDR_SCL;
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <main+0x214>)
 800117c:	224b      	movs	r2, #75	; 0x4b
 800117e:	70da      	strb	r2, [r3, #3]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ModbusTransTask */
  osThreadDef(ModbusTransTask, ModbusTransThread, osPriorityAboveNormal, 0, 128);
 8001180:	4b29      	ldr	r3, [pc, #164]	; (8001228 <main+0x218>)
 8001182:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001186:	461d      	mov	r5, r3
 8001188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800118a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800118c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001190:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusTransTaskHandle = osThreadCreate(osThread(ModbusTransTask), NULL);
 8001194:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001198:	2100      	movs	r1, #0
 800119a:	4618      	mov	r0, r3
 800119c:	f004 fead 	bl	8005efa <osThreadCreate>
 80011a0:	4603      	mov	r3, r0
 80011a2:	4a22      	ldr	r2, [pc, #136]	; (800122c <main+0x21c>)
 80011a4:	6013      	str	r3, [r2, #0]

  /* definition and creation of ModbusSetTask */
  osThreadDef(ModbusSetTask, ModbusSetThread, osPriorityAboveNormal, 0, 128);
 80011a6:	4b22      	ldr	r3, [pc, #136]	; (8001230 <main+0x220>)
 80011a8:	f107 041c 	add.w	r4, r7, #28
 80011ac:	461d      	mov	r5, r3
 80011ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusSetTaskHandle = osThreadCreate(osThread(ModbusSetTask), NULL);
 80011ba:	f107 031c 	add.w	r3, r7, #28
 80011be:	2100      	movs	r1, #0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f004 fe9a 	bl	8005efa <osThreadCreate>
 80011c6:	4603      	mov	r3, r0
 80011c8:	4a1a      	ldr	r2, [pc, #104]	; (8001234 <main+0x224>)
 80011ca:	6013      	str	r3, [r2, #0]

  /* definition and creation of ADS1115Task */
  osThreadDef(ADS1115Task, ADS1115Thread, osPriorityNormal, 0, 128);
 80011cc:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <main+0x228>)
 80011ce:	463c      	mov	r4, r7
 80011d0:	461d      	mov	r5, r3
 80011d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADS1115TaskHandle = osThreadCreate(osThread(ADS1115Task), NULL);
 80011de:	463b      	mov	r3, r7
 80011e0:	2100      	movs	r1, #0
 80011e2:	4618      	mov	r0, r3
 80011e4:	f004 fe89 	bl	8005efa <osThreadCreate>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a14      	ldr	r2, [pc, #80]	; (800123c <main+0x22c>)
 80011ec:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  ModBus_Init();
 80011ee:	f000 fb25 	bl	800183c <ModBus_Init>
  ModBus_SetAddress(slaveID);
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <main+0x208>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 fb80 	bl	80018fc <ModBus_SetAddress>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80011fc:	f004 fe76 	bl	8005eec <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001200:	e7fe      	b.n	8001200 <main+0x1f0>
 8001202:	bf00      	nop
 8001204:	f3af 8000 	nop.w
 8001208:	00000000 	.word	0x00000000
 800120c:	40000000 	.word	0x40000000
 8001210:	40021000 	.word	0x40021000
 8001214:	200041a0 	.word	0x200041a0
 8001218:	200002ec 	.word	0x200002ec
 800121c:	2000415c 	.word	0x2000415c
 8001220:	200041a8 	.word	0x200041a8
 8001224:	20004124 	.word	0x20004124
 8001228:	08009d1c 	.word	0x08009d1c
 800122c:	2000411c 	.word	0x2000411c
 8001230:	08009d38 	.word	0x08009d38
 8001234:	20004120 	.word	0x20004120
 8001238:	08009d54 	.word	0x08009d54
 800123c:	2000419c 	.word	0x2000419c

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b094      	sub	sp, #80	; 0x50
 8001244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	f107 0320 	add.w	r3, r7, #32
 800124a:	2230      	movs	r2, #48	; 0x30
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f007 f8bc 	bl	80083cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	f107 030c 	add.w	r3, r7, #12
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]
 8001262:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	4b28      	ldr	r3, [pc, #160]	; (800130c <SystemClock_Config+0xcc>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	4a27      	ldr	r2, [pc, #156]	; (800130c <SystemClock_Config+0xcc>)
 800126e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001272:	6413      	str	r3, [r2, #64]	; 0x40
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <SystemClock_Config+0xcc>)
 8001276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127c:	60bb      	str	r3, [r7, #8]
 800127e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001280:	2300      	movs	r3, #0
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	4b22      	ldr	r3, [pc, #136]	; (8001310 <SystemClock_Config+0xd0>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a21      	ldr	r2, [pc, #132]	; (8001310 <SystemClock_Config+0xd0>)
 800128a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <SystemClock_Config+0xd0>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001298:	607b      	str	r3, [r7, #4]
 800129a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800129c:	2302      	movs	r3, #2
 800129e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a0:	2301      	movs	r3, #1
 80012a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012a4:	2310      	movs	r3, #16
 80012a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012a8:	2302      	movs	r3, #2
 80012aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012ac:	2300      	movs	r3, #0
 80012ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012b0:	2308      	movs	r3, #8
 80012b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012b4:	23a8      	movs	r3, #168	; 0xa8
 80012b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012b8:	2302      	movs	r3, #2
 80012ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012bc:	2304      	movs	r3, #4
 80012be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c0:	f107 0320 	add.w	r3, r7, #32
 80012c4:	4618      	mov	r0, r3
 80012c6:	f002 fea3 	bl	8004010 <HAL_RCC_OscConfig>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012d0:	f000 fa74 	bl	80017bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012d4:	230f      	movs	r3, #15
 80012d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d8:	2302      	movs	r3, #2
 80012da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	2105      	movs	r1, #5
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 f8fc 	bl	80044f0 <HAL_RCC_ClockConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80012fe:	f000 fa5d 	bl	80017bc <Error_Handler>
  }
}
 8001302:	bf00      	nop
 8001304:	3750      	adds	r7, #80	; 0x50
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023800 	.word	0x40023800
 8001310:	40007000 	.word	0x40007000

08001314 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_I2C1_Init+0x50>)
 800131a:	4a13      	ldr	r2, [pc, #76]	; (8001368 <MX_I2C1_Init+0x54>)
 800131c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_I2C1_Init+0x50>)
 8001320:	4a12      	ldr	r2, [pc, #72]	; (800136c <MX_I2C1_Init+0x58>)
 8001322:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_I2C1_Init+0x50>)
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <MX_I2C1_Init+0x50>)
 800132c:	2200      	movs	r2, #0
 800132e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <MX_I2C1_Init+0x50>)
 8001332:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001336:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <MX_I2C1_Init+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800133e:	4b09      	ldr	r3, [pc, #36]	; (8001364 <MX_I2C1_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001344:	4b07      	ldr	r3, [pc, #28]	; (8001364 <MX_I2C1_Init+0x50>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800134a:	4b06      	ldr	r3, [pc, #24]	; (8001364 <MX_I2C1_Init+0x50>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <MX_I2C1_Init+0x50>)
 8001352:	f001 fec9 	bl	80030e8 <HAL_I2C_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800135c:	f000 fa2e 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	200040c8 	.word	0x200040c8
 8001368:	40005400 	.word	0x40005400
 800136c:	000186a0 	.word	0x000186a0

08001370 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_USART6_UART_Init+0x4c>)
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_USART6_UART_Init+0x50>)
 8001378:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <MX_USART6_UART_Init+0x4c>)
 800137c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001380:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_USART6_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_USART6_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <MX_USART6_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_USART6_UART_Init+0x4c>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <MX_USART6_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_USART6_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_USART6_UART_Init+0x4c>)
 80013a8:	f003 fce2 	bl	8004d70 <HAL_UART_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80013b2:	f000 fa03 	bl	80017bc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	2000415c 	.word	0x2000415c
 80013c0:	40011400 	.word	0x40011400

080013c4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	607b      	str	r3, [r7, #4]
 80013ce:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_DMA_Init+0x3c>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	4a0b      	ldr	r2, [pc, #44]	; (8001400 <MX_DMA_Init+0x3c>)
 80013d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d8:	6313      	str	r3, [r2, #48]	; 0x30
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_DMA_Init+0x3c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2105      	movs	r1, #5
 80013ea:	2039      	movs	r0, #57	; 0x39
 80013ec:	f001 f89c 	bl	8002528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80013f0:	2039      	movs	r0, #57	; 0x39
 80013f2:	f001 f8b5 	bl	8002560 <HAL_NVIC_EnableIRQ>

}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800

08001404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MX_GPIO_Init+0x8c>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a1b      	ldr	r2, [pc, #108]	; (8001490 <MX_GPIO_Init+0x8c>)
 8001424:	f043 0310 	orr.w	r3, r3, #16
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <MX_GPIO_Init+0x8c>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <MX_GPIO_Init+0x8c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a14      	ldr	r2, [pc, #80]	; (8001490 <MX_GPIO_Init+0x8c>)
 8001440:	f043 0304 	orr.w	r3, r3, #4
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b12      	ldr	r3, [pc, #72]	; (8001490 <MX_GPIO_Init+0x8c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0304 	and.w	r3, r3, #4
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <MX_GPIO_Init+0x8c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a0d      	ldr	r2, [pc, #52]	; (8001490 <MX_GPIO_Init+0x8c>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <MX_GPIO_Init+0x8c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : Switch1_Pin Switch2_Pin Switch3_Pin Switch4_Pin 
                           Switch5_Pin Switch6_Pin Switch7_Pin Switch8_Pin */
  GPIO_InitStruct.Pin = Switch1_Pin|Switch2_Pin|Switch3_Pin|Switch4_Pin 
 800146e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001472:	60fb      	str	r3, [r7, #12]
                          |Switch5_Pin|Switch6_Pin|Switch7_Pin|Switch8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	4804      	ldr	r0, [pc, #16]	; (8001494 <MX_GPIO_Init+0x90>)
 8001484:	f001 fc7c 	bl	8002d80 <HAL_GPIO_Init>

}
 8001488:	bf00      	nop
 800148a:	3720      	adds	r7, #32
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40023800 	.word	0x40023800
 8001494:	40021000 	.word	0x40021000

08001498 <USER_UART_IRQHandler>:

}
*/

void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6)                                   //判断是否是串口1（！此处应写(huart->Instance == USART1)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <USER_UART_IRQHandler+0x4c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d117      	bne.n	80014da <USER_UART_IRQHandler+0x42>
    {
        if(RESET != __HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE))   //判断是否是空闲中断
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <USER_UART_IRQHandler+0x50>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	2b10      	cmp	r3, #16
 80014b6:	d110      	bne.n	80014da <USER_UART_IRQHandler+0x42>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&huart6);                     //清楚空闲中断标志（否则会一直不断进入中断）
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <USER_UART_IRQHandler+0x50>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <USER_UART_IRQHandler+0x50>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
            printf("\r\nUART6 Idle IQR Detected\r\n");
 80014ce:	4807      	ldr	r0, [pc, #28]	; (80014ec <USER_UART_IRQHandler+0x54>)
 80014d0:	f006 fff2 	bl	80084b8 <puts>
            USAR_UART_IDLECallback(huart);                          //调用中断处理函数
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f000 f80b 	bl	80014f0 <USAR_UART_IDLECallback>
        }
    }
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40011400 	.word	0x40011400
 80014e8:	2000415c 	.word	0x2000415c
 80014ec:	08009d70 	.word	0x08009d70

080014f0 <USAR_UART_IDLECallback>:

void USAR_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	//STOP DMA
    HAL_UART_DMAStop(&huart6);
 80014f8:	481c      	ldr	r0, [pc, #112]	; (800156c <USAR_UART_IDLECallback+0x7c>)
 80014fa:	f003 fd9f 	bl	800503c <HAL_UART_DMAStop>

    uint8_t data_length  = 255 - __HAL_DMA_GET_COUNTER(&hdma_usart6_rx);   //计算接收到的数据长度
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <USAR_UART_IDLECallback+0x80>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	72fb      	strb	r3, [r7, #11]
    printf("Receive Data(length = %d): ",data_length);
    HAL_UART_Transmit(&huart6,receive_buff,data_length,0x200);                     //测试函数：将接收到的数据打印出去
    printf("\r\n");
    */

    if (rxbuffer[0]==slaveID)
 800150a:	4b1a      	ldr	r3, [pc, #104]	; (8001574 <USAR_UART_IDLECallback+0x84>)
 800150c:	781a      	ldrb	r2, [r3, #0]
 800150e:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <USAR_UART_IDLECallback+0x88>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	429a      	cmp	r2, r3
 8001514:	d116      	bne.n	8001544 <USAR_UART_IDLECallback+0x54>
	{
		/* if slaveID match
		 * put rxbuffer to ModBusInHandle
		 */
		__NOP();
 8001516:	bf00      	nop
		for(int i=0;i<data_length;i++)
 8001518:	2300      	movs	r3, #0
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	e00d      	b.n	800153a <USAR_UART_IDLECallback+0x4a>
			osMessagePut(ModBusInHandle,rxbuffer[i], data_length);
 800151e:	4b17      	ldr	r3, [pc, #92]	; (800157c <USAR_UART_IDLECallback+0x8c>)
 8001520:	6818      	ldr	r0, [r3, #0]
 8001522:	4a14      	ldr	r2, [pc, #80]	; (8001574 <USAR_UART_IDLECallback+0x84>)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	4619      	mov	r1, r3
 800152c:	7afb      	ldrb	r3, [r7, #11]
 800152e:	461a      	mov	r2, r3
 8001530:	f004 fd6c 	bl	800600c <osMessagePut>
		for(int i=0;i<data_length;i++)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	7afb      	ldrb	r3, [r7, #11]
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	429a      	cmp	r2, r3
 8001540:	dbed      	blt.n	800151e <USAR_UART_IDLECallback+0x2e>
 8001542:	e00a      	b.n	800155a <USAR_UART_IDLECallback+0x6a>
	}else{
		// if uart RX_ID no match slaveID(switch on board), reset rxbuffer
		memset(rxbuffer,0,data_length);
 8001544:	7afb      	ldrb	r3, [r7, #11]
 8001546:	461a      	mov	r2, r3
 8001548:	2100      	movs	r1, #0
 800154a:	480a      	ldr	r0, [pc, #40]	; (8001574 <USAR_UART_IDLECallback+0x84>)
 800154c:	f006 ff3e 	bl	80083cc <memset>
		data_length = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(10);
 8001554:	200a      	movs	r0, #10
 8001556:	f000 ff0b 	bl	8002370 <HAL_Delay>
    //reset buffer
    //memset(receive_buff,0,data_length);
    //data_length = 0;

    //restart DMA and transmit 255 byte per times.
    HAL_UART_Receive_DMA(&huart6, (uint8_t*)rxbuffer, 255);
 800155a:	22ff      	movs	r2, #255	; 0xff
 800155c:	4905      	ldr	r1, [pc, #20]	; (8001574 <USAR_UART_IDLECallback+0x84>)
 800155e:	4803      	ldr	r0, [pc, #12]	; (800156c <USAR_UART_IDLECallback+0x7c>)
 8001560:	f003 fcec 	bl	8004f3c <HAL_UART_Receive_DMA>
}
 8001564:	bf00      	nop
 8001566:	3710      	adds	r7, #16
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	2000415c 	.word	0x2000415c
 8001570:	20004068 	.word	0x20004068
 8001574:	200041a8 	.word	0x200041a8
 8001578:	200002ec 	.word	0x200002ec
 800157c:	2000447c 	.word	0x2000447c

08001580 <ModbusTransThread>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ModbusTransThread */
void ModbusTransThread(void const * argument)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b0c6      	sub	sp, #280	; 0x118
 8001584:	af00      	add	r7, sp, #0
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	  uint8_t buf[256]; // buffer, where we collect output data
	  uint8_t c = 0; // counter for buffer fill
 800158a:	2300      	movs	r3, #0
 800158c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	  uint8_t count = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  /* Infinite loop */
  for(;;)
  {
	 // ModBus_SetRegister(0,5+1);

    osEvent evt = osMessageGet(ModBusOutHandle,200); // wait here 200 tick
 8001596:	4b1d      	ldr	r3, [pc, #116]	; (800160c <ModbusTransThread+0x8c>)
 8001598:	6819      	ldr	r1, [r3, #0]
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	22c8      	movs	r2, #200	; 0xc8
 80015a0:	4618      	mov	r0, r3
 80015a2:	f004 fd73 	bl	800608c <osMessageGet>
    if (evt.status == osEventMessage)
 80015a6:	f107 0308 	add.w	r3, r7, #8
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2b10      	cmp	r3, #16
 80015ae:	d10c      	bne.n	80015ca <ModbusTransThread+0x4a>
      {

        buf[c++]=(uint8_t) evt.value.v;
 80015b0:	f107 0308 	add.w	r3, r7, #8
 80015b4:	6859      	ldr	r1, [r3, #4]
 80015b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 80015c0:	461a      	mov	r2, r3
 80015c2:	b2c9      	uxtb	r1, r1
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	5499      	strb	r1, [r3, r2]
      }
    if (evt.status == osEventTimeout)
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b40      	cmp	r3, #64	; 0x40
 80015d2:	d116      	bne.n	8001602 <ModbusTransThread+0x82>
      {
        if( (c > 0) && (c < 254) ) // ok, something in buffer exist, lets send it
 80015d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d00f      	beq.n	80015fc <ModbusTransThread+0x7c>
 80015dc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80015e0:	2bfd      	cmp	r3, #253	; 0xfd
 80015e2:	d80b      	bhi.n	80015fc <ModbusTransThread+0x7c>
        {
        	HAL_StatusTypeDef AA = HAL_UART_Transmit(&huart6, buf, c, 50); // by USB-CDC
 80015e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f107 0114 	add.w	r1, r7, #20
 80015ee:	2332      	movs	r3, #50	; 0x32
 80015f0:	4807      	ldr	r0, [pc, #28]	; (8001610 <ModbusTransThread+0x90>)
 80015f2:	f003 fc0a 	bl	8004e0a <HAL_UART_Transmit>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
        }
      c=0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
      }

    osDelay(1);
 8001602:	2001      	movs	r0, #1
 8001604:	f004 fcc5 	bl	8005f92 <osDelay>
  {
 8001608:	e7c5      	b.n	8001596 <ModbusTransThread+0x16>
 800160a:	bf00      	nop
 800160c:	20004474 	.word	0x20004474
 8001610:	2000415c 	.word	0x2000415c

08001614 <ModbusSetThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ModbusSetThread */
void ModbusSetThread(void const * argument)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ModbusSetThread */
  /* Infinite loop */
  for(;;)
  {

		   ModBus_SetRegister(0,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_GND_BOARD.ADS1115_CH1.data));
 800161c:	4b35      	ldr	r3, [pc, #212]	; (80016f4 <ModbusSetThread+0xe0>)
 800161e:	edd3 7a00 	vldr	s15, [r3]
 8001622:	eeb0 0a67 	vmov.f32	s0, s15
 8001626:	f7ff fcb3 	bl	8000f90 <Convert2Modbus>
 800162a:	4603      	mov	r3, r0
 800162c:	b29b      	uxth	r3, r3
 800162e:	4619      	mov	r1, r3
 8001630:	2000      	movs	r0, #0
 8001632:	f000 fb1d 	bl	8001c70 <ModBus_SetRegister>
		   ModBus_SetRegister(1,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_GND_BOARD.ADS1115_CH2.data));
 8001636:	4b2f      	ldr	r3, [pc, #188]	; (80016f4 <ModbusSetThread+0xe0>)
 8001638:	edd3 7a01 	vldr	s15, [r3, #4]
 800163c:	eeb0 0a67 	vmov.f32	s0, s15
 8001640:	f7ff fca6 	bl	8000f90 <Convert2Modbus>
 8001644:	4603      	mov	r3, r0
 8001646:	b29b      	uxth	r3, r3
 8001648:	4619      	mov	r1, r3
 800164a:	2001      	movs	r0, #1
 800164c:	f000 fb10 	bl	8001c70 <ModBus_SetRegister>
		   ModBus_SetRegister(2,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_VDD_BOARD.ADS1115_CH1.data));
 8001650:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <ModbusSetThread+0xe4>)
 8001652:	edd3 7a00 	vldr	s15, [r3]
 8001656:	eeb0 0a67 	vmov.f32	s0, s15
 800165a:	f7ff fc99 	bl	8000f90 <Convert2Modbus>
 800165e:	4603      	mov	r3, r0
 8001660:	b29b      	uxth	r3, r3
 8001662:	4619      	mov	r1, r3
 8001664:	2002      	movs	r0, #2
 8001666:	f000 fb03 	bl	8001c70 <ModBus_SetRegister>
		   ModBus_SetRegister(3,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_VDD_BOARD.ADS1115_CH2.data));
 800166a:	4b23      	ldr	r3, [pc, #140]	; (80016f8 <ModbusSetThread+0xe4>)
 800166c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001670:	eeb0 0a67 	vmov.f32	s0, s15
 8001674:	f7ff fc8c 	bl	8000f90 <Convert2Modbus>
 8001678:	4603      	mov	r3, r0
 800167a:	b29b      	uxth	r3, r3
 800167c:	4619      	mov	r1, r3
 800167e:	2003      	movs	r0, #3
 8001680:	f000 faf6 	bl	8001c70 <ModBus_SetRegister>
		   ModBus_SetRegister(4,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_SDA_BOARD.ADS1115_CH1.data));
 8001684:	4b1d      	ldr	r3, [pc, #116]	; (80016fc <ModbusSetThread+0xe8>)
 8001686:	edd3 7a00 	vldr	s15, [r3]
 800168a:	eeb0 0a67 	vmov.f32	s0, s15
 800168e:	f7ff fc7f 	bl	8000f90 <Convert2Modbus>
 8001692:	4603      	mov	r3, r0
 8001694:	b29b      	uxth	r3, r3
 8001696:	4619      	mov	r1, r3
 8001698:	2004      	movs	r0, #4
 800169a:	f000 fae9 	bl	8001c70 <ModBus_SetRegister>
		   ModBus_SetRegister(5,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_SDA_BOARD.ADS1115_CH2.data));
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <ModbusSetThread+0xe8>)
 80016a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80016a4:	eeb0 0a67 	vmov.f32	s0, s15
 80016a8:	f7ff fc72 	bl	8000f90 <Convert2Modbus>
 80016ac:	4603      	mov	r3, r0
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4619      	mov	r1, r3
 80016b2:	2005      	movs	r0, #5
 80016b4:	f000 fadc 	bl	8001c70 <ModBus_SetRegister>
		   ModBus_SetRegister(6,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_SCL_BOARD.ADS1115_CH1.data));
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <ModbusSetThread+0xec>)
 80016ba:	edd3 7a00 	vldr	s15, [r3]
 80016be:	eeb0 0a67 	vmov.f32	s0, s15
 80016c2:	f7ff fc65 	bl	8000f90 <Convert2Modbus>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	4619      	mov	r1, r3
 80016cc:	2006      	movs	r0, #6
 80016ce:	f000 facf 	bl	8001c70 <ModBus_SetRegister>
		   ModBus_SetRegister(7,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_SCL_BOARD.ADS1115_CH2.data));
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <ModbusSetThread+0xec>)
 80016d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80016d8:	eeb0 0a67 	vmov.f32	s0, s15
 80016dc:	f7ff fc58 	bl	8000f90 <Convert2Modbus>
 80016e0:	4603      	mov	r3, r0
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4619      	mov	r1, r3
 80016e6:	2007      	movs	r0, #7
 80016e8:	f000 fac2 	bl	8001c70 <ModBus_SetRegister>
//		   ModBus_SetRegister(4,(int)ADS1115_ADDRESS_ADDR_SDA_BOARD.ADS1115_CH1.data * 1000);
//		   ModBus_SetRegister(5,(int)ADS1115_ADDRESS_ADDR_SDA_BOARD.ADS1115_CH2.data * 1000);
//		   ModBus_SetRegister(6,(int)ADS1115_ADDRESS_ADDR_SCL_BOARD.ADS1115_CH1.data * 1000);
//		   ModBus_SetRegister(7,(int)ADS1115_ADDRESS_ADDR_SCL_BOARD.ADS1115_CH2.data * 1000);

    osDelay(1);
 80016ec:	2001      	movs	r0, #1
 80016ee:	f004 fc50 	bl	8005f92 <osDelay>
		   ModBus_SetRegister(0,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_GND_BOARD.ADS1115_CH1.data));
 80016f2:	e793      	b.n	800161c <ModbusSetThread+0x8>
 80016f4:	20004058 	.word	0x20004058
 80016f8:	20004060 	.word	0x20004060
 80016fc:	20004050 	.word	0x20004050
 8001700:	20004048 	.word	0x20004048

08001704 <ADS1115Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADS1115Thread */
void ADS1115Thread(void const * argument)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADS1115Thread */
  /* Infinite loop */
  for(;;)
  {

	  uint8_t ADS1115_ADDRESS_ADDR = 0;
 800170c:	2300      	movs	r3, #0
 800170e:	72fb      	strb	r3, [r7, #11]
	  for( int j = ADS1115_ADDRESS_ADDR_GND; j <= ADS1115_ADDRESS_ADDR_SCL; j++) {
 8001710:	2348      	movs	r3, #72	; 0x48
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	e031      	b.n	800177a <ADS1115Thread+0x76>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	3b48      	subs	r3, #72	; 0x48
 800171a:	2b03      	cmp	r3, #3
 800171c:	d82a      	bhi.n	8001774 <ADS1115Thread+0x70>
 800171e:	a201      	add	r2, pc, #4	; (adr r2, 8001724 <ADS1115Thread+0x20>)
 8001720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001724:	08001735 	.word	0x08001735
 8001728:	08001745 	.word	0x08001745
 800172c:	08001755 	.word	0x08001755
 8001730:	08001765 	.word	0x08001765
		  	  switch(j)
			  {
				  case(ADS1115_ADDRESS_ADDR_GND):
					ADS1115_ADDRESS_ADDR = ADS1115_ADDRESS_ADDR_GND; // 10000001 CH0+ CH1
 8001734:	2348      	movs	r3, #72	; 0x48
 8001736:	72fb      	strb	r3, [r7, #11]
					Read_ads1115(&ADS1115_ADDRESS_ADDR_GND_BOARD, ADS1115_ADDRESS_ADDR);
 8001738:	7afb      	ldrb	r3, [r7, #11]
 800173a:	4619      	mov	r1, r3
 800173c:	4812      	ldr	r0, [pc, #72]	; (8001788 <ADS1115Thread+0x84>)
 800173e:	f7ff fbab 	bl	8000e98 <Read_ads1115>
					break;
 8001742:	e017      	b.n	8001774 <ADS1115Thread+0x70>
				  case(ADS1115_ADDRESS_ADDR_VDD):
					ADS1115_ADDRESS_ADDR = ADS1115_ADDRESS_ADDR_VDD; // 10000001 CH1+ CH2
 8001744:	2349      	movs	r3, #73	; 0x49
 8001746:	72fb      	strb	r3, [r7, #11]
					Read_ads1115(&ADS1115_ADDRESS_ADDR_VDD_BOARD, ADS1115_ADDRESS_ADDR);
 8001748:	7afb      	ldrb	r3, [r7, #11]
 800174a:	4619      	mov	r1, r3
 800174c:	480f      	ldr	r0, [pc, #60]	; (800178c <ADS1115Thread+0x88>)
 800174e:	f7ff fba3 	bl	8000e98 <Read_ads1115>
					break;
 8001752:	e00f      	b.n	8001774 <ADS1115Thread+0x70>
				  case(ADS1115_ADDRESS_ADDR_SDA):
					ADS1115_ADDRESS_ADDR = ADS1115_ADDRESS_ADDR_SDA; // 10000001 CH3+ CH4
 8001754:	234a      	movs	r3, #74	; 0x4a
 8001756:	72fb      	strb	r3, [r7, #11]
					Read_ads1115(&ADS1115_ADDRESS_ADDR_SDA_BOARD, ADS1115_ADDRESS_ADDR);
 8001758:	7afb      	ldrb	r3, [r7, #11]
 800175a:	4619      	mov	r1, r3
 800175c:	480c      	ldr	r0, [pc, #48]	; (8001790 <ADS1115Thread+0x8c>)
 800175e:	f7ff fb9b 	bl	8000e98 <Read_ads1115>
					break;
 8001762:	e007      	b.n	8001774 <ADS1115Thread+0x70>
				  case(ADS1115_ADDRESS_ADDR_SCL):
					ADS1115_ADDRESS_ADDR = ADS1115_ADDRESS_ADDR_SCL; // 10000001 CH5+ CH6
 8001764:	234b      	movs	r3, #75	; 0x4b
 8001766:	72fb      	strb	r3, [r7, #11]
					Read_ads1115(&ADS1115_ADDRESS_ADDR_SCL_BOARD, ADS1115_ADDRESS_ADDR);
 8001768:	7afb      	ldrb	r3, [r7, #11]
 800176a:	4619      	mov	r1, r3
 800176c:	4809      	ldr	r0, [pc, #36]	; (8001794 <ADS1115Thread+0x90>)
 800176e:	f7ff fb93 	bl	8000e98 <Read_ads1115>
					break;
 8001772:	bf00      	nop
	  for( int j = ADS1115_ADDRESS_ADDR_GND; j <= ADS1115_ADDRESS_ADDR_SCL; j++) {
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3301      	adds	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	2b4b      	cmp	r3, #75	; 0x4b
 800177e:	ddca      	ble.n	8001716 <ADS1115Thread+0x12>
		  }
	  }
	  osDelay(1);
 8001780:	2001      	movs	r0, #1
 8001782:	f004 fc06 	bl	8005f92 <osDelay>
  {
 8001786:	e7c1      	b.n	800170c <ADS1115Thread+0x8>
 8001788:	20004058 	.word	0x20004058
 800178c:	20004060 	.word	0x20004060
 8001790:	20004050 	.word	0x20004050
 8001794:	20004048 	.word	0x20004048

08001798 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d101      	bne.n	80017ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017aa:	f000 fdc1 	bl	8002330 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40000400 	.word	0x40000400

080017bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <ModBusTask>:
uint8_t mb_buf_out_count;

void ModBusParse(void);

void ModBusTask(void const * argument)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osEvent evt = osMessageGet(ModBusInHandle,ModBus35);
 80017d4:	4b16      	ldr	r3, [pc, #88]	; (8001830 <ModBusTask+0x64>)
 80017d6:	6819      	ldr	r1, [r3, #0]
 80017d8:	f107 0308 	add.w	r3, r7, #8
 80017dc:	220a      	movs	r2, #10
 80017de:	4618      	mov	r0, r3
 80017e0:	f004 fc54 	bl	800608c <osMessageGet>
    // Frame end?
    if (evt.status == osEventTimeout)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b40      	cmp	r3, #64	; 0x40
 80017e8:	d108      	bne.n	80017fc <ModBusTask+0x30>
      {
        if(mb_buf_in_count > 0) // ok, something in buffer exist, lets parse it
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <ModBusTask+0x68>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <ModBusTask+0x2a>
        {
          ModBusParse();
 80017f2:	f000 f893 	bl	800191c <ModBusParse>
        }  
      mb_buf_in_count=0;
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <ModBusTask+0x68>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	701a      	strb	r2, [r3, #0]
      }
    // Wow, something come!
    if (evt.status == osEventMessage)
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	2b10      	cmp	r3, #16
 8001800:	d1e8      	bne.n	80017d4 <ModBusTask+0x8>
      {
        uint8_t byte = (uint8_t) evt.value.v;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	75fb      	strb	r3, [r7, #23]
        // buffer has space for incoming?
        if(mb_buf_in_count<254)
 8001806:	4b0b      	ldr	r3, [pc, #44]	; (8001834 <ModBusTask+0x68>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	2bfd      	cmp	r3, #253	; 0xfd
 800180c:	d80c      	bhi.n	8001828 <ModBusTask+0x5c>
        {
          mb_buf_in[mb_buf_in_count]=byte;
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <ModBusTask+0x68>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	4619      	mov	r1, r3
 8001814:	4a08      	ldr	r2, [pc, #32]	; (8001838 <ModBusTask+0x6c>)
 8001816:	7dfb      	ldrb	r3, [r7, #23]
 8001818:	5453      	strb	r3, [r2, r1]
          mb_buf_in_count=mb_buf_in_count+1; // prevent opt/war on come compilers
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <ModBusTask+0x68>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4b04      	ldr	r3, [pc, #16]	; (8001834 <ModBusTask+0x68>)
 8001824:	701a      	strb	r2, [r3, #0]
 8001826:	e7d5      	b.n	80017d4 <ModBusTask+0x8>
        }
        else // oops, bad frame, by standard we should drop it and no answer
        {
          mb_buf_in_count=0;
 8001828:	4b02      	ldr	r3, [pc, #8]	; (8001834 <ModBusTask+0x68>)
 800182a:	2200      	movs	r2, #0
 800182c:	701a      	strb	r2, [r3, #0]
  {
 800182e:	e7d1      	b.n	80017d4 <ModBusTask+0x8>
 8001830:	2000447c 	.word	0x2000447c
 8001834:	20004480 	.word	0x20004480
 8001838:	20004484 	.word	0x20004484

0800183c <ModBus_Init>:
      }
  }
}

void ModBus_Init(void)
{
 800183c:	b5b0      	push	{r4, r5, r7, lr}
 800183e:	b090      	sub	sp, #64	; 0x40
 8001840:	af00      	add	r7, sp, #0
  osMessageQDef(ModBusIn, 256, uint8_t);
 8001842:	4b25      	ldr	r3, [pc, #148]	; (80018d8 <ModBus_Init+0x9c>)
 8001844:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 8001848:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800184a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ModBusInHandle = osMessageCreate(osMessageQ(ModBusIn), NULL);
 800184e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f004 fbb0 	bl	8005fba <osMessageCreate>
 800185a:	4603      	mov	r3, r0
 800185c:	4a1f      	ldr	r2, [pc, #124]	; (80018dc <ModBus_Init+0xa0>)
 800185e:	6013      	str	r3, [r2, #0]
  osMessageQDef(ModBusOut, 256, uint8_t);
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <ModBus_Init+0x9c>)
 8001862:	f107 041c 	add.w	r4, r7, #28
 8001866:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001868:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ModBusOutHandle = osMessageCreate(osMessageQ(ModBusOut), NULL);
 800186c:	f107 031c 	add.w	r3, r7, #28
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f004 fba1 	bl	8005fba <osMessageCreate>
 8001878:	4603      	mov	r3, r0
 800187a:	4a19      	ldr	r2, [pc, #100]	; (80018e0 <ModBus_Init+0xa4>)
 800187c:	6013      	str	r3, [r2, #0]
  osThreadDef(ModBusTask, ModBusTask, osPriorityNormal, 0, 128);
 800187e:	4b19      	ldr	r3, [pc, #100]	; (80018e4 <ModBus_Init+0xa8>)
 8001880:	463c      	mov	r4, r7
 8001882:	461d      	mov	r5, r3
 8001884:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001886:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001888:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800188c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModBusTaskHandle = osThreadCreate(osThread(ModBusTask), NULL);
 8001890:	463b      	mov	r3, r7
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f004 fb30 	bl	8005efa <osThreadCreate>
 800189a:	4603      	mov	r3, r0
 800189c:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <ModBus_Init+0xac>)
 800189e:	6013      	str	r3, [r2, #0]
  mb_buf_in_count=0;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <ModBus_Init+0xb0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
  mb_addr=247; // by default maximum possible adrress
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <ModBus_Init+0xb4>)
 80018a8:	22f7      	movs	r2, #247	; 0xf7
 80018aa:	701a      	strb	r2, [r3, #0]
  mb_buf_out_count=0;
 80018ac:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <ModBus_Init+0xb8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<ModBusRegisters;i++) 
 80018b2:	2300      	movs	r3, #0
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018b6:	e007      	b.n	80018c8 <ModBus_Init+0x8c>
  {
    mb_reg[i]=0;
 80018b8:	4a0f      	ldr	r2, [pc, #60]	; (80018f8 <ModBus_Init+0xbc>)
 80018ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018bc:	2100      	movs	r1, #0
 80018be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0;i<ModBusRegisters;i++) 
 80018c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018c4:	3301      	adds	r3, #1
 80018c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ca:	2b63      	cmp	r3, #99	; 0x63
 80018cc:	ddf4      	ble.n	80018b8 <ModBus_Init+0x7c>
  }
}
 80018ce:	bf00      	nop
 80018d0:	bf00      	nop
 80018d2:	3740      	adds	r7, #64	; 0x40
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bdb0      	pop	{r4, r5, r7, pc}
 80018d8:	08009d98 	.word	0x08009d98
 80018dc:	2000447c 	.word	0x2000447c
 80018e0:	20004474 	.word	0x20004474
 80018e4:	08009da8 	.word	0x08009da8
 80018e8:	200042a8 	.word	0x200042a8
 80018ec:	20004480 	.word	0x20004480
 80018f0:	20004478 	.word	0x20004478
 80018f4:	20004481 	.word	0x20004481
 80018f8:	200042ac 	.word	0x200042ac

080018fc <ModBus_SetAddress>:

void ModBus_SetAddress(uint8_t addr)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
  mb_addr = addr;
 8001906:	4a04      	ldr	r2, [pc, #16]	; (8001918 <ModBus_SetAddress+0x1c>)
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	7013      	strb	r3, [r2, #0]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	20004478 	.word	0x20004478

0800191c <ModBusParse>:
void CRC16_OUT(void);
uint8_t CRC16_IN(void);

// parse something in incoming buffer 
void ModBusParse(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
    if(mb_buf_in_count==0) // call as by mistake on empty buffer?
 8001922:	4b72      	ldr	r3, [pc, #456]	; (8001aec <ModBusParse+0x1d0>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	f000 818d 	beq.w	8001c46 <ModBusParse+0x32a>
    {
      return;
    }
    
    if(mb_buf_in[0] != mb_addr) // its not our address!
 800192c:	4b70      	ldr	r3, [pc, #448]	; (8001af0 <ModBusParse+0x1d4>)
 800192e:	781a      	ldrb	r2, [r3, #0]
 8001930:	4b70      	ldr	r3, [pc, #448]	; (8001af4 <ModBusParse+0x1d8>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	429a      	cmp	r2, r3
 8001936:	f040 8188 	bne.w	8001c4a <ModBusParse+0x32e>
    {
      return;
    }
    // check CRC
    if(CRC16_IN()==0)
 800193a:	f000 fa13 	bl	8001d64 <CRC16_IN>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	f040 8179 	bne.w	8001c38 <ModBusParse+0x31c>
    {
      mb_buf_out_count = 0;
 8001946:	4b6c      	ldr	r3, [pc, #432]	; (8001af8 <ModBusParse+0x1dc>)
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
      uint16_t st,nu;
      uint8_t func = mb_buf_in[1];
 800194c:	4b68      	ldr	r3, [pc, #416]	; (8001af0 <ModBusParse+0x1d4>)
 800194e:	785b      	ldrb	r3, [r3, #1]
 8001950:	71fb      	strb	r3, [r7, #7]
      uint8_t i;
      switch(func)
 8001952:	79fb      	ldrb	r3, [r7, #7]
 8001954:	2b03      	cmp	r3, #3
 8001956:	d003      	beq.n	8001960 <ModBusParse+0x44>
 8001958:	2b10      	cmp	r3, #16
 800195a:	f000 8089 	beq.w	8001a70 <ModBusParse+0x154>
 800195e:	e131      	b.n	8001bc4 <ModBusParse+0x2a8>
      {
        case 3:
          // read holding registers. by bytes addr func starth startl totalh totall
          st=mb_buf_in[2]*256+mb_buf_in[3];
 8001960:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <ModBusParse+0x1d4>)
 8001962:	789b      	ldrb	r3, [r3, #2]
 8001964:	b29b      	uxth	r3, r3
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	b29a      	uxth	r2, r3
 800196a:	4b61      	ldr	r3, [pc, #388]	; (8001af0 <ModBusParse+0x1d4>)
 800196c:	78db      	ldrb	r3, [r3, #3]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4413      	add	r3, r2
 8001972:	80bb      	strh	r3, [r7, #4]
          nu=mb_buf_in[4]*256+mb_buf_in[5];
 8001974:	4b5e      	ldr	r3, [pc, #376]	; (8001af0 <ModBusParse+0x1d4>)
 8001976:	791b      	ldrb	r3, [r3, #4]
 8001978:	b29b      	uxth	r3, r3
 800197a:	021b      	lsls	r3, r3, #8
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b5c      	ldr	r3, [pc, #368]	; (8001af0 <ModBusParse+0x1d4>)
 8001980:	795b      	ldrb	r3, [r3, #5]
 8001982:	b29b      	uxth	r3, r3
 8001984:	4413      	add	r3, r2
 8001986:	807b      	strh	r3, [r7, #2]
          if( (st+nu) > ModBusRegisters) // dont ask more, that we has!
 8001988:	88ba      	ldrh	r2, [r7, #4]
 800198a:	887b      	ldrh	r3, [r7, #2]
 800198c:	4413      	add	r3, r2
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	dd21      	ble.n	80019d6 <ModBusParse+0xba>
            {
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 8001992:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <ModBusParse+0x1dc>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	1c5a      	adds	r2, r3, #1
 8001998:	b2d1      	uxtb	r1, r2
 800199a:	4a57      	ldr	r2, [pc, #348]	; (8001af8 <ModBusParse+0x1dc>)
 800199c:	7011      	strb	r1, [r2, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	4b54      	ldr	r3, [pc, #336]	; (8001af4 <ModBusParse+0x1d8>)
 80019a2:	7819      	ldrb	r1, [r3, #0]
 80019a4:	4b55      	ldr	r3, [pc, #340]	; (8001afc <ModBusParse+0x1e0>)
 80019a6:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func+0x80;
 80019a8:	4b53      	ldr	r3, [pc, #332]	; (8001af8 <ModBusParse+0x1dc>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	b2d1      	uxtb	r1, r2
 80019b0:	4a51      	ldr	r2, [pc, #324]	; (8001af8 <ModBusParse+0x1dc>)
 80019b2:	7011      	strb	r1, [r2, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	3b80      	subs	r3, #128	; 0x80
 80019ba:	b2d9      	uxtb	r1, r3
 80019bc:	4b4f      	ldr	r3, [pc, #316]	; (8001afc <ModBusParse+0x1e0>)
 80019be:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=2;
 80019c0:	4b4d      	ldr	r3, [pc, #308]	; (8001af8 <ModBusParse+0x1dc>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	b2d1      	uxtb	r1, r2
 80019c8:	4a4b      	ldr	r2, [pc, #300]	; (8001af8 <ModBusParse+0x1dc>)
 80019ca:	7011      	strb	r1, [r2, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b4b      	ldr	r3, [pc, #300]	; (8001afc <ModBusParse+0x1e0>)
 80019d0:	2102      	movs	r1, #2
 80019d2:	5499      	strb	r1, [r3, r2]
                {
                  mb_buf_out[mb_buf_out_count++]=( mb_reg[i] >> 8 ) & 0xFF; // hi part
                  mb_buf_out[mb_buf_out_count++]=mb_reg[i] & 0xFF; // lo part
                }
            }
          break;
 80019d4:	e118      	b.n	8001c08 <ModBusParse+0x2ec>
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 80019d6:	4b48      	ldr	r3, [pc, #288]	; (8001af8 <ModBusParse+0x1dc>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	1c5a      	adds	r2, r3, #1
 80019dc:	b2d1      	uxtb	r1, r2
 80019de:	4a46      	ldr	r2, [pc, #280]	; (8001af8 <ModBusParse+0x1dc>)
 80019e0:	7011      	strb	r1, [r2, #0]
 80019e2:	461a      	mov	r2, r3
 80019e4:	4b43      	ldr	r3, [pc, #268]	; (8001af4 <ModBusParse+0x1d8>)
 80019e6:	7819      	ldrb	r1, [r3, #0]
 80019e8:	4b44      	ldr	r3, [pc, #272]	; (8001afc <ModBusParse+0x1e0>)
 80019ea:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func;
 80019ec:	4b42      	ldr	r3, [pc, #264]	; (8001af8 <ModBusParse+0x1dc>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	1c5a      	adds	r2, r3, #1
 80019f2:	b2d1      	uxtb	r1, r2
 80019f4:	4a40      	ldr	r2, [pc, #256]	; (8001af8 <ModBusParse+0x1dc>)
 80019f6:	7011      	strb	r1, [r2, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	4a40      	ldr	r2, [pc, #256]	; (8001afc <ModBusParse+0x1e0>)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	5453      	strb	r3, [r2, r1]
              mb_buf_out[mb_buf_out_count++]=nu*2; // how many bytes we will send?
 8001a00:	887b      	ldrh	r3, [r7, #2]
 8001a02:	b2da      	uxtb	r2, r3
 8001a04:	4b3c      	ldr	r3, [pc, #240]	; (8001af8 <ModBusParse+0x1dc>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	1c59      	adds	r1, r3, #1
 8001a0a:	b2c8      	uxtb	r0, r1
 8001a0c:	493a      	ldr	r1, [pc, #232]	; (8001af8 <ModBusParse+0x1dc>)
 8001a0e:	7008      	strb	r0, [r1, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	0053      	lsls	r3, r2, #1
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	4b39      	ldr	r3, [pc, #228]	; (8001afc <ModBusParse+0x1e0>)
 8001a18:	545a      	strb	r2, [r3, r1]
              for(i=st;i<(st+nu);i++)
 8001a1a:	88bb      	ldrh	r3, [r7, #4]
 8001a1c:	73fb      	strb	r3, [r7, #15]
 8001a1e:	e020      	b.n	8001a62 <ModBusParse+0x146>
                  mb_buf_out[mb_buf_out_count++]=( mb_reg[i] >> 8 ) & 0xFF; // hi part
 8001a20:	7bfb      	ldrb	r3, [r7, #15]
 8001a22:	4a37      	ldr	r2, [pc, #220]	; (8001b00 <ModBusParse+0x1e4>)
 8001a24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a28:	0a1b      	lsrs	r3, r3, #8
 8001a2a:	b299      	uxth	r1, r3
 8001a2c:	4b32      	ldr	r3, [pc, #200]	; (8001af8 <ModBusParse+0x1dc>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	b2d0      	uxtb	r0, r2
 8001a34:	4a30      	ldr	r2, [pc, #192]	; (8001af8 <ModBusParse+0x1dc>)
 8001a36:	7010      	strb	r0, [r2, #0]
 8001a38:	461a      	mov	r2, r3
 8001a3a:	b2c9      	uxtb	r1, r1
 8001a3c:	4b2f      	ldr	r3, [pc, #188]	; (8001afc <ModBusParse+0x1e0>)
 8001a3e:	5499      	strb	r1, [r3, r2]
                  mb_buf_out[mb_buf_out_count++]=mb_reg[i] & 0xFF; // lo part
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
 8001a42:	4a2f      	ldr	r2, [pc, #188]	; (8001b00 <ModBusParse+0x1e4>)
 8001a44:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001a48:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <ModBusParse+0x1dc>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	b2d0      	uxtb	r0, r2
 8001a50:	4a29      	ldr	r2, [pc, #164]	; (8001af8 <ModBusParse+0x1dc>)
 8001a52:	7010      	strb	r0, [r2, #0]
 8001a54:	461a      	mov	r2, r3
 8001a56:	b2c9      	uxtb	r1, r1
 8001a58:	4b28      	ldr	r3, [pc, #160]	; (8001afc <ModBusParse+0x1e0>)
 8001a5a:	5499      	strb	r1, [r3, r2]
              for(i=st;i<(st+nu);i++)
 8001a5c:	7bfb      	ldrb	r3, [r7, #15]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	73fb      	strb	r3, [r7, #15]
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	88b9      	ldrh	r1, [r7, #4]
 8001a66:	887b      	ldrh	r3, [r7, #2]
 8001a68:	440b      	add	r3, r1
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	dbd8      	blt.n	8001a20 <ModBusParse+0x104>
          break;
 8001a6e:	e0cb      	b.n	8001c08 <ModBusParse+0x2ec>
        case 16: 
          // write holding registers. by bytes addr func starth startl totalh totall num_bytes regh regl ...
          st=mb_buf_in[2]*256+mb_buf_in[3];
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <ModBusParse+0x1d4>)
 8001a72:	789b      	ldrb	r3, [r3, #2]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <ModBusParse+0x1d4>)
 8001a7c:	78db      	ldrb	r3, [r3, #3]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	4413      	add	r3, r2
 8001a82:	80bb      	strh	r3, [r7, #4]
          nu=mb_buf_in[4]*256+mb_buf_in[5];
 8001a84:	4b1a      	ldr	r3, [pc, #104]	; (8001af0 <ModBusParse+0x1d4>)
 8001a86:	791b      	ldrb	r3, [r3, #4]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <ModBusParse+0x1d4>)
 8001a90:	795b      	ldrb	r3, [r3, #5]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	4413      	add	r3, r2
 8001a96:	807b      	strh	r3, [r7, #2]
          if( (st+nu) > ModBusRegisters) // dont ask more, that we has!
 8001a98:	88ba      	ldrh	r2, [r7, #4]
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	dd21      	ble.n	8001ae6 <ModBusParse+0x1ca>
            {
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <ModBusParse+0x1dc>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	1c5a      	adds	r2, r3, #1
 8001aa8:	b2d1      	uxtb	r1, r2
 8001aaa:	4a13      	ldr	r2, [pc, #76]	; (8001af8 <ModBusParse+0x1dc>)
 8001aac:	7011      	strb	r1, [r2, #0]
 8001aae:	461a      	mov	r2, r3
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <ModBusParse+0x1d8>)
 8001ab2:	7819      	ldrb	r1, [r3, #0]
 8001ab4:	4b11      	ldr	r3, [pc, #68]	; (8001afc <ModBusParse+0x1e0>)
 8001ab6:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func+0x80;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <ModBusParse+0x1dc>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	b2d1      	uxtb	r1, r2
 8001ac0:	4a0d      	ldr	r2, [pc, #52]	; (8001af8 <ModBusParse+0x1dc>)
 8001ac2:	7011      	strb	r1, [r2, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	3b80      	subs	r3, #128	; 0x80
 8001aca:	b2d9      	uxtb	r1, r3
 8001acc:	4b0b      	ldr	r3, [pc, #44]	; (8001afc <ModBusParse+0x1e0>)
 8001ace:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=2;
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <ModBusParse+0x1dc>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	1c5a      	adds	r2, r3, #1
 8001ad6:	b2d1      	uxtb	r1, r2
 8001ad8:	4a07      	ldr	r2, [pc, #28]	; (8001af8 <ModBusParse+0x1dc>)
 8001ada:	7011      	strb	r1, [r2, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b07      	ldr	r3, [pc, #28]	; (8001afc <ModBusParse+0x1e0>)
 8001ae0:	2102      	movs	r1, #2
 8001ae2:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[2]; // how many registers ask, so many wrote
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[3];
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[4];
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[5];
            }
          break;
 8001ae4:	e090      	b.n	8001c08 <ModBusParse+0x2ec>
              for(i=0;i<nu;i++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	73fb      	strb	r3, [r7, #15]
 8001aea:	e024      	b.n	8001b36 <ModBusParse+0x21a>
 8001aec:	20004480 	.word	0x20004480
 8001af0:	20004484 	.word	0x20004484
 8001af4:	20004478 	.word	0x20004478
 8001af8:	20004481 	.word	0x20004481
 8001afc:	20004374 	.word	0x20004374
 8001b00:	200042ac 	.word	0x200042ac
                  mb_reg[st+i]=mb_buf_in[7+i*2]*256+mb_buf_in[8+i*2];
 8001b04:	7bfb      	ldrb	r3, [r7, #15]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	3307      	adds	r3, #7
 8001b0a:	4a52      	ldr	r2, [pc, #328]	; (8001c54 <ModBusParse+0x338>)
 8001b0c:	5cd3      	ldrb	r3, [r2, r3]
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	b299      	uxth	r1, r3
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	3304      	adds	r3, #4
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	4a4e      	ldr	r2, [pc, #312]	; (8001c54 <ModBusParse+0x338>)
 8001b1c:	5cd3      	ldrb	r3, [r2, r3]
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	88b8      	ldrh	r0, [r7, #4]
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	4403      	add	r3, r0
 8001b26:	440a      	add	r2, r1
 8001b28:	b291      	uxth	r1, r2
 8001b2a:	4a4b      	ldr	r2, [pc, #300]	; (8001c58 <ModBusParse+0x33c>)
 8001b2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
              for(i=0;i<nu;i++)
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	3301      	adds	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d8e1      	bhi.n	8001b04 <ModBusParse+0x1e8>
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 8001b40:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <ModBusParse+0x340>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	1c5a      	adds	r2, r3, #1
 8001b46:	b2d1      	uxtb	r1, r2
 8001b48:	4a44      	ldr	r2, [pc, #272]	; (8001c5c <ModBusParse+0x340>)
 8001b4a:	7011      	strb	r1, [r2, #0]
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	4b44      	ldr	r3, [pc, #272]	; (8001c60 <ModBusParse+0x344>)
 8001b50:	7819      	ldrb	r1, [r3, #0]
 8001b52:	4b44      	ldr	r3, [pc, #272]	; (8001c64 <ModBusParse+0x348>)
 8001b54:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func;
 8001b56:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <ModBusParse+0x340>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	b2d1      	uxtb	r1, r2
 8001b5e:	4a3f      	ldr	r2, [pc, #252]	; (8001c5c <ModBusParse+0x340>)
 8001b60:	7011      	strb	r1, [r2, #0]
 8001b62:	4619      	mov	r1, r3
 8001b64:	4a3f      	ldr	r2, [pc, #252]	; (8001c64 <ModBusParse+0x348>)
 8001b66:	79fb      	ldrb	r3, [r7, #7]
 8001b68:	5453      	strb	r3, [r2, r1]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[2]; // how many registers ask, so many wrote
 8001b6a:	4b3c      	ldr	r3, [pc, #240]	; (8001c5c <ModBusParse+0x340>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	1c5a      	adds	r2, r3, #1
 8001b70:	b2d1      	uxtb	r1, r2
 8001b72:	4a3a      	ldr	r2, [pc, #232]	; (8001c5c <ModBusParse+0x340>)
 8001b74:	7011      	strb	r1, [r2, #0]
 8001b76:	461a      	mov	r2, r3
 8001b78:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <ModBusParse+0x338>)
 8001b7a:	7899      	ldrb	r1, [r3, #2]
 8001b7c:	4b39      	ldr	r3, [pc, #228]	; (8001c64 <ModBusParse+0x348>)
 8001b7e:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[3];
 8001b80:	4b36      	ldr	r3, [pc, #216]	; (8001c5c <ModBusParse+0x340>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	b2d1      	uxtb	r1, r2
 8001b88:	4a34      	ldr	r2, [pc, #208]	; (8001c5c <ModBusParse+0x340>)
 8001b8a:	7011      	strb	r1, [r2, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <ModBusParse+0x338>)
 8001b90:	78d9      	ldrb	r1, [r3, #3]
 8001b92:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <ModBusParse+0x348>)
 8001b94:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[4];
 8001b96:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <ModBusParse+0x340>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	b2d1      	uxtb	r1, r2
 8001b9e:	4a2f      	ldr	r2, [pc, #188]	; (8001c5c <ModBusParse+0x340>)
 8001ba0:	7011      	strb	r1, [r2, #0]
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <ModBusParse+0x338>)
 8001ba6:	7919      	ldrb	r1, [r3, #4]
 8001ba8:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <ModBusParse+0x348>)
 8001baa:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=mb_buf_in[5];
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <ModBusParse+0x340>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	b2d1      	uxtb	r1, r2
 8001bb4:	4a29      	ldr	r2, [pc, #164]	; (8001c5c <ModBusParse+0x340>)
 8001bb6:	7011      	strb	r1, [r2, #0]
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <ModBusParse+0x338>)
 8001bbc:	7959      	ldrb	r1, [r3, #5]
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <ModBusParse+0x348>)
 8001bc0:	5499      	strb	r1, [r3, r2]
          break;
 8001bc2:	e021      	b.n	8001c08 <ModBusParse+0x2ec>
        default:  
          // Exception as we does not provide this function
          mb_buf_out[mb_buf_out_count++]=mb_addr;
 8001bc4:	4b25      	ldr	r3, [pc, #148]	; (8001c5c <ModBusParse+0x340>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	1c5a      	adds	r2, r3, #1
 8001bca:	b2d1      	uxtb	r1, r2
 8001bcc:	4a23      	ldr	r2, [pc, #140]	; (8001c5c <ModBusParse+0x340>)
 8001bce:	7011      	strb	r1, [r2, #0]
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b23      	ldr	r3, [pc, #140]	; (8001c60 <ModBusParse+0x344>)
 8001bd4:	7819      	ldrb	r1, [r3, #0]
 8001bd6:	4b23      	ldr	r3, [pc, #140]	; (8001c64 <ModBusParse+0x348>)
 8001bd8:	5499      	strb	r1, [r3, r2]
          mb_buf_out[mb_buf_out_count++]=func+0x80;
 8001bda:	4b20      	ldr	r3, [pc, #128]	; (8001c5c <ModBusParse+0x340>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	1c5a      	adds	r2, r3, #1
 8001be0:	b2d1      	uxtb	r1, r2
 8001be2:	4a1e      	ldr	r2, [pc, #120]	; (8001c5c <ModBusParse+0x340>)
 8001be4:	7011      	strb	r1, [r2, #0]
 8001be6:	461a      	mov	r2, r3
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	3b80      	subs	r3, #128	; 0x80
 8001bec:	b2d9      	uxtb	r1, r3
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <ModBusParse+0x348>)
 8001bf0:	5499      	strb	r1, [r3, r2]
          mb_buf_out[mb_buf_out_count++]=1;
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	; (8001c5c <ModBusParse+0x340>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	1c5a      	adds	r2, r3, #1
 8001bf8:	b2d1      	uxtb	r1, r2
 8001bfa:	4a18      	ldr	r2, [pc, #96]	; (8001c5c <ModBusParse+0x340>)
 8001bfc:	7011      	strb	r1, [r2, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <ModBusParse+0x348>)
 8001c02:	2101      	movs	r1, #1
 8001c04:	5499      	strb	r1, [r3, r2]
          break;
 8001c06:	bf00      	nop
      }
      
      CRC16_OUT();
 8001c08:	f000 f84a 	bl	8001ca0 <CRC16_OUT>
      
     // If you want directly to USB-CDC 
     //CDC_Transmit_FS(&mb_buf_out[0], mb_buf_out_count);
     for(int i=0;i<mb_buf_out_count;i++)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60bb      	str	r3, [r7, #8]
 8001c10:	e00c      	b.n	8001c2c <ModBusParse+0x310>
        {
          osMessagePut(ModBusOutHandle,mb_buf_out[i],0);
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <ModBusParse+0x34c>)
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	4a13      	ldr	r2, [pc, #76]	; (8001c64 <ModBusParse+0x348>)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	4413      	add	r3, r2
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	4619      	mov	r1, r3
 8001c22:	f004 f9f3 	bl	800600c <osMessagePut>
     for(int i=0;i<mb_buf_out_count;i++)
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <ModBusParse+0x340>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	4293      	cmp	r3, r2
 8001c36:	dbec      	blt.n	8001c12 <ModBusParse+0x2f6>
        }
    }
    // Ok, we parsed buffer, clean up
    mb_buf_in_count=0;
 8001c38:	4b0c      	ldr	r3, [pc, #48]	; (8001c6c <ModBusParse+0x350>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
    mb_buf_out_count=0;
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <ModBusParse+0x340>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	e002      	b.n	8001c4c <ModBusParse+0x330>
      return;
 8001c46:	bf00      	nop
 8001c48:	e000      	b.n	8001c4c <ModBusParse+0x330>
      return;
 8001c4a:	bf00      	nop
}
 8001c4c:	3710      	adds	r7, #16
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	20004484 	.word	0x20004484
 8001c58:	200042ac 	.word	0x200042ac
 8001c5c:	20004481 	.word	0x20004481
 8001c60:	20004478 	.word	0x20004478
 8001c64:	20004374 	.word	0x20004374
 8001c68:	20004474 	.word	0x20004474
 8001c6c:	20004480 	.word	0x20004480

08001c70 <ModBus_SetRegister>:

// set value of register
void ModBus_SetRegister(uint8_t reg,uint16_t value)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	460a      	mov	r2, r1
 8001c7a:	71fb      	strb	r3, [r7, #7]
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	80bb      	strh	r3, [r7, #4]
  if(reg<ModBusRegisters)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	2b63      	cmp	r3, #99	; 0x63
 8001c84:	d804      	bhi.n	8001c90 <ModBus_SetRegister+0x20>
  {
    mb_reg[reg]=value;
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	4904      	ldr	r1, [pc, #16]	; (8001c9c <ModBus_SetRegister+0x2c>)
 8001c8a:	88ba      	ldrh	r2, [r7, #4]
 8001c8c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  }
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	200042ac 	.word	0x200042ac

08001ca0 <CRC16_OUT>:


// Calculate CRC for outcoming buffer
// and place it to end.
void CRC16_OUT(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
  uint16_t crc = 0xFFFF;
 8001ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001caa:	80fb      	strh	r3, [r7, #6]
  uint16_t pos = 0;
 8001cac:	2300      	movs	r3, #0
 8001cae:	80bb      	strh	r3, [r7, #4]
  uint8_t i =0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	70fb      	strb	r3, [r7, #3]
  uint8_t lo =0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	70bb      	strb	r3, [r7, #2]
  uint8_t hi =0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	707b      	strb	r3, [r7, #1]
  
  for (pos = 0; pos < mb_buf_out_count; pos++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	80bb      	strh	r3, [r7, #4]
 8001cc0:	e025      	b.n	8001d0e <CRC16_OUT+0x6e>
  {
    crc ^= mb_buf_out[pos];
 8001cc2:	88bb      	ldrh	r3, [r7, #4]
 8001cc4:	4a25      	ldr	r2, [pc, #148]	; (8001d5c <CRC16_OUT+0xbc>)
 8001cc6:	5cd3      	ldrb	r3, [r2, r3]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	88fb      	ldrh	r3, [r7, #6]
 8001ccc:	4053      	eors	r3, r2
 8001cce:	80fb      	strh	r3, [r7, #6]

  for (i = 8; i != 0; i--)
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	70fb      	strb	r3, [r7, #3]
 8001cd4:	e015      	b.n	8001d02 <CRC16_OUT+0x62>
    {
    if ((crc & 0x0001) != 0)
 8001cd6:	88fb      	ldrh	r3, [r7, #6]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <CRC16_OUT+0x56>
      {
      crc >>= 1;
 8001ce0:	88fb      	ldrh	r3, [r7, #6]
 8001ce2:	085b      	lsrs	r3, r3, #1
 8001ce4:	80fb      	strh	r3, [r7, #6]
      crc ^= 0xA001;
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001cec:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	80fb      	strh	r3, [r7, #6]
 8001cf4:	e002      	b.n	8001cfc <CRC16_OUT+0x5c>
      }
    else
      crc >>= 1;
 8001cf6:	88fb      	ldrh	r3, [r7, #6]
 8001cf8:	085b      	lsrs	r3, r3, #1
 8001cfa:	80fb      	strh	r3, [r7, #6]
  for (i = 8; i != 0; i--)
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	70fb      	strb	r3, [r7, #3]
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1e6      	bne.n	8001cd6 <CRC16_OUT+0x36>
  for (pos = 0; pos < mb_buf_out_count; pos++)
 8001d08:	88bb      	ldrh	r3, [r7, #4]
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	80bb      	strh	r3, [r7, #4]
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <CRC16_OUT+0xc0>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	88ba      	ldrh	r2, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d3d3      	bcc.n	8001cc2 <CRC16_OUT+0x22>
    }
  }
  lo = crc & 0xFF;
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	70bb      	strb	r3, [r7, #2]
  hi = ( crc >> 8 ) & 0xFF;
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	707b      	strb	r3, [r7, #1]
  
  mb_buf_out[mb_buf_out_count++] = lo;
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <CRC16_OUT+0xc0>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	b2d1      	uxtb	r1, r2
 8001d2e:	4a0c      	ldr	r2, [pc, #48]	; (8001d60 <CRC16_OUT+0xc0>)
 8001d30:	7011      	strb	r1, [r2, #0]
 8001d32:	4619      	mov	r1, r3
 8001d34:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <CRC16_OUT+0xbc>)
 8001d36:	78bb      	ldrb	r3, [r7, #2]
 8001d38:	5453      	strb	r3, [r2, r1]
  mb_buf_out[mb_buf_out_count++] = hi;
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <CRC16_OUT+0xc0>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	b2d1      	uxtb	r1, r2
 8001d42:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <CRC16_OUT+0xc0>)
 8001d44:	7011      	strb	r1, [r2, #0]
 8001d46:	4619      	mov	r1, r3
 8001d48:	4a04      	ldr	r2, [pc, #16]	; (8001d5c <CRC16_OUT+0xbc>)
 8001d4a:	787b      	ldrb	r3, [r7, #1]
 8001d4c:	5453      	strb	r3, [r2, r1]
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20004374 	.word	0x20004374
 8001d60:	20004481 	.word	0x20004481

08001d64 <CRC16_IN>:

// Calculate CRC fro incoming buffer
// Return 0 - if CRC is correct, overwise return 0 
uint8_t CRC16_IN(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
  uint16_t crc = 0xFFFF;
 8001d6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d6e:	80fb      	strh	r3, [r7, #6]
  uint16_t pos = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	80bb      	strh	r3, [r7, #4]
  uint8_t i =0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	70fb      	strb	r3, [r7, #3]
  uint8_t lo =0;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	70bb      	strb	r3, [r7, #2]
  uint8_t hi =0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	707b      	strb	r3, [r7, #1]
  
  for (pos = 0; pos < mb_buf_in_count-2; pos++)
 8001d80:	2300      	movs	r3, #0
 8001d82:	80bb      	strh	r3, [r7, #4]
 8001d84:	e025      	b.n	8001dd2 <CRC16_IN+0x6e>
  {
    crc ^= mb_buf_in[pos];
 8001d86:	88bb      	ldrh	r3, [r7, #4]
 8001d88:	4a24      	ldr	r2, [pc, #144]	; (8001e1c <CRC16_IN+0xb8>)
 8001d8a:	5cd3      	ldrb	r3, [r2, r3]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	88fb      	ldrh	r3, [r7, #6]
 8001d90:	4053      	eors	r3, r2
 8001d92:	80fb      	strh	r3, [r7, #6]

  for (i = 8; i != 0; i--)
 8001d94:	2308      	movs	r3, #8
 8001d96:	70fb      	strb	r3, [r7, #3]
 8001d98:	e015      	b.n	8001dc6 <CRC16_IN+0x62>
    {
    if ((crc & 0x0001) != 0)
 8001d9a:	88fb      	ldrh	r3, [r7, #6]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00a      	beq.n	8001dba <CRC16_IN+0x56>
      {
      crc >>= 1;
 8001da4:	88fb      	ldrh	r3, [r7, #6]
 8001da6:	085b      	lsrs	r3, r3, #1
 8001da8:	80fb      	strh	r3, [r7, #6]
      crc ^= 0xA001;
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001db0:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001db4:	43db      	mvns	r3, r3
 8001db6:	80fb      	strh	r3, [r7, #6]
 8001db8:	e002      	b.n	8001dc0 <CRC16_IN+0x5c>
      }
    else
      crc >>= 1;
 8001dba:	88fb      	ldrh	r3, [r7, #6]
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	80fb      	strh	r3, [r7, #6]
  for (i = 8; i != 0; i--)
 8001dc0:	78fb      	ldrb	r3, [r7, #3]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	70fb      	strb	r3, [r7, #3]
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d1e6      	bne.n	8001d9a <CRC16_IN+0x36>
  for (pos = 0; pos < mb_buf_in_count-2; pos++)
 8001dcc:	88bb      	ldrh	r3, [r7, #4]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	80bb      	strh	r3, [r7, #4]
 8001dd2:	88ba      	ldrh	r2, [r7, #4]
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <CRC16_IN+0xbc>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	3b02      	subs	r3, #2
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dbd3      	blt.n	8001d86 <CRC16_IN+0x22>
    }
  }
  lo = crc & 0xFF;
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	70bb      	strb	r3, [r7, #2]
  hi = ( crc >> 8 ) & 0xFF;
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	707b      	strb	r3, [r7, #1]
  if( (mb_buf_in[mb_buf_in_count-2] == lo) && 
 8001dea:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <CRC16_IN+0xbc>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	3b02      	subs	r3, #2
 8001df0:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <CRC16_IN+0xb8>)
 8001df2:	5cd3      	ldrb	r3, [r2, r3]
 8001df4:	78ba      	ldrb	r2, [r7, #2]
 8001df6:	429a      	cmp	r2, r3
 8001df8:	d109      	bne.n	8001e0e <CRC16_IN+0xaa>
       (mb_buf_in[mb_buf_in_count-1] == hi) )
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <CRC16_IN+0xbc>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	4a06      	ldr	r2, [pc, #24]	; (8001e1c <CRC16_IN+0xb8>)
 8001e02:	5cd3      	ldrb	r3, [r2, r3]
  if( (mb_buf_in[mb_buf_in_count-2] == lo) && 
 8001e04:	787a      	ldrb	r2, [r7, #1]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d101      	bne.n	8001e0e <CRC16_IN+0xaa>
    {
      return 0;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <CRC16_IN+0xac>
    }
  return 1;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	20004484 	.word	0x20004484
 8001e20:	20004480 	.word	0x20004480

08001e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_MspInit+0x54>)
 8001e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e32:	4a11      	ldr	r2, [pc, #68]	; (8001e78 <HAL_MspInit+0x54>)
 8001e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e38:	6453      	str	r3, [r2, #68]	; 0x44
 8001e3a:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <HAL_MspInit+0x54>)
 8001e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	603b      	str	r3, [r7, #0]
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_MspInit+0x54>)
 8001e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <HAL_MspInit+0x54>)
 8001e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6413      	str	r3, [r2, #64]	; 0x40
 8001e56:	4b08      	ldr	r3, [pc, #32]	; (8001e78 <HAL_MspInit+0x54>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5e:	603b      	str	r3, [r7, #0]
 8001e60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	210f      	movs	r1, #15
 8001e66:	f06f 0001 	mvn.w	r0, #1
 8001e6a:	f000 fb5d 	bl	8002528 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800

08001e7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08a      	sub	sp, #40	; 0x28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	605a      	str	r2, [r3, #4]
 8001e8e:	609a      	str	r2, [r3, #8]
 8001e90:	60da      	str	r2, [r3, #12]
 8001e92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a19      	ldr	r2, [pc, #100]	; (8001f00 <HAL_I2C_MspInit+0x84>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d12b      	bne.n	8001ef6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	613b      	str	r3, [r7, #16]
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <HAL_I2C_MspInit+0x88>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_I2C_MspInit+0x88>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <HAL_I2C_MspInit+0x88>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001eba:	23c0      	movs	r3, #192	; 0xc0
 8001ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ebe:	2312      	movs	r3, #18
 8001ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001eca:	2304      	movs	r3, #4
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ece:	f107 0314 	add.w	r3, r7, #20
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	480c      	ldr	r0, [pc, #48]	; (8001f08 <HAL_I2C_MspInit+0x8c>)
 8001ed6:	f000 ff53 	bl	8002d80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b09      	ldr	r3, [pc, #36]	; (8001f04 <HAL_I2C_MspInit+0x88>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <HAL_I2C_MspInit+0x88>)
 8001ee4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_I2C_MspInit+0x88>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ef6:	bf00      	nop
 8001ef8:	3728      	adds	r7, #40	; 0x28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40005400 	.word	0x40005400
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020400 	.word	0x40020400

08001f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08a      	sub	sp, #40	; 0x28
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0314 	add.w	r3, r7, #20
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a34      	ldr	r2, [pc, #208]	; (8001ffc <HAL_UART_MspInit+0xf0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d162      	bne.n	8001ff4 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	4b33      	ldr	r3, [pc, #204]	; (8002000 <HAL_UART_MspInit+0xf4>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4a32      	ldr	r2, [pc, #200]	; (8002000 <HAL_UART_MspInit+0xf4>)
 8001f38:	f043 0320 	orr.w	r3, r3, #32
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	4b30      	ldr	r3, [pc, #192]	; (8002000 <HAL_UART_MspInit+0xf4>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <HAL_UART_MspInit+0xf4>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a2b      	ldr	r2, [pc, #172]	; (8002000 <HAL_UART_MspInit+0xf4>)
 8001f54:	f043 0304 	orr.w	r3, r3, #4
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b29      	ldr	r3, [pc, #164]	; (8002000 <HAL_UART_MspInit+0xf4>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0304 	and.w	r3, r3, #4
 8001f62:	60fb      	str	r3, [r7, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f66:	23c0      	movs	r3, #192	; 0xc0
 8001f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001f76:	2308      	movs	r3, #8
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4820      	ldr	r0, [pc, #128]	; (8002004 <HAL_UART_MspInit+0xf8>)
 8001f82:	f000 fefd 	bl	8002d80 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001f86:	4b20      	ldr	r3, [pc, #128]	; (8002008 <HAL_UART_MspInit+0xfc>)
 8001f88:	4a20      	ldr	r2, [pc, #128]	; (800200c <HAL_UART_MspInit+0x100>)
 8001f8a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_UART_MspInit+0xfc>)
 8001f8e:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001f92:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001f94:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <HAL_UART_MspInit+0xfc>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f9a:	4b1b      	ldr	r3, [pc, #108]	; (8002008 <HAL_UART_MspInit+0xfc>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_UART_MspInit+0xfc>)
 8001fa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fa6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fa8:	4b17      	ldr	r3, [pc, #92]	; (8002008 <HAL_UART_MspInit+0xfc>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fae:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_UART_MspInit+0xfc>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001fb4:	4b14      	ldr	r3, [pc, #80]	; (8002008 <HAL_UART_MspInit+0xfc>)
 8001fb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fba:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001fbc:	4b12      	ldr	r3, [pc, #72]	; (8002008 <HAL_UART_MspInit+0xfc>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_UART_MspInit+0xfc>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001fc8:	480f      	ldr	r0, [pc, #60]	; (8002008 <HAL_UART_MspInit+0xfc>)
 8001fca:	f000 fad7 	bl	800257c <HAL_DMA_Init>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001fd4:	f7ff fbf2 	bl	80017bc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a0b      	ldr	r2, [pc, #44]	; (8002008 <HAL_UART_MspInit+0xfc>)
 8001fdc:	635a      	str	r2, [r3, #52]	; 0x34
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_UART_MspInit+0xfc>)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	2105      	movs	r1, #5
 8001fe8:	2047      	movs	r0, #71	; 0x47
 8001fea:	f000 fa9d 	bl	8002528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001fee:	2047      	movs	r0, #71	; 0x47
 8001ff0:	f000 fab6 	bl	8002560 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ff4:	bf00      	nop
 8001ff6:	3728      	adds	r7, #40	; 0x28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40011400 	.word	0x40011400
 8002000:	40023800 	.word	0x40023800
 8002004:	40020800 	.word	0x40020800
 8002008:	20004068 	.word	0x20004068
 800200c:	40026428 	.word	0x40026428

08002010 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b08c      	sub	sp, #48	; 0x30
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002018:	2300      	movs	r3, #0
 800201a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800201c:	2300      	movs	r3, #0
 800201e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8002020:	2200      	movs	r2, #0
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	201d      	movs	r0, #29
 8002026:	f000 fa7f 	bl	8002528 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 800202a:	201d      	movs	r0, #29
 800202c:	f000 fa98 	bl	8002560 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <HAL_InitTick+0xa4>)
 8002036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002038:	4a1e      	ldr	r2, [pc, #120]	; (80020b4 <HAL_InitTick+0xa4>)
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	6413      	str	r3, [r2, #64]	; 0x40
 8002040:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <HAL_InitTick+0xa4>)
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800204c:	f107 0210 	add.w	r2, r7, #16
 8002050:	f107 0314 	add.w	r3, r7, #20
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f002 fc1a 	bl	8004890 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800205c:	f002 fbf0 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8002060:	4603      	mov	r3, r0
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002068:	4a13      	ldr	r2, [pc, #76]	; (80020b8 <HAL_InitTick+0xa8>)
 800206a:	fba2 2303 	umull	r2, r3, r2, r3
 800206e:	0c9b      	lsrs	r3, r3, #18
 8002070:	3b01      	subs	r3, #1
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8002074:	4b11      	ldr	r3, [pc, #68]	; (80020bc <HAL_InitTick+0xac>)
 8002076:	4a12      	ldr	r2, [pc, #72]	; (80020c0 <HAL_InitTick+0xb0>)
 8002078:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 800207a:	4b10      	ldr	r3, [pc, #64]	; (80020bc <HAL_InitTick+0xac>)
 800207c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002080:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8002082:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <HAL_InitTick+0xac>)
 8002084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002086:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <HAL_InitTick+0xac>)
 800208a:	2200      	movs	r2, #0
 800208c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800208e:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <HAL_InitTick+0xac>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8002094:	4809      	ldr	r0, [pc, #36]	; (80020bc <HAL_InitTick+0xac>)
 8002096:	f002 fc2d 	bl	80048f4 <HAL_TIM_Base_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d104      	bne.n	80020aa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80020a0:	4806      	ldr	r0, [pc, #24]	; (80020bc <HAL_InitTick+0xac>)
 80020a2:	f002 fc5c 	bl	800495e <HAL_TIM_Base_Start_IT>
 80020a6:	4603      	mov	r3, r0
 80020a8:	e000      	b.n	80020ac <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3730      	adds	r7, #48	; 0x30
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40023800 	.word	0x40023800
 80020b8:	431bde83 	.word	0x431bde83
 80020bc:	20004584 	.word	0x20004584
 80020c0:	40000400 	.word	0x40000400

080020c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d6:	e7fe      	b.n	80020d6 <HardFault_Handler+0x4>

080020d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020dc:	e7fe      	b.n	80020dc <MemManage_Handler+0x4>

080020de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020de:	b480      	push	{r7}
 80020e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e2:	e7fe      	b.n	80020e2 <BusFault_Handler+0x4>

080020e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e8:	e7fe      	b.n	80020e8 <UsageFault_Handler+0x4>

080020ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020ea:	b480      	push	{r7}
 80020ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ee:	bf00      	nop
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80020fc:	4802      	ldr	r0, [pc, #8]	; (8002108 <TIM3_IRQHandler+0x10>)
 80020fe:	f002 fc52 	bl	80049a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20004584 	.word	0x20004584

0800210c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002110:	4802      	ldr	r0, [pc, #8]	; (800211c <DMA2_Stream1_IRQHandler+0x10>)
 8002112:	f000 fbcb 	bl	80028ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002116:	bf00      	nop
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	20004068 	.word	0x20004068

08002120 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002124:	4803      	ldr	r0, [pc, #12]	; (8002134 <USART6_IRQHandler+0x14>)
 8002126:	f002 ffe5 	bl	80050f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  USER_UART_IRQHandler(&huart6); //usart6 idle interrupt
 800212a:	4802      	ldr	r0, [pc, #8]	; (8002134 <USART6_IRQHandler+0x14>)
 800212c:	f7ff f9b4 	bl	8001498 <USER_UART_IRQHandler>
  /* USER CODE END USART6_IRQn 1 */
}
 8002130:	bf00      	nop
 8002132:	bd80      	pop	{r7, pc}
 8002134:	2000415c 	.word	0x2000415c

08002138 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b086      	sub	sp, #24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e00a      	b.n	8002160 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800214a:	f3af 8000 	nop.w
 800214e:	4601      	mov	r1, r0
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	60ba      	str	r2, [r7, #8]
 8002156:	b2ca      	uxtb	r2, r1
 8002158:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3301      	adds	r3, #1
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	dbf0      	blt.n	800214a <_read+0x12>
	}

return len;
 8002168:	687b      	ldr	r3, [r7, #4]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	60f8      	str	r0, [r7, #12]
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217e:	2300      	movs	r3, #0
 8002180:	617b      	str	r3, [r7, #20]
 8002182:	e009      	b.n	8002198 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	60ba      	str	r2, [r7, #8]
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3301      	adds	r3, #1
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	429a      	cmp	r2, r3
 800219e:	dbf1      	blt.n	8002184 <_write+0x12>
	}
	return len;
 80021a0:	687b      	ldr	r3, [r7, #4]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <_close>:

int _close(int file)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
	return -1;
 80021b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
 80021ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d2:	605a      	str	r2, [r3, #4]
	return 0;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <_isatty>:

int _isatty(int file)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
	return 1;
 80021ea:	2301      	movs	r3, #1
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
	return 0;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3714      	adds	r7, #20
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <_sbrk+0x50>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <_sbrk+0x16>
		heap_end = &end;
 8002224:	4b0f      	ldr	r3, [pc, #60]	; (8002264 <_sbrk+0x50>)
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <_sbrk+0x54>)
 8002228:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800222a:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <_sbrk+0x50>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002230:	4b0c      	ldr	r3, [pc, #48]	; (8002264 <_sbrk+0x50>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4413      	add	r3, r2
 8002238:	466a      	mov	r2, sp
 800223a:	4293      	cmp	r3, r2
 800223c:	d907      	bls.n	800224e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800223e:	f006 f88d 	bl	800835c <__errno>
 8002242:	4603      	mov	r3, r0
 8002244:	220c      	movs	r2, #12
 8002246:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8002248:	f04f 33ff 	mov.w	r3, #4294967295
 800224c:	e006      	b.n	800225c <_sbrk+0x48>
	}

	heap_end += incr;
 800224e:	4b05      	ldr	r3, [pc, #20]	; (8002264 <_sbrk+0x50>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	4a03      	ldr	r2, [pc, #12]	; (8002264 <_sbrk+0x50>)
 8002258:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800225a:	68fb      	ldr	r3, [r7, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	200002f0 	.word	0x200002f0
 8002268:	200045d8 	.word	0x200045d8

0800226c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <SystemInit+0x28>)
 8002272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002276:	4a07      	ldr	r2, [pc, #28]	; (8002294 <SystemInit+0x28>)
 8002278:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800227c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <SystemInit+0x28>)
 8002282:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002286:	609a      	str	r2, [r3, #8]
#endif
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800229c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800229e:	e003      	b.n	80022a8 <LoopCopyDataInit>

080022a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022a6:	3104      	adds	r1, #4

080022a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022a8:	480b      	ldr	r0, [pc, #44]	; (80022d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022b0:	d3f6      	bcc.n	80022a0 <CopyDataInit>
  ldr  r2, =_sbss
 80022b2:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022b4:	e002      	b.n	80022bc <LoopFillZerobss>

080022b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022b8:	f842 3b04 	str.w	r3, [r2], #4

080022bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022bc:	4b09      	ldr	r3, [pc, #36]	; (80022e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022be:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022c0:	d3f9      	bcc.n	80022b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022c2:	f7ff ffd3 	bl	800226c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022c6:	f006 f84f 	bl	8008368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022ca:	f7fe fea1 	bl	8001010 <main>
  bx  lr    
 80022ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80022d0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80022d4:	08009ea8 	.word	0x08009ea8
  ldr  r0, =_sdata
 80022d8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80022dc:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80022e0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80022e4:	200045d8 	.word	0x200045d8

080022e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022e8:	e7fe      	b.n	80022e8 <ADC_IRQHandler>
	...

080022ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022f0:	4b0e      	ldr	r3, [pc, #56]	; (800232c <HAL_Init+0x40>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a0d      	ldr	r2, [pc, #52]	; (800232c <HAL_Init+0x40>)
 80022f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <HAL_Init+0x40>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0a      	ldr	r2, [pc, #40]	; (800232c <HAL_Init+0x40>)
 8002302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002306:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a07      	ldr	r2, [pc, #28]	; (800232c <HAL_Init+0x40>)
 800230e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002314:	2003      	movs	r0, #3
 8002316:	f000 f8fc 	bl	8002512 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800231a:	2000      	movs	r0, #0
 800231c:	f7ff fe78 	bl	8002010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002320:	f7ff fd80 	bl	8001e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40023c00 	.word	0x40023c00

08002330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_IncTick+0x20>)
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	461a      	mov	r2, r3
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_IncTick+0x24>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4413      	add	r3, r2
 8002340:	4a04      	ldr	r2, [pc, #16]	; (8002354 <HAL_IncTick+0x24>)
 8002342:	6013      	str	r3, [r2, #0]
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20000008 	.word	0x20000008
 8002354:	200045c4 	.word	0x200045c4

08002358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  return uwTick;
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <HAL_GetTick+0x14>)
 800235e:	681b      	ldr	r3, [r3, #0]
}
 8002360:	4618      	mov	r0, r3
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	200045c4 	.word	0x200045c4

08002370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002378:	f7ff ffee 	bl	8002358 <HAL_GetTick>
 800237c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002388:	d005      	beq.n	8002396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <HAL_Delay+0x44>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	461a      	mov	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4413      	add	r3, r2
 8002394:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002396:	bf00      	nop
 8002398:	f7ff ffde 	bl	8002358 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d8f7      	bhi.n	8002398 <HAL_Delay+0x28>
  {
  }
}
 80023a8:	bf00      	nop
 80023aa:	bf00      	nop
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000008 	.word	0x20000008

080023b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d4:	4013      	ands	r3, r2
 80023d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023ea:	4a04      	ldr	r2, [pc, #16]	; (80023fc <__NVIC_SetPriorityGrouping+0x44>)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	60d3      	str	r3, [r2, #12]
}
 80023f0:	bf00      	nop
 80023f2:	3714      	adds	r7, #20
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000ed00 	.word	0xe000ed00

08002400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002404:	4b04      	ldr	r3, [pc, #16]	; (8002418 <__NVIC_GetPriorityGrouping+0x18>)
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	0a1b      	lsrs	r3, r3, #8
 800240a:	f003 0307 	and.w	r3, r3, #7
}
 800240e:	4618      	mov	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	2b00      	cmp	r3, #0
 800242c:	db0b      	blt.n	8002446 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	f003 021f 	and.w	r2, r3, #31
 8002434:	4907      	ldr	r1, [pc, #28]	; (8002454 <__NVIC_EnableIRQ+0x38>)
 8002436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2001      	movs	r0, #1
 800243e:	fa00 f202 	lsl.w	r2, r0, r2
 8002442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	e000e100 	.word	0xe000e100

08002458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	6039      	str	r1, [r7, #0]
 8002462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002468:	2b00      	cmp	r3, #0
 800246a:	db0a      	blt.n	8002482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	b2da      	uxtb	r2, r3
 8002470:	490c      	ldr	r1, [pc, #48]	; (80024a4 <__NVIC_SetPriority+0x4c>)
 8002472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002476:	0112      	lsls	r2, r2, #4
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	440b      	add	r3, r1
 800247c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002480:	e00a      	b.n	8002498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	b2da      	uxtb	r2, r3
 8002486:	4908      	ldr	r1, [pc, #32]	; (80024a8 <__NVIC_SetPriority+0x50>)
 8002488:	79fb      	ldrb	r3, [r7, #7]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	3b04      	subs	r3, #4
 8002490:	0112      	lsls	r2, r2, #4
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	440b      	add	r3, r1
 8002496:	761a      	strb	r2, [r3, #24]
}
 8002498:	bf00      	nop
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000e100 	.word	0xe000e100
 80024a8:	e000ed00 	.word	0xe000ed00

080024ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b089      	sub	sp, #36	; 0x24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	f1c3 0307 	rsb	r3, r3, #7
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	bf28      	it	cs
 80024ca:	2304      	movcs	r3, #4
 80024cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3304      	adds	r3, #4
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d902      	bls.n	80024dc <NVIC_EncodePriority+0x30>
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	3b03      	subs	r3, #3
 80024da:	e000      	b.n	80024de <NVIC_EncodePriority+0x32>
 80024dc:	2300      	movs	r3, #0
 80024de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e0:	f04f 32ff 	mov.w	r2, #4294967295
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	401a      	ands	r2, r3
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f4:	f04f 31ff 	mov.w	r1, #4294967295
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	fa01 f303 	lsl.w	r3, r1, r3
 80024fe:	43d9      	mvns	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	4313      	orrs	r3, r2
         );
}
 8002506:	4618      	mov	r0, r3
 8002508:	3724      	adds	r7, #36	; 0x24
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ff4c 	bl	80023b8 <__NVIC_SetPriorityGrouping>
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800253a:	f7ff ff61 	bl	8002400 <__NVIC_GetPriorityGrouping>
 800253e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	68b9      	ldr	r1, [r7, #8]
 8002544:	6978      	ldr	r0, [r7, #20]
 8002546:	f7ff ffb1 	bl	80024ac <NVIC_EncodePriority>
 800254a:	4602      	mov	r2, r0
 800254c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff ff80 	bl	8002458 <__NVIC_SetPriority>
}
 8002558:	bf00      	nop
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	4618      	mov	r0, r3
 8002570:	f7ff ff54 	bl	800241c <__NVIC_EnableIRQ>
}
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002588:	f7ff fee6 	bl	8002358 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d101      	bne.n	8002598 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e099      	b.n	80026cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2202      	movs	r2, #2
 80025a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b8:	e00f      	b.n	80025da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ba:	f7ff fecd 	bl	8002358 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b05      	cmp	r3, #5
 80025c6:	d908      	bls.n	80025da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2203      	movs	r2, #3
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e078      	b.n	80026cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1e8      	bne.n	80025ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	4b38      	ldr	r3, [pc, #224]	; (80026d4 <HAL_DMA_Init+0x158>)
 80025f4:	4013      	ands	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	685a      	ldr	r2, [r3, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002606:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4313      	orrs	r3, r2
 800262a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002630:	2b04      	cmp	r3, #4
 8002632:	d107      	bne.n	8002644 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263c:	4313      	orrs	r3, r2
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f023 0307 	bic.w	r3, r3, #7
 800265a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	4313      	orrs	r3, r2
 8002664:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	2b04      	cmp	r3, #4
 800266c:	d117      	bne.n	800269e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00e      	beq.n	800269e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	f000 fb01 	bl	8002c88 <DMA_CheckFifoParam>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d008      	beq.n	800269e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2240      	movs	r2, #64	; 0x40
 8002690:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800269a:	2301      	movs	r3, #1
 800269c:	e016      	b.n	80026cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 fab8 	bl	8002c1c <DMA_CalcBaseAndBitshift>
 80026ac:	4603      	mov	r3, r0
 80026ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b4:	223f      	movs	r2, #63	; 0x3f
 80026b6:	409a      	lsls	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3718      	adds	r7, #24
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	f010803f 	.word	0xf010803f

080026d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
 80026e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026e6:	2300      	movs	r3, #0
 80026e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d101      	bne.n	80026fe <HAL_DMA_Start_IT+0x26>
 80026fa:	2302      	movs	r3, #2
 80026fc:	e040      	b.n	8002780 <HAL_DMA_Start_IT+0xa8>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2201      	movs	r2, #1
 8002702:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d12f      	bne.n	8002772 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	2202      	movs	r2, #2
 8002716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2200      	movs	r2, #0
 800271e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	68b9      	ldr	r1, [r7, #8]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fa4a 	bl	8002bc0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002730:	223f      	movs	r2, #63	; 0x3f
 8002732:	409a      	lsls	r2, r3
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0216 	orr.w	r2, r2, #22
 8002746:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f042 0208 	orr.w	r2, r2, #8
 800275e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f042 0201 	orr.w	r2, r2, #1
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	e005      	b.n	800277e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800277a:	2302      	movs	r3, #2
 800277c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800277e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002794:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002796:	f7ff fddf 	bl	8002358 <HAL_GetTick>
 800279a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027a2:	b2db      	uxtb	r3, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d008      	beq.n	80027ba <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2280      	movs	r2, #128	; 0x80
 80027ac:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e052      	b.n	8002860 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0216 	bic.w	r2, r2, #22
 80027c8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027d8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d103      	bne.n	80027ea <HAL_DMA_Abort+0x62>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d007      	beq.n	80027fa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0208 	bic.w	r2, r2, #8
 80027f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0201 	bic.w	r2, r2, #1
 8002808:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800280a:	e013      	b.n	8002834 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800280c:	f7ff fda4 	bl	8002358 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b05      	cmp	r3, #5
 8002818:	d90c      	bls.n	8002834 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2220      	movs	r2, #32
 800281e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2203      	movs	r2, #3
 800282c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e015      	b.n	8002860 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0301 	and.w	r3, r3, #1
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1e4      	bne.n	800280c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002846:	223f      	movs	r2, #63	; 0x3f
 8002848:	409a      	lsls	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800285e:	2300      	movs	r3, #0
}
 8002860:	4618      	mov	r0, r3
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}

08002868 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d004      	beq.n	8002886 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2280      	movs	r2, #128	; 0x80
 8002880:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e00c      	b.n	80028a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2205      	movs	r2, #5
 800288a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028b8:	4b92      	ldr	r3, [pc, #584]	; (8002b04 <HAL_DMA_IRQHandler+0x258>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a92      	ldr	r2, [pc, #584]	; (8002b08 <HAL_DMA_IRQHandler+0x25c>)
 80028be:	fba2 2303 	umull	r2, r3, r2, r3
 80028c2:	0a9b      	lsrs	r3, r3, #10
 80028c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d6:	2208      	movs	r2, #8
 80028d8:	409a      	lsls	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4013      	ands	r3, r2
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d01a      	beq.n	8002918 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d013      	beq.n	8002918 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0204 	bic.w	r2, r2, #4
 80028fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002904:	2208      	movs	r2, #8
 8002906:	409a      	lsls	r2, r3
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002910:	f043 0201 	orr.w	r2, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800291c:	2201      	movs	r2, #1
 800291e:	409a      	lsls	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4013      	ands	r3, r2
 8002924:	2b00      	cmp	r3, #0
 8002926:	d012      	beq.n	800294e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	2201      	movs	r2, #1
 800293c:	409a      	lsls	r2, r3
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002946:	f043 0202 	orr.w	r2, r3, #2
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002952:	2204      	movs	r2, #4
 8002954:	409a      	lsls	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4013      	ands	r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d012      	beq.n	8002984 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00b      	beq.n	8002984 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002970:	2204      	movs	r2, #4
 8002972:	409a      	lsls	r2, r3
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297c:	f043 0204 	orr.w	r2, r3, #4
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002988:	2210      	movs	r2, #16
 800298a:	409a      	lsls	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4013      	ands	r3, r2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d043      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d03c      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	2210      	movs	r2, #16
 80029a8:	409a      	lsls	r2, r3
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d018      	beq.n	80029ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d108      	bne.n	80029dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d024      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
 80029da:	e01f      	b.n	8002a1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d01b      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	4798      	blx	r3
 80029ec:	e016      	b.n	8002a1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d107      	bne.n	8002a0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f022 0208 	bic.w	r2, r2, #8
 8002a0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a20:	2220      	movs	r2, #32
 8002a22:	409a      	lsls	r2, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4013      	ands	r3, r2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 808e 	beq.w	8002b4a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0310 	and.w	r3, r3, #16
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8086 	beq.w	8002b4a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a42:	2220      	movs	r2, #32
 8002a44:	409a      	lsls	r2, r3
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b05      	cmp	r3, #5
 8002a54:	d136      	bne.n	8002ac4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0216 	bic.w	r2, r2, #22
 8002a64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	695a      	ldr	r2, [r3, #20]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d103      	bne.n	8002a86 <HAL_DMA_IRQHandler+0x1da>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d007      	beq.n	8002a96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0208 	bic.w	r2, r2, #8
 8002a94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9a:	223f      	movs	r2, #63	; 0x3f
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d07d      	beq.n	8002bb6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	4798      	blx	r3
        }
        return;
 8002ac2:	e078      	b.n	8002bb6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d01c      	beq.n	8002b0c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d108      	bne.n	8002af2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d030      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	4798      	blx	r3
 8002af0:	e02b      	b.n	8002b4a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d027      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4798      	blx	r3
 8002b02:	e022      	b.n	8002b4a <HAL_DMA_IRQHandler+0x29e>
 8002b04:	20000000 	.word	0x20000000
 8002b08:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10f      	bne.n	8002b3a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0210 	bic.w	r2, r2, #16
 8002b28:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d032      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d022      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2205      	movs	r2, #5
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f022 0201 	bic.w	r2, r2, #1
 8002b74:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	60bb      	str	r3, [r7, #8]
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d307      	bcc.n	8002b92 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1f2      	bne.n	8002b76 <HAL_DMA_IRQHandler+0x2ca>
 8002b90:	e000      	b.n	8002b94 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002b92:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d005      	beq.n	8002bb8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4798      	blx	r3
 8002bb4:	e000      	b.n	8002bb8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002bb6:	bf00      	nop
    }
  }
}
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop

08002bc0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002bdc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	2b40      	cmp	r3, #64	; 0x40
 8002bec:	d108      	bne.n	8002c00 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68ba      	ldr	r2, [r7, #8]
 8002bfc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002bfe:	e007      	b.n	8002c10 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	60da      	str	r2, [r3, #12]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	3b10      	subs	r3, #16
 8002c2c:	4a14      	ldr	r2, [pc, #80]	; (8002c80 <DMA_CalcBaseAndBitshift+0x64>)
 8002c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c32:	091b      	lsrs	r3, r3, #4
 8002c34:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c36:	4a13      	ldr	r2, [pc, #76]	; (8002c84 <DMA_CalcBaseAndBitshift+0x68>)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	781b      	ldrb	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b03      	cmp	r3, #3
 8002c48:	d909      	bls.n	8002c5e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c52:	f023 0303 	bic.w	r3, r3, #3
 8002c56:	1d1a      	adds	r2, r3, #4
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c5c:	e007      	b.n	8002c6e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c66:	f023 0303 	bic.w	r3, r3, #3
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3714      	adds	r7, #20
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	aaaaaaab 	.word	0xaaaaaaab
 8002c84:	08009de4 	.word	0x08009de4

08002c88 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b085      	sub	sp, #20
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c90:	2300      	movs	r3, #0
 8002c92:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c98:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d11f      	bne.n	8002ce2 <DMA_CheckFifoParam+0x5a>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b03      	cmp	r3, #3
 8002ca6:	d856      	bhi.n	8002d56 <DMA_CheckFifoParam+0xce>
 8002ca8:	a201      	add	r2, pc, #4	; (adr r2, 8002cb0 <DMA_CheckFifoParam+0x28>)
 8002caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cae:	bf00      	nop
 8002cb0:	08002cc1 	.word	0x08002cc1
 8002cb4:	08002cd3 	.word	0x08002cd3
 8002cb8:	08002cc1 	.word	0x08002cc1
 8002cbc:	08002d57 	.word	0x08002d57
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d046      	beq.n	8002d5a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd0:	e043      	b.n	8002d5a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cda:	d140      	bne.n	8002d5e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce0:	e03d      	b.n	8002d5e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002cea:	d121      	bne.n	8002d30 <DMA_CheckFifoParam+0xa8>
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d837      	bhi.n	8002d62 <DMA_CheckFifoParam+0xda>
 8002cf2:	a201      	add	r2, pc, #4	; (adr r2, 8002cf8 <DMA_CheckFifoParam+0x70>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d09 	.word	0x08002d09
 8002cfc:	08002d0f 	.word	0x08002d0f
 8002d00:	08002d09 	.word	0x08002d09
 8002d04:	08002d21 	.word	0x08002d21
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d0c:	e030      	b.n	8002d70 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d025      	beq.n	8002d66 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1e:	e022      	b.n	8002d66 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d24:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d28:	d11f      	bne.n	8002d6a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d2e:	e01c      	b.n	8002d6a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d903      	bls.n	8002d3e <DMA_CheckFifoParam+0xb6>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d003      	beq.n	8002d44 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d3c:	e018      	b.n	8002d70 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
      break;
 8002d42:	e015      	b.n	8002d70 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00e      	beq.n	8002d6e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
      break;
 8002d54:	e00b      	b.n	8002d6e <DMA_CheckFifoParam+0xe6>
      break;
 8002d56:	bf00      	nop
 8002d58:	e00a      	b.n	8002d70 <DMA_CheckFifoParam+0xe8>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e008      	b.n	8002d70 <DMA_CheckFifoParam+0xe8>
      break;
 8002d5e:	bf00      	nop
 8002d60:	e006      	b.n	8002d70 <DMA_CheckFifoParam+0xe8>
      break;
 8002d62:	bf00      	nop
 8002d64:	e004      	b.n	8002d70 <DMA_CheckFifoParam+0xe8>
      break;
 8002d66:	bf00      	nop
 8002d68:	e002      	b.n	8002d70 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d6a:	bf00      	nop
 8002d6c:	e000      	b.n	8002d70 <DMA_CheckFifoParam+0xe8>
      break;
 8002d6e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3714      	adds	r7, #20
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop

08002d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b089      	sub	sp, #36	; 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	e16b      	b.n	8003074 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	697a      	ldr	r2, [r7, #20]
 8002dac:	4013      	ands	r3, r2
 8002dae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	f040 815a 	bne.w	800306e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d00b      	beq.n	8002dda <HAL_GPIO_Init+0x5a>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d007      	beq.n	8002dda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002dce:	2b11      	cmp	r3, #17
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b12      	cmp	r3, #18
 8002dd8:	d130      	bne.n	8002e3c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	2203      	movs	r2, #3
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e10:	2201      	movs	r2, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	091b      	lsrs	r3, r3, #4
 8002e26:	f003 0201 	and.w	r2, r3, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	005b      	lsls	r3, r3, #1
 8002e46:	2203      	movs	r2, #3
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	4013      	ands	r3, r2
 8002e52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0xfc>
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b12      	cmp	r3, #18
 8002e7a:	d123      	bne.n	8002ec4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	08da      	lsrs	r2, r3, #3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3208      	adds	r2, #8
 8002e84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	220f      	movs	r2, #15
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	08da      	lsrs	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	3208      	adds	r2, #8
 8002ebe:	69b9      	ldr	r1, [r7, #24]
 8002ec0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	005b      	lsls	r3, r3, #1
 8002ece:	2203      	movs	r2, #3
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0203 	and.w	r2, r3, #3
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	005b      	lsls	r3, r3, #1
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 80b4 	beq.w	800306e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f06:	2300      	movs	r3, #0
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	4b60      	ldr	r3, [pc, #384]	; (800308c <HAL_GPIO_Init+0x30c>)
 8002f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0e:	4a5f      	ldr	r2, [pc, #380]	; (800308c <HAL_GPIO_Init+0x30c>)
 8002f10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f14:	6453      	str	r3, [r2, #68]	; 0x44
 8002f16:	4b5d      	ldr	r3, [pc, #372]	; (800308c <HAL_GPIO_Init+0x30c>)
 8002f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f1e:	60fb      	str	r3, [r7, #12]
 8002f20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f22:	4a5b      	ldr	r2, [pc, #364]	; (8003090 <HAL_GPIO_Init+0x310>)
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	3302      	adds	r3, #2
 8002f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	220f      	movs	r2, #15
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4013      	ands	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a52      	ldr	r2, [pc, #328]	; (8003094 <HAL_GPIO_Init+0x314>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d02b      	beq.n	8002fa6 <HAL_GPIO_Init+0x226>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a51      	ldr	r2, [pc, #324]	; (8003098 <HAL_GPIO_Init+0x318>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d025      	beq.n	8002fa2 <HAL_GPIO_Init+0x222>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a50      	ldr	r2, [pc, #320]	; (800309c <HAL_GPIO_Init+0x31c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01f      	beq.n	8002f9e <HAL_GPIO_Init+0x21e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a4f      	ldr	r2, [pc, #316]	; (80030a0 <HAL_GPIO_Init+0x320>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d019      	beq.n	8002f9a <HAL_GPIO_Init+0x21a>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a4e      	ldr	r2, [pc, #312]	; (80030a4 <HAL_GPIO_Init+0x324>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <HAL_GPIO_Init+0x216>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4d      	ldr	r2, [pc, #308]	; (80030a8 <HAL_GPIO_Init+0x328>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00d      	beq.n	8002f92 <HAL_GPIO_Init+0x212>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a4c      	ldr	r2, [pc, #304]	; (80030ac <HAL_GPIO_Init+0x32c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <HAL_GPIO_Init+0x20e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4b      	ldr	r2, [pc, #300]	; (80030b0 <HAL_GPIO_Init+0x330>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d101      	bne.n	8002f8a <HAL_GPIO_Init+0x20a>
 8002f86:	2307      	movs	r3, #7
 8002f88:	e00e      	b.n	8002fa8 <HAL_GPIO_Init+0x228>
 8002f8a:	2308      	movs	r3, #8
 8002f8c:	e00c      	b.n	8002fa8 <HAL_GPIO_Init+0x228>
 8002f8e:	2306      	movs	r3, #6
 8002f90:	e00a      	b.n	8002fa8 <HAL_GPIO_Init+0x228>
 8002f92:	2305      	movs	r3, #5
 8002f94:	e008      	b.n	8002fa8 <HAL_GPIO_Init+0x228>
 8002f96:	2304      	movs	r3, #4
 8002f98:	e006      	b.n	8002fa8 <HAL_GPIO_Init+0x228>
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e004      	b.n	8002fa8 <HAL_GPIO_Init+0x228>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e002      	b.n	8002fa8 <HAL_GPIO_Init+0x228>
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e000      	b.n	8002fa8 <HAL_GPIO_Init+0x228>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	69fa      	ldr	r2, [r7, #28]
 8002faa:	f002 0203 	and.w	r2, r2, #3
 8002fae:	0092      	lsls	r2, r2, #2
 8002fb0:	4093      	lsls	r3, r2
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fb8:	4935      	ldr	r1, [pc, #212]	; (8003090 <HAL_GPIO_Init+0x310>)
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	089b      	lsrs	r3, r3, #2
 8002fbe:	3302      	adds	r3, #2
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fc6:	4b3b      	ldr	r3, [pc, #236]	; (80030b4 <HAL_GPIO_Init+0x334>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fea:	4a32      	ldr	r2, [pc, #200]	; (80030b4 <HAL_GPIO_Init+0x334>)
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ff0:	4b30      	ldr	r3, [pc, #192]	; (80030b4 <HAL_GPIO_Init+0x334>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	69ba      	ldr	r2, [r7, #24]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003014:	4a27      	ldr	r2, [pc, #156]	; (80030b4 <HAL_GPIO_Init+0x334>)
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800301a:	4b26      	ldr	r3, [pc, #152]	; (80030b4 <HAL_GPIO_Init+0x334>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	43db      	mvns	r3, r3
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	4013      	ands	r3, r2
 8003028:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d003      	beq.n	800303e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4313      	orrs	r3, r2
 800303c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800303e:	4a1d      	ldr	r2, [pc, #116]	; (80030b4 <HAL_GPIO_Init+0x334>)
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <HAL_GPIO_Init+0x334>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	43db      	mvns	r3, r3
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	4013      	ands	r3, r2
 8003052:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4313      	orrs	r3, r2
 8003066:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003068:	4a12      	ldr	r2, [pc, #72]	; (80030b4 <HAL_GPIO_Init+0x334>)
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	3301      	adds	r3, #1
 8003072:	61fb      	str	r3, [r7, #28]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2b0f      	cmp	r3, #15
 8003078:	f67f ae90 	bls.w	8002d9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800307c:	bf00      	nop
 800307e:	bf00      	nop
 8003080:	3724      	adds	r7, #36	; 0x24
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800
 8003090:	40013800 	.word	0x40013800
 8003094:	40020000 	.word	0x40020000
 8003098:	40020400 	.word	0x40020400
 800309c:	40020800 	.word	0x40020800
 80030a0:	40020c00 	.word	0x40020c00
 80030a4:	40021000 	.word	0x40021000
 80030a8:	40021400 	.word	0x40021400
 80030ac:	40021800 	.word	0x40021800
 80030b0:	40021c00 	.word	0x40021c00
 80030b4:	40013c00 	.word	0x40013c00

080030b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691a      	ldr	r2, [r3, #16]
 80030c8:	887b      	ldrh	r3, [r7, #2]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
 80030d4:	e001      	b.n	80030da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030d6:	2300      	movs	r3, #0
 80030d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030da:	7bfb      	ldrb	r3, [r7, #15]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e12b      	b.n	8003352 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fe feb4 	bl	8001e7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2224      	movs	r2, #36	; 0x24
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0201 	bic.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800313a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800314a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800314c:	f001 fb78 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8003150:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	4a81      	ldr	r2, [pc, #516]	; (800335c <HAL_I2C_Init+0x274>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d807      	bhi.n	800316c <HAL_I2C_Init+0x84>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4a80      	ldr	r2, [pc, #512]	; (8003360 <HAL_I2C_Init+0x278>)
 8003160:	4293      	cmp	r3, r2
 8003162:	bf94      	ite	ls
 8003164:	2301      	movls	r3, #1
 8003166:	2300      	movhi	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	e006      	b.n	800317a <HAL_I2C_Init+0x92>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a7d      	ldr	r2, [pc, #500]	; (8003364 <HAL_I2C_Init+0x27c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	bf94      	ite	ls
 8003174:	2301      	movls	r3, #1
 8003176:	2300      	movhi	r3, #0
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e0e7      	b.n	8003352 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4a78      	ldr	r2, [pc, #480]	; (8003368 <HAL_I2C_Init+0x280>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0c9b      	lsrs	r3, r3, #18
 800318c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	430a      	orrs	r2, r1
 80031a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4a6a      	ldr	r2, [pc, #424]	; (800335c <HAL_I2C_Init+0x274>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d802      	bhi.n	80031bc <HAL_I2C_Init+0xd4>
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	3301      	adds	r3, #1
 80031ba:	e009      	b.n	80031d0 <HAL_I2C_Init+0xe8>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80031c2:	fb02 f303 	mul.w	r3, r2, r3
 80031c6:	4a69      	ldr	r2, [pc, #420]	; (800336c <HAL_I2C_Init+0x284>)
 80031c8:	fba2 2303 	umull	r2, r3, r2, r3
 80031cc:	099b      	lsrs	r3, r3, #6
 80031ce:	3301      	adds	r3, #1
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	430b      	orrs	r3, r1
 80031d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80031e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	495c      	ldr	r1, [pc, #368]	; (800335c <HAL_I2C_Init+0x274>)
 80031ec:	428b      	cmp	r3, r1
 80031ee:	d819      	bhi.n	8003224 <HAL_I2C_Init+0x13c>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	1e59      	subs	r1, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80031fe:	1c59      	adds	r1, r3, #1
 8003200:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003204:	400b      	ands	r3, r1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00a      	beq.n	8003220 <HAL_I2C_Init+0x138>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	1e59      	subs	r1, r3, #1
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	fbb1 f3f3 	udiv	r3, r1, r3
 8003218:	3301      	adds	r3, #1
 800321a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321e:	e051      	b.n	80032c4 <HAL_I2C_Init+0x1dc>
 8003220:	2304      	movs	r3, #4
 8003222:	e04f      	b.n	80032c4 <HAL_I2C_Init+0x1dc>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d111      	bne.n	8003250 <HAL_I2C_Init+0x168>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1e58      	subs	r0, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	440b      	add	r3, r1
 800323a:	fbb0 f3f3 	udiv	r3, r0, r3
 800323e:	3301      	adds	r3, #1
 8003240:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf0c      	ite	eq
 8003248:	2301      	moveq	r3, #1
 800324a:	2300      	movne	r3, #0
 800324c:	b2db      	uxtb	r3, r3
 800324e:	e012      	b.n	8003276 <HAL_I2C_Init+0x18e>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1e58      	subs	r0, r3, #1
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6859      	ldr	r1, [r3, #4]
 8003258:	460b      	mov	r3, r1
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	0099      	lsls	r1, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	fbb0 f3f3 	udiv	r3, r0, r3
 8003266:	3301      	adds	r3, #1
 8003268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800326c:	2b00      	cmp	r3, #0
 800326e:	bf0c      	ite	eq
 8003270:	2301      	moveq	r3, #1
 8003272:	2300      	movne	r3, #0
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_I2C_Init+0x196>
 800327a:	2301      	movs	r3, #1
 800327c:	e022      	b.n	80032c4 <HAL_I2C_Init+0x1dc>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d10e      	bne.n	80032a4 <HAL_I2C_Init+0x1bc>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1e58      	subs	r0, r3, #1
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6859      	ldr	r1, [r3, #4]
 800328e:	460b      	mov	r3, r1
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	440b      	add	r3, r1
 8003294:	fbb0 f3f3 	udiv	r3, r0, r3
 8003298:	3301      	adds	r3, #1
 800329a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800329e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032a2:	e00f      	b.n	80032c4 <HAL_I2C_Init+0x1dc>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	1e58      	subs	r0, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6859      	ldr	r1, [r3, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	0099      	lsls	r1, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	6809      	ldr	r1, [r1, #0]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69da      	ldr	r2, [r3, #28]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80032f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6911      	ldr	r1, [r2, #16]
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	68d2      	ldr	r2, [r2, #12]
 80032fe:	4311      	orrs	r1, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6812      	ldr	r2, [r2, #0]
 8003304:	430b      	orrs	r3, r1
 8003306:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	695a      	ldr	r2, [r3, #20]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	431a      	orrs	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0201 	orr.w	r2, r2, #1
 8003332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3710      	adds	r7, #16
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	000186a0 	.word	0x000186a0
 8003360:	001e847f 	.word	0x001e847f
 8003364:	003d08ff 	.word	0x003d08ff
 8003368:	431bde83 	.word	0x431bde83
 800336c:	10624dd3 	.word	0x10624dd3

08003370 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b088      	sub	sp, #32
 8003374:	af02      	add	r7, sp, #8
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	607a      	str	r2, [r7, #4]
 800337a:	461a      	mov	r2, r3
 800337c:	460b      	mov	r3, r1
 800337e:	817b      	strh	r3, [r7, #10]
 8003380:	4613      	mov	r3, r2
 8003382:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003384:	f7fe ffe8 	bl	8002358 <HAL_GetTick>
 8003388:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b20      	cmp	r3, #32
 8003394:	f040 80e0 	bne.w	8003558 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	9300      	str	r3, [sp, #0]
 800339c:	2319      	movs	r3, #25
 800339e:	2201      	movs	r2, #1
 80033a0:	4970      	ldr	r1, [pc, #448]	; (8003564 <HAL_I2C_Master_Transmit+0x1f4>)
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f000 fc56 	bl	8003c54 <I2C_WaitOnFlagUntilTimeout>
 80033a8:	4603      	mov	r3, r0
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d001      	beq.n	80033b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80033ae:	2302      	movs	r3, #2
 80033b0:	e0d3      	b.n	800355a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d101      	bne.n	80033c0 <HAL_I2C_Master_Transmit+0x50>
 80033bc:	2302      	movs	r3, #2
 80033be:	e0cc      	b.n	800355a <HAL_I2C_Master_Transmit+0x1ea>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d007      	beq.n	80033e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0201 	orr.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2221      	movs	r2, #33	; 0x21
 80033fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2210      	movs	r2, #16
 8003402:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	893a      	ldrh	r2, [r7, #8]
 8003416:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	4a50      	ldr	r2, [pc, #320]	; (8003568 <HAL_I2C_Master_Transmit+0x1f8>)
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003428:	8979      	ldrh	r1, [r7, #10]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	6a3a      	ldr	r2, [r7, #32]
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f000 fac2 	bl	80039b8 <I2C_MasterRequestWrite>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e08d      	b.n	800355a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343e:	2300      	movs	r3, #0
 8003440:	613b      	str	r3, [r7, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	613b      	str	r3, [r7, #16]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	613b      	str	r3, [r7, #16]
 8003452:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003454:	e066      	b.n	8003524 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	6a39      	ldr	r1, [r7, #32]
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 fcd0 	bl	8003e00 <I2C_WaitOnTXEFlagUntilTimeout>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00d      	beq.n	8003482 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346a:	2b04      	cmp	r3, #4
 800346c:	d107      	bne.n	800347e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800347c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e06b      	b.n	800355a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003486:	781a      	ldrb	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	695b      	ldr	r3, [r3, #20]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b04      	cmp	r3, #4
 80034be:	d11b      	bne.n	80034f8 <HAL_I2C_Master_Transmit+0x188>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d017      	beq.n	80034f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	781a      	ldrb	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	6a39      	ldr	r1, [r7, #32]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fcc0 	bl	8003e82 <I2C_WaitOnBTFFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00d      	beq.n	8003524 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	2b04      	cmp	r3, #4
 800350e:	d107      	bne.n	8003520 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e01a      	b.n	800355a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003528:	2b00      	cmp	r3, #0
 800352a:	d194      	bne.n	8003456 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2220      	movs	r2, #32
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003554:	2300      	movs	r3, #0
 8003556:	e000      	b.n	800355a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003558:	2302      	movs	r3, #2
  }
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	00100002 	.word	0x00100002
 8003568:	ffff0000 	.word	0xffff0000

0800356c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b08c      	sub	sp, #48	; 0x30
 8003570:	af02      	add	r7, sp, #8
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	461a      	mov	r2, r3
 8003578:	460b      	mov	r3, r1
 800357a:	817b      	strh	r3, [r7, #10]
 800357c:	4613      	mov	r3, r2
 800357e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003580:	f7fe feea 	bl	8002358 <HAL_GetTick>
 8003584:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b20      	cmp	r3, #32
 8003590:	f040 820b 	bne.w	80039aa <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	2319      	movs	r3, #25
 800359a:	2201      	movs	r2, #1
 800359c:	497c      	ldr	r1, [pc, #496]	; (8003790 <HAL_I2C_Master_Receive+0x224>)
 800359e:	68f8      	ldr	r0, [r7, #12]
 80035a0:	f000 fb58 	bl	8003c54 <I2C_WaitOnFlagUntilTimeout>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80035aa:	2302      	movs	r3, #2
 80035ac:	e1fe      	b.n	80039ac <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_I2C_Master_Receive+0x50>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e1f7      	b.n	80039ac <HAL_I2C_Master_Receive+0x440>
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0301 	and.w	r3, r3, #1
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d007      	beq.n	80035e2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f042 0201 	orr.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2222      	movs	r2, #34	; 0x22
 80035f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2210      	movs	r2, #16
 80035fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	893a      	ldrh	r2, [r7, #8]
 8003612:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003618:	b29a      	uxth	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4a5c      	ldr	r2, [pc, #368]	; (8003794 <HAL_I2C_Master_Receive+0x228>)
 8003622:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003624:	8979      	ldrh	r1, [r7, #10]
 8003626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003628:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800362a:	68f8      	ldr	r0, [r7, #12]
 800362c:	f000 fa46 	bl	8003abc <I2C_MasterRequestRead>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e1b8      	b.n	80039ac <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363e:	2b00      	cmp	r3, #0
 8003640:	d113      	bne.n	800366a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003642:	2300      	movs	r3, #0
 8003644:	623b      	str	r3, [r7, #32]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	623b      	str	r3, [r7, #32]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	623b      	str	r3, [r7, #32]
 8003656:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e18c      	b.n	8003984 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800366e:	2b01      	cmp	r3, #1
 8003670:	d11b      	bne.n	80036aa <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003680:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003682:	2300      	movs	r3, #0
 8003684:	61fb      	str	r3, [r7, #28]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	61fb      	str	r3, [r7, #28]
 8003696:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	e16c      	b.n	8003984 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d11b      	bne.n	80036ea <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d2:	2300      	movs	r3, #0
 80036d4:	61bb      	str	r3, [r7, #24]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	61bb      	str	r3, [r7, #24]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	61bb      	str	r3, [r7, #24]
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	e14c      	b.n	8003984 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80036f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	617b      	str	r3, [r7, #20]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003710:	e138      	b.n	8003984 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003716:	2b03      	cmp	r3, #3
 8003718:	f200 80f1 	bhi.w	80038fe <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003720:	2b01      	cmp	r3, #1
 8003722:	d123      	bne.n	800376c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003726:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003728:	68f8      	ldr	r0, [r7, #12]
 800372a:	f000 fbeb 	bl	8003f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e139      	b.n	80039ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	855a      	strh	r2, [r3, #42]	; 0x2a
 800376a:	e10b      	b.n	8003984 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003770:	2b02      	cmp	r3, #2
 8003772:	d14e      	bne.n	8003812 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	2200      	movs	r2, #0
 800377c:	4906      	ldr	r1, [pc, #24]	; (8003798 <HAL_I2C_Master_Receive+0x22c>)
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 fa68 	bl	8003c54 <I2C_WaitOnFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e10e      	b.n	80039ac <HAL_I2C_Master_Receive+0x440>
 800378e:	bf00      	nop
 8003790:	00100002 	.word	0x00100002
 8003794:	ffff0000 	.word	0xffff0000
 8003798:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	1c5a      	adds	r2, r3, #1
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fa:	3b01      	subs	r3, #1
 80037fc:	b29a      	uxth	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003810:	e0b8      	b.n	8003984 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	2200      	movs	r2, #0
 800381a:	4966      	ldr	r1, [pc, #408]	; (80039b4 <HAL_I2C_Master_Receive+0x448>)
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fa19 	bl	8003c54 <I2C_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e0bf      	b.n	80039ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800383a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003864:	b29b      	uxth	r3, r3
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800386e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003874:	2200      	movs	r2, #0
 8003876:	494f      	ldr	r1, [pc, #316]	; (80039b4 <HAL_I2C_Master_Receive+0x448>)
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 f9eb 	bl	8003c54 <I2C_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e091      	b.n	80039ac <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003896:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	691a      	ldr	r2, [r3, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038fc:	e042      	b.n	8003984 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003900:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fafe 	bl	8003f04 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e04c      	b.n	80039ac <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	691a      	ldr	r2, [r3, #16]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	b2d2      	uxtb	r2, r2
 800391e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800393a:	b29b      	uxth	r3, r3
 800393c:	3b01      	subs	r3, #1
 800393e:	b29a      	uxth	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b04      	cmp	r3, #4
 8003950:	d118      	bne.n	8003984 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395c:	b2d2      	uxtb	r2, r2
 800395e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800396e:	3b01      	subs	r3, #1
 8003970:	b29a      	uxth	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003988:	2b00      	cmp	r3, #0
 800398a:	f47f aec2 	bne.w	8003712 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e000      	b.n	80039ac <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80039aa:	2302      	movs	r3, #2
  }
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3728      	adds	r7, #40	; 0x28
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	00010004 	.word	0x00010004

080039b8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b088      	sub	sp, #32
 80039bc:	af02      	add	r7, sp, #8
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	607a      	str	r2, [r7, #4]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	460b      	mov	r3, r1
 80039c6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d006      	beq.n	80039e2 <I2C_MasterRequestWrite+0x2a>
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d003      	beq.n	80039e2 <I2C_MasterRequestWrite+0x2a>
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80039e0:	d108      	bne.n	80039f4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	e00b      	b.n	8003a0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f8:	2b12      	cmp	r3, #18
 80039fa:	d107      	bne.n	8003a0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	9300      	str	r3, [sp, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f91b 	bl	8003c54 <I2C_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00c      	beq.n	8003a3e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e035      	b.n	8003aaa <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a46:	d108      	bne.n	8003a5a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a48:	897b      	ldrh	r3, [r7, #10]
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a56:	611a      	str	r2, [r3, #16]
 8003a58:	e01b      	b.n	8003a92 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a5a:	897b      	ldrh	r3, [r7, #10]
 8003a5c:	11db      	asrs	r3, r3, #7
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	f003 0306 	and.w	r3, r3, #6
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	f063 030f 	orn	r3, r3, #15
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	490f      	ldr	r1, [pc, #60]	; (8003ab4 <I2C_MasterRequestWrite+0xfc>)
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f000 f942 	bl	8003d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e010      	b.n	8003aaa <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a88:	897b      	ldrh	r3, [r7, #10]
 8003a8a:	b2da      	uxtb	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	4908      	ldr	r1, [pc, #32]	; (8003ab8 <I2C_MasterRequestWrite+0x100>)
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f932 	bl	8003d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d001      	beq.n	8003aa8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e000      	b.n	8003aaa <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3718      	adds	r7, #24
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	00010008 	.word	0x00010008
 8003ab8:	00010002 	.word	0x00010002

08003abc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	603b      	str	r3, [r7, #0]
 8003ac8:	460b      	mov	r3, r1
 8003aca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ae0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	2b08      	cmp	r3, #8
 8003ae6:	d006      	beq.n	8003af6 <I2C_MasterRequestRead+0x3a>
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d003      	beq.n	8003af6 <I2C_MasterRequestRead+0x3a>
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003af4:	d108      	bne.n	8003b08 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	e00b      	b.n	8003b20 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	2b11      	cmp	r3, #17
 8003b0e:	d107      	bne.n	8003b20 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 f891 	bl	8003c54 <I2C_WaitOnFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00c      	beq.n	8003b52 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d003      	beq.n	8003b4e <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b4c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e078      	b.n	8003c44 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b5a:	d108      	bne.n	8003b6e <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003b5c:	897b      	ldrh	r3, [r7, #10]
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	611a      	str	r2, [r3, #16]
 8003b6c:	e05e      	b.n	8003c2c <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003b6e:	897b      	ldrh	r3, [r7, #10]
 8003b70:	11db      	asrs	r3, r3, #7
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f003 0306 	and.w	r3, r3, #6
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	f063 030f 	orn	r3, r3, #15
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	4930      	ldr	r1, [pc, #192]	; (8003c4c <I2C_MasterRequestRead+0x190>)
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f8b8 	bl	8003d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e053      	b.n	8003c44 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b9c:	897b      	ldrh	r3, [r7, #10]
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	4929      	ldr	r1, [pc, #164]	; (8003c50 <I2C_MasterRequestRead+0x194>)
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f8a8 	bl	8003d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d001      	beq.n	8003bbc <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e043      	b.n	8003c44 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	613b      	str	r3, [r7, #16]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	695b      	ldr	r3, [r3, #20]
 8003bc6:	613b      	str	r3, [r7, #16]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003be0:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f830 	bl	8003c54 <I2C_WaitOnFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00c      	beq.n	8003c14 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d003      	beq.n	8003c10 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c0e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e017      	b.n	8003c44 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003c14:	897b      	ldrh	r3, [r7, #10]
 8003c16:	11db      	asrs	r3, r3, #7
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	f003 0306 	and.w	r3, r3, #6
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	f063 030e 	orn	r3, r3, #14
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	4907      	ldr	r1, [pc, #28]	; (8003c50 <I2C_MasterRequestRead+0x194>)
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f000 f865 	bl	8003d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d001      	beq.n	8003c42 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e000      	b.n	8003c44 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3718      	adds	r7, #24
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	00010008 	.word	0x00010008
 8003c50:	00010002 	.word	0x00010002

08003c54 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	60f8      	str	r0, [r7, #12]
 8003c5c:	60b9      	str	r1, [r7, #8]
 8003c5e:	603b      	str	r3, [r7, #0]
 8003c60:	4613      	mov	r3, r2
 8003c62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c64:	e025      	b.n	8003cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6c:	d021      	beq.n	8003cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6e:	f7fe fb73 	bl	8002358 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d302      	bcc.n	8003c84 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d116      	bne.n	8003cb2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2220      	movs	r2, #32
 8003c8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9e:	f043 0220 	orr.w	r2, r3, #32
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e023      	b.n	8003cfa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d10d      	bne.n	8003cd8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	695b      	ldr	r3, [r3, #20]
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	bf0c      	ite	eq
 8003cce:	2301      	moveq	r3, #1
 8003cd0:	2300      	movne	r3, #0
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	e00c      	b.n	8003cf2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bf0c      	ite	eq
 8003cea:	2301      	moveq	r3, #1
 8003cec:	2300      	movne	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	79fb      	ldrb	r3, [r7, #7]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d0b6      	beq.n	8003c66 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	60f8      	str	r0, [r7, #12]
 8003d0a:	60b9      	str	r1, [r7, #8]
 8003d0c:	607a      	str	r2, [r7, #4]
 8003d0e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d10:	e051      	b.n	8003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d20:	d123      	bne.n	8003d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d30:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d3a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d56:	f043 0204 	orr.w	r2, r3, #4
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e046      	b.n	8003df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d70:	d021      	beq.n	8003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d72:	f7fe faf1 	bl	8002358 <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d302      	bcc.n	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d116      	bne.n	8003db6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2220      	movs	r2, #32
 8003d92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da2:	f043 0220 	orr.w	r2, r3, #32
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e020      	b.n	8003df8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	0c1b      	lsrs	r3, r3, #16
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d10c      	bne.n	8003dda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	43da      	mvns	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4013      	ands	r3, r2
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	bf14      	ite	ne
 8003dd2:	2301      	movne	r3, #1
 8003dd4:	2300      	moveq	r3, #0
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	e00b      	b.n	8003df2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	43da      	mvns	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	4013      	ands	r3, r2
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d18d      	bne.n	8003d12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003df6:	2300      	movs	r3, #0
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	60f8      	str	r0, [r7, #12]
 8003e08:	60b9      	str	r1, [r7, #8]
 8003e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e0c:	e02d      	b.n	8003e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	f000 f8ce 	bl	8003fb0 <I2C_IsAcknowledgeFailed>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e02d      	b.n	8003e7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e24:	d021      	beq.n	8003e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e26:	f7fe fa97 	bl	8002358 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d116      	bne.n	8003e6a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2220      	movs	r2, #32
 8003e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f043 0220 	orr.w	r2, r3, #32
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e66:	2301      	movs	r3, #1
 8003e68:	e007      	b.n	8003e7a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	d1ca      	bne.n	8003e0e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e8e:	e02d      	b.n	8003eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f88d 	bl	8003fb0 <I2C_IsAcknowledgeFailed>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e02d      	b.n	8003efc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea6:	d021      	beq.n	8003eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea8:	f7fe fa56 	bl	8002358 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d302      	bcc.n	8003ebe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d116      	bne.n	8003eec <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f043 0220 	orr.w	r2, r3, #32
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e007      	b.n	8003efc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	695b      	ldr	r3, [r3, #20]
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b04      	cmp	r3, #4
 8003ef8:	d1ca      	bne.n	8003e90 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3710      	adds	r7, #16
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}

08003f04 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f10:	e042      	b.n	8003f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	695b      	ldr	r3, [r3, #20]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b10      	cmp	r3, #16
 8003f1e:	d119      	bne.n	8003f54 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0210 	mvn.w	r2, #16
 8003f28:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2220      	movs	r2, #32
 8003f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e029      	b.n	8003fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f54:	f7fe fa00 	bl	8002358 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	68ba      	ldr	r2, [r7, #8]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d302      	bcc.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d116      	bne.n	8003f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f84:	f043 0220 	orr.w	r2, r3, #32
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e007      	b.n	8003fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	695b      	ldr	r3, [r3, #20]
 8003f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa2:	2b40      	cmp	r3, #64	; 0x40
 8003fa4:	d1b5      	bne.n	8003f12 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fc6:	d11b      	bne.n	8004000 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	f043 0204 	orr.w	r2, r3, #4
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
	...

08004010 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b086      	sub	sp, #24
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e25b      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d075      	beq.n	800411a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800402e:	4ba3      	ldr	r3, [pc, #652]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 030c 	and.w	r3, r3, #12
 8004036:	2b04      	cmp	r3, #4
 8004038:	d00c      	beq.n	8004054 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800403a:	4ba0      	ldr	r3, [pc, #640]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004042:	2b08      	cmp	r3, #8
 8004044:	d112      	bne.n	800406c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004046:	4b9d      	ldr	r3, [pc, #628]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004052:	d10b      	bne.n	800406c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004054:	4b99      	ldr	r3, [pc, #612]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d05b      	beq.n	8004118 <HAL_RCC_OscConfig+0x108>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d157      	bne.n	8004118 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e236      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004074:	d106      	bne.n	8004084 <HAL_RCC_OscConfig+0x74>
 8004076:	4b91      	ldr	r3, [pc, #580]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a90      	ldr	r2, [pc, #576]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 800407c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e01d      	b.n	80040c0 <HAL_RCC_OscConfig+0xb0>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800408c:	d10c      	bne.n	80040a8 <HAL_RCC_OscConfig+0x98>
 800408e:	4b8b      	ldr	r3, [pc, #556]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a8a      	ldr	r2, [pc, #552]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004094:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	4b88      	ldr	r3, [pc, #544]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a87      	ldr	r2, [pc, #540]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e00b      	b.n	80040c0 <HAL_RCC_OscConfig+0xb0>
 80040a8:	4b84      	ldr	r3, [pc, #528]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a83      	ldr	r2, [pc, #524]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80040ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b2:	6013      	str	r3, [r2, #0]
 80040b4:	4b81      	ldr	r3, [pc, #516]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a80      	ldr	r2, [pc, #512]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d013      	beq.n	80040f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040c8:	f7fe f946 	bl	8002358 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d0:	f7fe f942 	bl	8002358 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b64      	cmp	r3, #100	; 0x64
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e1fb      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e2:	4b76      	ldr	r3, [pc, #472]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0xc0>
 80040ee:	e014      	b.n	800411a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f0:	f7fe f932 	bl	8002358 <HAL_GetTick>
 80040f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f6:	e008      	b.n	800410a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040f8:	f7fe f92e 	bl	8002358 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b64      	cmp	r3, #100	; 0x64
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e1e7      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800410a:	4b6c      	ldr	r3, [pc, #432]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1f0      	bne.n	80040f8 <HAL_RCC_OscConfig+0xe8>
 8004116:	e000      	b.n	800411a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004118:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d063      	beq.n	80041ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004126:	4b65      	ldr	r3, [pc, #404]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 030c 	and.w	r3, r3, #12
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00b      	beq.n	800414a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004132:	4b62      	ldr	r3, [pc, #392]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800413a:	2b08      	cmp	r3, #8
 800413c:	d11c      	bne.n	8004178 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800413e:	4b5f      	ldr	r3, [pc, #380]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d116      	bne.n	8004178 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414a:	4b5c      	ldr	r3, [pc, #368]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0302 	and.w	r3, r3, #2
 8004152:	2b00      	cmp	r3, #0
 8004154:	d005      	beq.n	8004162 <HAL_RCC_OscConfig+0x152>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68db      	ldr	r3, [r3, #12]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d001      	beq.n	8004162 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e1bb      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004162:	4b56      	ldr	r3, [pc, #344]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4952      	ldr	r1, [pc, #328]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004172:	4313      	orrs	r3, r2
 8004174:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004176:	e03a      	b.n	80041ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d020      	beq.n	80041c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004180:	4b4f      	ldr	r3, [pc, #316]	; (80042c0 <HAL_RCC_OscConfig+0x2b0>)
 8004182:	2201      	movs	r2, #1
 8004184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004186:	f7fe f8e7 	bl	8002358 <HAL_GetTick>
 800418a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418c:	e008      	b.n	80041a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800418e:	f7fe f8e3 	bl	8002358 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d901      	bls.n	80041a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e19c      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a0:	4b46      	ldr	r3, [pc, #280]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0f0      	beq.n	800418e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041ac:	4b43      	ldr	r3, [pc, #268]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	4940      	ldr	r1, [pc, #256]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	600b      	str	r3, [r1, #0]
 80041c0:	e015      	b.n	80041ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c2:	4b3f      	ldr	r3, [pc, #252]	; (80042c0 <HAL_RCC_OscConfig+0x2b0>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c8:	f7fe f8c6 	bl	8002358 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041d0:	f7fe f8c2 	bl	8002358 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e17b      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e2:	4b36      	ldr	r3, [pc, #216]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f0      	bne.n	80041d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d030      	beq.n	800425c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d016      	beq.n	8004230 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004202:	4b30      	ldr	r3, [pc, #192]	; (80042c4 <HAL_RCC_OscConfig+0x2b4>)
 8004204:	2201      	movs	r2, #1
 8004206:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004208:	f7fe f8a6 	bl	8002358 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004210:	f7fe f8a2 	bl	8002358 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e15b      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004222:	4b26      	ldr	r3, [pc, #152]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d0f0      	beq.n	8004210 <HAL_RCC_OscConfig+0x200>
 800422e:	e015      	b.n	800425c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004230:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_RCC_OscConfig+0x2b4>)
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004236:	f7fe f88f 	bl	8002358 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800423e:	f7fe f88b 	bl	8002358 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e144      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004250:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004254:	f003 0302 	and.w	r3, r3, #2
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f0      	bne.n	800423e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	f000 80a0 	beq.w	80043aa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800426a:	2300      	movs	r3, #0
 800426c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426e:	4b13      	ldr	r3, [pc, #76]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10f      	bne.n	800429a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	2300      	movs	r3, #0
 800427c:	60bb      	str	r3, [r7, #8]
 800427e:	4b0f      	ldr	r3, [pc, #60]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	4a0e      	ldr	r2, [pc, #56]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 8004284:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004288:	6413      	str	r3, [r2, #64]	; 0x40
 800428a:	4b0c      	ldr	r3, [pc, #48]	; (80042bc <HAL_RCC_OscConfig+0x2ac>)
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004292:	60bb      	str	r3, [r7, #8]
 8004294:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004296:	2301      	movs	r3, #1
 8004298:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800429a:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <HAL_RCC_OscConfig+0x2b8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d121      	bne.n	80042ea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042a6:	4b08      	ldr	r3, [pc, #32]	; (80042c8 <HAL_RCC_OscConfig+0x2b8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a07      	ldr	r2, [pc, #28]	; (80042c8 <HAL_RCC_OscConfig+0x2b8>)
 80042ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042b2:	f7fe f851 	bl	8002358 <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b8:	e011      	b.n	80042de <HAL_RCC_OscConfig+0x2ce>
 80042ba:	bf00      	nop
 80042bc:	40023800 	.word	0x40023800
 80042c0:	42470000 	.word	0x42470000
 80042c4:	42470e80 	.word	0x42470e80
 80042c8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042cc:	f7fe f844 	bl	8002358 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d901      	bls.n	80042de <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e0fd      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042de:	4b81      	ldr	r3, [pc, #516]	; (80044e4 <HAL_RCC_OscConfig+0x4d4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d0f0      	beq.n	80042cc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d106      	bne.n	8004300 <HAL_RCC_OscConfig+0x2f0>
 80042f2:	4b7d      	ldr	r3, [pc, #500]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	4a7c      	ldr	r2, [pc, #496]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	6713      	str	r3, [r2, #112]	; 0x70
 80042fe:	e01c      	b.n	800433a <HAL_RCC_OscConfig+0x32a>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	2b05      	cmp	r3, #5
 8004306:	d10c      	bne.n	8004322 <HAL_RCC_OscConfig+0x312>
 8004308:	4b77      	ldr	r3, [pc, #476]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 800430a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430c:	4a76      	ldr	r2, [pc, #472]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 800430e:	f043 0304 	orr.w	r3, r3, #4
 8004312:	6713      	str	r3, [r2, #112]	; 0x70
 8004314:	4b74      	ldr	r3, [pc, #464]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	4a73      	ldr	r2, [pc, #460]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 800431a:	f043 0301 	orr.w	r3, r3, #1
 800431e:	6713      	str	r3, [r2, #112]	; 0x70
 8004320:	e00b      	b.n	800433a <HAL_RCC_OscConfig+0x32a>
 8004322:	4b71      	ldr	r3, [pc, #452]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 8004324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004326:	4a70      	ldr	r2, [pc, #448]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 8004328:	f023 0301 	bic.w	r3, r3, #1
 800432c:	6713      	str	r3, [r2, #112]	; 0x70
 800432e:	4b6e      	ldr	r3, [pc, #440]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	4a6d      	ldr	r2, [pc, #436]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 8004334:	f023 0304 	bic.w	r3, r3, #4
 8004338:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d015      	beq.n	800436e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004342:	f7fe f809 	bl	8002358 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004348:	e00a      	b.n	8004360 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800434a:	f7fe f805 	bl	8002358 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	f241 3288 	movw	r2, #5000	; 0x1388
 8004358:	4293      	cmp	r3, r2
 800435a:	d901      	bls.n	8004360 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e0bc      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004360:	4b61      	ldr	r3, [pc, #388]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 8004362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d0ee      	beq.n	800434a <HAL_RCC_OscConfig+0x33a>
 800436c:	e014      	b.n	8004398 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436e:	f7fd fff3 	bl	8002358 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004374:	e00a      	b.n	800438c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004376:	f7fd ffef 	bl	8002358 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	f241 3288 	movw	r2, #5000	; 0x1388
 8004384:	4293      	cmp	r3, r2
 8004386:	d901      	bls.n	800438c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e0a6      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438c:	4b56      	ldr	r3, [pc, #344]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1ee      	bne.n	8004376 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d105      	bne.n	80043aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439e:	4b52      	ldr	r3, [pc, #328]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	4a51      	ldr	r2, [pc, #324]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 80043a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 8092 	beq.w	80044d8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043b4:	4b4c      	ldr	r3, [pc, #304]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 030c 	and.w	r3, r3, #12
 80043bc:	2b08      	cmp	r3, #8
 80043be:	d05c      	beq.n	800447a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d141      	bne.n	800444c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c8:	4b48      	ldr	r3, [pc, #288]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ce:	f7fd ffc3 	bl	8002358 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d4:	e008      	b.n	80043e8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d6:	f7fd ffbf 	bl	8002358 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e078      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e8:	4b3f      	ldr	r3, [pc, #252]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1f0      	bne.n	80043d6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69da      	ldr	r2, [r3, #28]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6a1b      	ldr	r3, [r3, #32]
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	019b      	lsls	r3, r3, #6
 8004404:	431a      	orrs	r2, r3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	085b      	lsrs	r3, r3, #1
 800440c:	3b01      	subs	r3, #1
 800440e:	041b      	lsls	r3, r3, #16
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004416:	061b      	lsls	r3, r3, #24
 8004418:	4933      	ldr	r1, [pc, #204]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 800441a:	4313      	orrs	r3, r2
 800441c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800441e:	4b33      	ldr	r3, [pc, #204]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 8004420:	2201      	movs	r2, #1
 8004422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004424:	f7fd ff98 	bl	8002358 <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442c:	f7fd ff94 	bl	8002358 <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e04d      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443e:	4b2a      	ldr	r3, [pc, #168]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0x41c>
 800444a:	e045      	b.n	80044d8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444c:	4b27      	ldr	r3, [pc, #156]	; (80044ec <HAL_RCC_OscConfig+0x4dc>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004452:	f7fd ff81 	bl	8002358 <HAL_GetTick>
 8004456:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800445a:	f7fd ff7d 	bl	8002358 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e036      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446c:	4b1e      	ldr	r3, [pc, #120]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f0      	bne.n	800445a <HAL_RCC_OscConfig+0x44a>
 8004478:	e02e      	b.n	80044d8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d101      	bne.n	8004486 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e029      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004486:	4b18      	ldr	r3, [pc, #96]	; (80044e8 <HAL_RCC_OscConfig+0x4d8>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	429a      	cmp	r2, r3
 8004498:	d11c      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d115      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044ae:	4013      	ands	r3, r2
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d10d      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d106      	bne.n	80044d4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d001      	beq.n	80044d8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e000      	b.n	80044da <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop
 80044e4:	40007000 	.word	0x40007000
 80044e8:	40023800 	.word	0x40023800
 80044ec:	42470060 	.word	0x42470060

080044f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b084      	sub	sp, #16
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e0cc      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004504:	4b68      	ldr	r3, [pc, #416]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 030f 	and.w	r3, r3, #15
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	429a      	cmp	r2, r3
 8004510:	d90c      	bls.n	800452c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004512:	4b65      	ldr	r3, [pc, #404]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	b2d2      	uxtb	r2, r2
 8004518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800451a:	4b63      	ldr	r3, [pc, #396]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 030f 	and.w	r3, r3, #15
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	429a      	cmp	r2, r3
 8004526:	d001      	beq.n	800452c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e0b8      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0302 	and.w	r3, r3, #2
 8004534:	2b00      	cmp	r3, #0
 8004536:	d020      	beq.n	800457a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b00      	cmp	r3, #0
 8004542:	d005      	beq.n	8004550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004544:	4b59      	ldr	r3, [pc, #356]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	4a58      	ldr	r2, [pc, #352]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800454e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800455c:	4b53      	ldr	r3, [pc, #332]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4a52      	ldr	r2, [pc, #328]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004568:	4b50      	ldr	r3, [pc, #320]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	494d      	ldr	r1, [pc, #308]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d044      	beq.n	8004610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d107      	bne.n	800459e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458e:	4b47      	ldr	r3, [pc, #284]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d119      	bne.n	80045ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e07f      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d003      	beq.n	80045ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ae:	4b3f      	ldr	r3, [pc, #252]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e06f      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045be:	4b3b      	ldr	r3, [pc, #236]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e067      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ce:	4b37      	ldr	r3, [pc, #220]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f023 0203 	bic.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4934      	ldr	r1, [pc, #208]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045e0:	f7fd feba 	bl	8002358 <HAL_GetTick>
 80045e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e8:	f7fd feb6 	bl	8002358 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e04f      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	4b2b      	ldr	r3, [pc, #172]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 020c 	and.w	r2, r3, #12
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	429a      	cmp	r2, r3
 800460e:	d1eb      	bne.n	80045e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004610:	4b25      	ldr	r3, [pc, #148]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 030f 	and.w	r3, r3, #15
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	429a      	cmp	r2, r3
 800461c:	d20c      	bcs.n	8004638 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800461e:	4b22      	ldr	r3, [pc, #136]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004620:	683a      	ldr	r2, [r7, #0]
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004626:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	683a      	ldr	r2, [r7, #0]
 8004630:	429a      	cmp	r2, r3
 8004632:	d001      	beq.n	8004638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e032      	b.n	800469e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d008      	beq.n	8004656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004644:	4b19      	ldr	r3, [pc, #100]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	4916      	ldr	r1, [pc, #88]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0308 	and.w	r3, r3, #8
 800465e:	2b00      	cmp	r3, #0
 8004660:	d009      	beq.n	8004676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004662:	4b12      	ldr	r3, [pc, #72]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	490e      	ldr	r1, [pc, #56]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	4313      	orrs	r3, r2
 8004674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004676:	f000 f821 	bl	80046bc <HAL_RCC_GetSysClockFreq>
 800467a:	4602      	mov	r2, r0
 800467c:	4b0b      	ldr	r3, [pc, #44]	; (80046ac <HAL_RCC_ClockConfig+0x1bc>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 030f 	and.w	r3, r3, #15
 8004686:	490a      	ldr	r1, [pc, #40]	; (80046b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004688:	5ccb      	ldrb	r3, [r1, r3]
 800468a:	fa22 f303 	lsr.w	r3, r2, r3
 800468e:	4a09      	ldr	r2, [pc, #36]	; (80046b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004692:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4618      	mov	r0, r3
 8004698:	f7fd fcba 	bl	8002010 <HAL_InitTick>

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	40023c00 	.word	0x40023c00
 80046ac:	40023800 	.word	0x40023800
 80046b0:	08009dcc 	.word	0x08009dcc
 80046b4:	20000000 	.word	0x20000000
 80046b8:	20000004 	.word	0x20000004

080046bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046bc:	b5b0      	push	{r4, r5, r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046c2:	2100      	movs	r1, #0
 80046c4:	6079      	str	r1, [r7, #4]
 80046c6:	2100      	movs	r1, #0
 80046c8:	60f9      	str	r1, [r7, #12]
 80046ca:	2100      	movs	r1, #0
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046ce:	2100      	movs	r1, #0
 80046d0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046d2:	4952      	ldr	r1, [pc, #328]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 80046d4:	6889      	ldr	r1, [r1, #8]
 80046d6:	f001 010c 	and.w	r1, r1, #12
 80046da:	2908      	cmp	r1, #8
 80046dc:	d00d      	beq.n	80046fa <HAL_RCC_GetSysClockFreq+0x3e>
 80046de:	2908      	cmp	r1, #8
 80046e0:	f200 8094 	bhi.w	800480c <HAL_RCC_GetSysClockFreq+0x150>
 80046e4:	2900      	cmp	r1, #0
 80046e6:	d002      	beq.n	80046ee <HAL_RCC_GetSysClockFreq+0x32>
 80046e8:	2904      	cmp	r1, #4
 80046ea:	d003      	beq.n	80046f4 <HAL_RCC_GetSysClockFreq+0x38>
 80046ec:	e08e      	b.n	800480c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046ee:	4b4c      	ldr	r3, [pc, #304]	; (8004820 <HAL_RCC_GetSysClockFreq+0x164>)
 80046f0:	60bb      	str	r3, [r7, #8]
       break;
 80046f2:	e08e      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046f4:	4b4b      	ldr	r3, [pc, #300]	; (8004824 <HAL_RCC_GetSysClockFreq+0x168>)
 80046f6:	60bb      	str	r3, [r7, #8]
      break;
 80046f8:	e08b      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046fa:	4948      	ldr	r1, [pc, #288]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 80046fc:	6849      	ldr	r1, [r1, #4]
 80046fe:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004702:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004704:	4945      	ldr	r1, [pc, #276]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 8004706:	6849      	ldr	r1, [r1, #4]
 8004708:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800470c:	2900      	cmp	r1, #0
 800470e:	d024      	beq.n	800475a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004710:	4942      	ldr	r1, [pc, #264]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 8004712:	6849      	ldr	r1, [r1, #4]
 8004714:	0989      	lsrs	r1, r1, #6
 8004716:	4608      	mov	r0, r1
 8004718:	f04f 0100 	mov.w	r1, #0
 800471c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004720:	f04f 0500 	mov.w	r5, #0
 8004724:	ea00 0204 	and.w	r2, r0, r4
 8004728:	ea01 0305 	and.w	r3, r1, r5
 800472c:	493d      	ldr	r1, [pc, #244]	; (8004824 <HAL_RCC_GetSysClockFreq+0x168>)
 800472e:	fb01 f003 	mul.w	r0, r1, r3
 8004732:	2100      	movs	r1, #0
 8004734:	fb01 f102 	mul.w	r1, r1, r2
 8004738:	1844      	adds	r4, r0, r1
 800473a:	493a      	ldr	r1, [pc, #232]	; (8004824 <HAL_RCC_GetSysClockFreq+0x168>)
 800473c:	fba2 0101 	umull	r0, r1, r2, r1
 8004740:	1863      	adds	r3, r4, r1
 8004742:	4619      	mov	r1, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	461a      	mov	r2, r3
 8004748:	f04f 0300 	mov.w	r3, #0
 800474c:	f7fc f9cc 	bl	8000ae8 <__aeabi_uldivmod>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4613      	mov	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	e04a      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475a:	4b30      	ldr	r3, [pc, #192]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	099b      	lsrs	r3, r3, #6
 8004760:	461a      	mov	r2, r3
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	f240 10ff 	movw	r0, #511	; 0x1ff
 800476a:	f04f 0100 	mov.w	r1, #0
 800476e:	ea02 0400 	and.w	r4, r2, r0
 8004772:	ea03 0501 	and.w	r5, r3, r1
 8004776:	4620      	mov	r0, r4
 8004778:	4629      	mov	r1, r5
 800477a:	f04f 0200 	mov.w	r2, #0
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	014b      	lsls	r3, r1, #5
 8004784:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004788:	0142      	lsls	r2, r0, #5
 800478a:	4610      	mov	r0, r2
 800478c:	4619      	mov	r1, r3
 800478e:	1b00      	subs	r0, r0, r4
 8004790:	eb61 0105 	sbc.w	r1, r1, r5
 8004794:	f04f 0200 	mov.w	r2, #0
 8004798:	f04f 0300 	mov.w	r3, #0
 800479c:	018b      	lsls	r3, r1, #6
 800479e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80047a2:	0182      	lsls	r2, r0, #6
 80047a4:	1a12      	subs	r2, r2, r0
 80047a6:	eb63 0301 	sbc.w	r3, r3, r1
 80047aa:	f04f 0000 	mov.w	r0, #0
 80047ae:	f04f 0100 	mov.w	r1, #0
 80047b2:	00d9      	lsls	r1, r3, #3
 80047b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047b8:	00d0      	lsls	r0, r2, #3
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	1912      	adds	r2, r2, r4
 80047c0:	eb45 0303 	adc.w	r3, r5, r3
 80047c4:	f04f 0000 	mov.w	r0, #0
 80047c8:	f04f 0100 	mov.w	r1, #0
 80047cc:	0299      	lsls	r1, r3, #10
 80047ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80047d2:	0290      	lsls	r0, r2, #10
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4610      	mov	r0, r2
 80047da:	4619      	mov	r1, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	461a      	mov	r2, r3
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	f7fc f980 	bl	8000ae8 <__aeabi_uldivmod>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4613      	mov	r3, r2
 80047ee:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047f0:	4b0a      	ldr	r3, [pc, #40]	; (800481c <HAL_RCC_GetSysClockFreq+0x160>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	3301      	adds	r3, #1
 80047fc:	005b      	lsls	r3, r3, #1
 80047fe:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	60bb      	str	r3, [r7, #8]
      break;
 800480a:	e002      	b.n	8004812 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800480c:	4b04      	ldr	r3, [pc, #16]	; (8004820 <HAL_RCC_GetSysClockFreq+0x164>)
 800480e:	60bb      	str	r3, [r7, #8]
      break;
 8004810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004812:	68bb      	ldr	r3, [r7, #8]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bdb0      	pop	{r4, r5, r7, pc}
 800481c:	40023800 	.word	0x40023800
 8004820:	00f42400 	.word	0x00f42400
 8004824:	017d7840 	.word	0x017d7840

08004828 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800482c:	4b03      	ldr	r3, [pc, #12]	; (800483c <HAL_RCC_GetHCLKFreq+0x14>)
 800482e:	681b      	ldr	r3, [r3, #0]
}
 8004830:	4618      	mov	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	20000000 	.word	0x20000000

08004840 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004844:	f7ff fff0 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004848:	4602      	mov	r2, r0
 800484a:	4b05      	ldr	r3, [pc, #20]	; (8004860 <HAL_RCC_GetPCLK1Freq+0x20>)
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	0a9b      	lsrs	r3, r3, #10
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	4903      	ldr	r1, [pc, #12]	; (8004864 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004856:	5ccb      	ldrb	r3, [r1, r3]
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	40023800 	.word	0x40023800
 8004864:	08009ddc 	.word	0x08009ddc

08004868 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800486c:	f7ff ffdc 	bl	8004828 <HAL_RCC_GetHCLKFreq>
 8004870:	4602      	mov	r2, r0
 8004872:	4b05      	ldr	r3, [pc, #20]	; (8004888 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	0b5b      	lsrs	r3, r3, #13
 8004878:	f003 0307 	and.w	r3, r3, #7
 800487c:	4903      	ldr	r1, [pc, #12]	; (800488c <HAL_RCC_GetPCLK2Freq+0x24>)
 800487e:	5ccb      	ldrb	r3, [r1, r3]
 8004880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004884:	4618      	mov	r0, r3
 8004886:	bd80      	pop	{r7, pc}
 8004888:	40023800 	.word	0x40023800
 800488c:	08009ddc 	.word	0x08009ddc

08004890 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	220f      	movs	r2, #15
 800489e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048a0:	4b12      	ldr	r3, [pc, #72]	; (80048ec <HAL_RCC_GetClockConfig+0x5c>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 0203 	and.w	r2, r3, #3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048ac:	4b0f      	ldr	r3, [pc, #60]	; (80048ec <HAL_RCC_GetClockConfig+0x5c>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048b8:	4b0c      	ldr	r3, [pc, #48]	; (80048ec <HAL_RCC_GetClockConfig+0x5c>)
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048c4:	4b09      	ldr	r3, [pc, #36]	; (80048ec <HAL_RCC_GetClockConfig+0x5c>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	08db      	lsrs	r3, r3, #3
 80048ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048d2:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <HAL_RCC_GetClockConfig+0x60>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 020f 	and.w	r2, r3, #15
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	601a      	str	r2, [r3, #0]
}
 80048de:	bf00      	nop
 80048e0:	370c      	adds	r7, #12
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr
 80048ea:	bf00      	nop
 80048ec:	40023800 	.word	0x40023800
 80048f0:	40023c00 	.word	0x40023c00

080048f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e01d      	b.n	8004942 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f815 	bl	800494a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f000 f968 	bl	8004c08 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800495e:	b480      	push	{r7}
 8004960:	b085      	sub	sp, #20
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f042 0201 	orr.w	r2, r2, #1
 8004974:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b06      	cmp	r3, #6
 8004986:	d007      	beq.n	8004998 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0201 	orr.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr

080049a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049a6:	b580      	push	{r7, lr}
 80049a8:	b082      	sub	sp, #8
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b02      	cmp	r3, #2
 80049ba:	d122      	bne.n	8004a02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d11b      	bne.n	8004a02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f06f 0202 	mvn.w	r2, #2
 80049d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	f003 0303 	and.w	r3, r3, #3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 f8ee 	bl	8004bca <HAL_TIM_IC_CaptureCallback>
 80049ee:	e005      	b.n	80049fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f8e0 	bl	8004bb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f8f1 	bl	8004bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2200      	movs	r2, #0
 8004a00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f003 0304 	and.w	r3, r3, #4
 8004a0c:	2b04      	cmp	r3, #4
 8004a0e:	d122      	bne.n	8004a56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d11b      	bne.n	8004a56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f06f 0204 	mvn.w	r2, #4
 8004a26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d003      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f8c4 	bl	8004bca <HAL_TIM_IC_CaptureCallback>
 8004a42:	e005      	b.n	8004a50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f8b6 	bl	8004bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f8c7 	bl	8004bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f003 0308 	and.w	r3, r3, #8
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d122      	bne.n	8004aaa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d11b      	bne.n	8004aaa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f06f 0208 	mvn.w	r2, #8
 8004a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2204      	movs	r2, #4
 8004a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	f003 0303 	and.w	r3, r3, #3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	f000 f89a 	bl	8004bca <HAL_TIM_IC_CaptureCallback>
 8004a96:	e005      	b.n	8004aa4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f88c 	bl	8004bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f89d 	bl	8004bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f003 0310 	and.w	r3, r3, #16
 8004ab4:	2b10      	cmp	r3, #16
 8004ab6:	d122      	bne.n	8004afe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f003 0310 	and.w	r3, r3, #16
 8004ac2:	2b10      	cmp	r3, #16
 8004ac4:	d11b      	bne.n	8004afe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f06f 0210 	mvn.w	r2, #16
 8004ace:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2208      	movs	r2, #8
 8004ad4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69db      	ldr	r3, [r3, #28]
 8004adc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d003      	beq.n	8004aec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f870 	bl	8004bca <HAL_TIM_IC_CaptureCallback>
 8004aea:	e005      	b.n	8004af8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 f862 	bl	8004bb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f873 	bl	8004bde <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d10e      	bne.n	8004b2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d107      	bne.n	8004b2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f06f 0201 	mvn.w	r2, #1
 8004b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fc fe37 	bl	8001798 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b34:	2b80      	cmp	r3, #128	; 0x80
 8004b36:	d10e      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	2b80      	cmp	r3, #128	; 0x80
 8004b44:	d107      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f903 	bl	8004d5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b60:	2b40      	cmp	r3, #64	; 0x40
 8004b62:	d10e      	bne.n	8004b82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d107      	bne.n	8004b82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f838 	bl	8004bf2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b20      	cmp	r3, #32
 8004b8e:	d10e      	bne.n	8004bae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d107      	bne.n	8004bae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f06f 0220 	mvn.w	r2, #32
 8004ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f8cd 	bl	8004d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bae:	bf00      	nop
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bb6:	b480      	push	{r7}
 8004bb8:	b083      	sub	sp, #12
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004bbe:	bf00      	nop
 8004bc0:	370c      	adds	r7, #12
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b083      	sub	sp, #12
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bd2:	bf00      	nop
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr

08004bde <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b083      	sub	sp, #12
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004be6:	bf00      	nop
 8004be8:	370c      	adds	r7, #12
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b083      	sub	sp, #12
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
	...

08004c08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a40      	ldr	r2, [pc, #256]	; (8004d1c <TIM_Base_SetConfig+0x114>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d013      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c26:	d00f      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a3d      	ldr	r2, [pc, #244]	; (8004d20 <TIM_Base_SetConfig+0x118>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d00b      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a3c      	ldr	r2, [pc, #240]	; (8004d24 <TIM_Base_SetConfig+0x11c>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d007      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a3b      	ldr	r2, [pc, #236]	; (8004d28 <TIM_Base_SetConfig+0x120>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d003      	beq.n	8004c48 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a3a      	ldr	r2, [pc, #232]	; (8004d2c <TIM_Base_SetConfig+0x124>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d108      	bne.n	8004c5a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a2f      	ldr	r2, [pc, #188]	; (8004d1c <TIM_Base_SetConfig+0x114>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d02b      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c68:	d027      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a2c      	ldr	r2, [pc, #176]	; (8004d20 <TIM_Base_SetConfig+0x118>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d023      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a2b      	ldr	r2, [pc, #172]	; (8004d24 <TIM_Base_SetConfig+0x11c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d01f      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2a      	ldr	r2, [pc, #168]	; (8004d28 <TIM_Base_SetConfig+0x120>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d01b      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a29      	ldr	r2, [pc, #164]	; (8004d2c <TIM_Base_SetConfig+0x124>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d017      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a28      	ldr	r2, [pc, #160]	; (8004d30 <TIM_Base_SetConfig+0x128>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d013      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a27      	ldr	r2, [pc, #156]	; (8004d34 <TIM_Base_SetConfig+0x12c>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d00f      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a26      	ldr	r2, [pc, #152]	; (8004d38 <TIM_Base_SetConfig+0x130>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00b      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a25      	ldr	r2, [pc, #148]	; (8004d3c <TIM_Base_SetConfig+0x134>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d007      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a24      	ldr	r2, [pc, #144]	; (8004d40 <TIM_Base_SetConfig+0x138>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a23      	ldr	r2, [pc, #140]	; (8004d44 <TIM_Base_SetConfig+0x13c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d108      	bne.n	8004ccc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a0a      	ldr	r2, [pc, #40]	; (8004d1c <TIM_Base_SetConfig+0x114>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d003      	beq.n	8004d00 <TIM_Base_SetConfig+0xf8>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a0c      	ldr	r2, [pc, #48]	; (8004d2c <TIM_Base_SetConfig+0x124>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d103      	bne.n	8004d08 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	691a      	ldr	r2, [r3, #16]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	615a      	str	r2, [r3, #20]
}
 8004d0e:	bf00      	nop
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	40010000 	.word	0x40010000
 8004d20:	40000400 	.word	0x40000400
 8004d24:	40000800 	.word	0x40000800
 8004d28:	40000c00 	.word	0x40000c00
 8004d2c:	40010400 	.word	0x40010400
 8004d30:	40014000 	.word	0x40014000
 8004d34:	40014400 	.word	0x40014400
 8004d38:	40014800 	.word	0x40014800
 8004d3c:	40001800 	.word	0x40001800
 8004d40:	40001c00 	.word	0x40001c00
 8004d44:	40002000 	.word	0x40002000

08004d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e03f      	b.n	8004e02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fd f8b8 	bl	8001f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2224      	movs	r2, #36	; 0x24
 8004da0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68da      	ldr	r2, [r3, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004db2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fcd3 	bl	8005760 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	691a      	ldr	r2, [r3, #16]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695a      	ldr	r2, [r3, #20]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004dd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004de8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2200      	movs	r2, #0
 8004dee:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3708      	adds	r7, #8
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e0a:	b580      	push	{r7, lr}
 8004e0c:	b088      	sub	sp, #32
 8004e0e:	af02      	add	r7, sp, #8
 8004e10:	60f8      	str	r0, [r7, #12]
 8004e12:	60b9      	str	r1, [r7, #8]
 8004e14:	603b      	str	r3, [r7, #0]
 8004e16:	4613      	mov	r3, r2
 8004e18:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	f040 8083 	bne.w	8004f32 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_UART_Transmit+0x2e>
 8004e32:	88fb      	ldrh	r3, [r7, #6]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d101      	bne.n	8004e3c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e07b      	b.n	8004f34 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d101      	bne.n	8004e4a <HAL_UART_Transmit+0x40>
 8004e46:	2302      	movs	r3, #2
 8004e48:	e074      	b.n	8004f34 <HAL_UART_Transmit+0x12a>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2221      	movs	r2, #33	; 0x21
 8004e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004e60:	f7fd fa7a 	bl	8002358 <HAL_GetTick>
 8004e64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	88fa      	ldrh	r2, [r7, #6]
 8004e6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	88fa      	ldrh	r2, [r7, #6]
 8004e70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004e7a:	e042      	b.n	8004f02 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e92:	d122      	bne.n	8004eda <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	2180      	movs	r1, #128	; 0x80
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f000 fadc 	bl	800545c <UART_WaitOnFlagUntilTimeout>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d001      	beq.n	8004eae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e042      	b.n	8004f34 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	881b      	ldrh	r3, [r3, #0]
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ec0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d103      	bne.n	8004ed2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004eca:	68bb      	ldr	r3, [r7, #8]
 8004ecc:	3302      	adds	r3, #2
 8004ece:	60bb      	str	r3, [r7, #8]
 8004ed0:	e017      	b.n	8004f02 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	60bb      	str	r3, [r7, #8]
 8004ed8:	e013      	b.n	8004f02 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	2180      	movs	r1, #128	; 0x80
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 fab9 	bl	800545c <UART_WaitOnFlagUntilTimeout>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e01f      	b.n	8004f34 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	60ba      	str	r2, [r7, #8]
 8004efa:	781a      	ldrb	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d1b7      	bne.n	8004e7c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2200      	movs	r2, #0
 8004f14:	2140      	movs	r1, #64	; 0x40
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 faa0 	bl	800545c <UART_WaitOnFlagUntilTimeout>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d001      	beq.n	8004f26 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e006      	b.n	8004f34 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	e000      	b.n	8004f34 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004f32:	2302      	movs	r3, #2
  }
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b086      	sub	sp, #24
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	4613      	mov	r3, r2
 8004f48:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	2b20      	cmp	r3, #32
 8004f54:	d166      	bne.n	8005024 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <HAL_UART_Receive_DMA+0x26>
 8004f5c:	88fb      	ldrh	r3, [r7, #6]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d101      	bne.n	8004f66 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e05f      	b.n	8005026 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_UART_Receive_DMA+0x38>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e058      	b.n	8005026 <HAL_UART_Receive_DMA+0xea>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	88fa      	ldrh	r2, [r7, #6]
 8004f86:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2222      	movs	r2, #34	; 0x22
 8004f92:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f9a:	4a25      	ldr	r2, [pc, #148]	; (8005030 <HAL_UART_Receive_DMA+0xf4>)
 8004f9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa2:	4a24      	ldr	r2, [pc, #144]	; (8005034 <HAL_UART_Receive_DMA+0xf8>)
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004faa:	4a23      	ldr	r2, [pc, #140]	; (8005038 <HAL_UART_Receive_DMA+0xfc>)
 8004fac:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004fb6:	f107 0308 	add.w	r3, r7, #8
 8004fba:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	88fb      	ldrh	r3, [r7, #6]
 8004fce:	f7fd fb83 	bl	80026d8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	613b      	str	r3, [r7, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ffe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	695a      	ldr	r2, [r3, #20]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f042 0201 	orr.w	r2, r2, #1
 800500e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695a      	ldr	r2, [r3, #20]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800501e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005020:	2300      	movs	r3, #0
 8005022:	e000      	b.n	8005026 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005024:	2302      	movs	r3, #2
  }
}
 8005026:	4618      	mov	r0, r3
 8005028:	3718      	adds	r7, #24
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	08005345 	.word	0x08005345
 8005034:	080053ad 	.word	0x080053ad
 8005038:	080053c9 	.word	0x080053c9

0800503c <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005052:	2b80      	cmp	r3, #128	; 0x80
 8005054:	bf0c      	ite	eq
 8005056:	2301      	moveq	r3, #1
 8005058:	2300      	movne	r3, #0
 800505a:	b2db      	uxtb	r3, r3
 800505c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b21      	cmp	r3, #33	; 0x21
 8005068:	d116      	bne.n	8005098 <HAL_UART_DMAStop+0x5c>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d013      	beq.n	8005098 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695a      	ldr	r2, [r3, #20]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800507e:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005084:	2b00      	cmp	r3, #0
 8005086:	d004      	beq.n	8005092 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508c:	4618      	mov	r0, r3
 800508e:	f7fd fb7b 	bl	8002788 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fa2c 	bl	80054f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	bf0c      	ite	eq
 80050a6:	2301      	moveq	r3, #1
 80050a8:	2300      	movne	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b22      	cmp	r3, #34	; 0x22
 80050b8:	d116      	bne.n	80050e8 <HAL_UART_DMAStop+0xac>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d013      	beq.n	80050e8 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695a      	ldr	r2, [r3, #20]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ce:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d004      	beq.n	80050e2 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fd fb53 	bl	8002788 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 fa1a 	bl	800551c <UART_EndRxTransfer>
  }

  return HAL_OK;
 80050e8:	2300      	movs	r3, #0
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68db      	ldr	r3, [r3, #12]
 800510a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005114:	2300      	movs	r3, #0
 8005116:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005118:	2300      	movs	r3, #0
 800511a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	f003 030f 	and.w	r3, r3, #15
 8005122:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d10d      	bne.n	8005146 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d008      	beq.n	8005146 <HAL_UART_IRQHandler+0x52>
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	f003 0320 	and.w	r3, r3, #32
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 fa8c 	bl	800565c <UART_Receive_IT>
      return;
 8005144:	e0d0      	b.n	80052e8 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	f000 80b0 	beq.w	80052ae <HAL_UART_IRQHandler+0x1ba>
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d105      	bne.n	8005164 <HAL_UART_IRQHandler+0x70>
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800515e:	2b00      	cmp	r3, #0
 8005160:	f000 80a5 	beq.w	80052ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005164:	69fb      	ldr	r3, [r7, #28]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <HAL_UART_IRQHandler+0x90>
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800517c:	f043 0201 	orr.w	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005184:	69fb      	ldr	r3, [r7, #28]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b00      	cmp	r3, #0
 800518c:	d00a      	beq.n	80051a4 <HAL_UART_IRQHandler+0xb0>
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d005      	beq.n	80051a4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800519c:	f043 0202 	orr.w	r2, r3, #2
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051a4:	69fb      	ldr	r3, [r7, #28]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d00a      	beq.n	80051c4 <HAL_UART_IRQHandler+0xd0>
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051bc:	f043 0204 	orr.w	r2, r3, #4
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00f      	beq.n	80051ee <HAL_UART_IRQHandler+0xfa>
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f003 0320 	and.w	r3, r3, #32
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d104      	bne.n	80051e2 <HAL_UART_IRQHandler+0xee>
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e6:	f043 0208 	orr.w	r2, r3, #8
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d077      	beq.n	80052e6 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	f003 0320 	and.w	r3, r3, #32
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <HAL_UART_IRQHandler+0x11c>
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	f003 0320 	and.w	r3, r3, #32
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 fa26 	bl	800565c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521a:	2b40      	cmp	r3, #64	; 0x40
 800521c:	bf0c      	ite	eq
 800521e:	2301      	moveq	r3, #1
 8005220:	2300      	movne	r3, #0
 8005222:	b2db      	uxtb	r3, r3
 8005224:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522a:	f003 0308 	and.w	r3, r3, #8
 800522e:	2b00      	cmp	r3, #0
 8005230:	d102      	bne.n	8005238 <HAL_UART_IRQHandler+0x144>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d031      	beq.n	800529c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 f96f 	bl	800551c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005248:	2b40      	cmp	r3, #64	; 0x40
 800524a:	d123      	bne.n	8005294 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	695a      	ldr	r2, [r3, #20]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800525a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005260:	2b00      	cmp	r3, #0
 8005262:	d013      	beq.n	800528c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005268:	4a21      	ldr	r2, [pc, #132]	; (80052f0 <HAL_UART_IRQHandler+0x1fc>)
 800526a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005270:	4618      	mov	r0, r3
 8005272:	f7fd faf9 	bl	8002868 <HAL_DMA_Abort_IT>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d016      	beq.n	80052aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005286:	4610      	mov	r0, r2
 8005288:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800528a:	e00e      	b.n	80052aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f84f 	bl	8005330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005292:	e00a      	b.n	80052aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f84b 	bl	8005330 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800529a:	e006      	b.n	80052aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f847 	bl	8005330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80052a8:	e01d      	b.n	80052e6 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052aa:	bf00      	nop
    return;
 80052ac:	e01b      	b.n	80052e6 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d008      	beq.n	80052ca <HAL_UART_IRQHandler+0x1d6>
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f95c 	bl	8005580 <UART_Transmit_IT>
    return;
 80052c8:	e00e      	b.n	80052e8 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d009      	beq.n	80052e8 <HAL_UART_IRQHandler+0x1f4>
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d004      	beq.n	80052e8 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f9a4 	bl	800562c <UART_EndTransmit_IT>
    return;
 80052e4:	e000      	b.n	80052e8 <HAL_UART_IRQHandler+0x1f4>
    return;
 80052e6:	bf00      	nop
  }
}
 80052e8:	3720      	adds	r7, #32
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	08005559 	.word	0x08005559

080052f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005308:	b480      	push	{r7}
 800530a:	b083      	sub	sp, #12
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005324:	bf00      	nop
 8005326:	370c      	adds	r7, #12
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800535c:	2b00      	cmp	r3, #0
 800535e:	d11e      	bne.n	800539e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68da      	ldr	r2, [r3, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005374:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695a      	ldr	r2, [r3, #20]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f022 0201 	bic.w	r2, r2, #1
 8005384:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	695a      	ldr	r2, [r3, #20]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005394:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2220      	movs	r2, #32
 800539a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f7ff ffb2 	bl	8005308 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053a4:	bf00      	nop
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}

080053ac <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b084      	sub	sp, #16
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f7ff ffae 	bl	800531c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053c0:	bf00      	nop
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80053d0:	2300      	movs	r3, #0
 80053d2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	695b      	ldr	r3, [r3, #20]
 80053e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e4:	2b80      	cmp	r3, #128	; 0x80
 80053e6:	bf0c      	ite	eq
 80053e8:	2301      	moveq	r3, #1
 80053ea:	2300      	movne	r3, #0
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b21      	cmp	r3, #33	; 0x21
 80053fa:	d108      	bne.n	800540e <UART_DMAError+0x46>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d005      	beq.n	800540e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2200      	movs	r2, #0
 8005406:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005408:	68b8      	ldr	r0, [r7, #8]
 800540a:	f000 f871 	bl	80054f0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005418:	2b40      	cmp	r3, #64	; 0x40
 800541a:	bf0c      	ite	eq
 800541c:	2301      	moveq	r3, #1
 800541e:	2300      	movne	r3, #0
 8005420:	b2db      	uxtb	r3, r3
 8005422:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b22      	cmp	r3, #34	; 0x22
 800542e:	d108      	bne.n	8005442 <UART_DMAError+0x7a>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d005      	beq.n	8005442 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	2200      	movs	r2, #0
 800543a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800543c:	68b8      	ldr	r0, [r7, #8]
 800543e:	f000 f86d 	bl	800551c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005446:	f043 0210 	orr.w	r2, r3, #16
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800544e:	68b8      	ldr	r0, [r7, #8]
 8005450:	f7ff ff6e 	bl	8005330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005454:	bf00      	nop
 8005456:	3710      	adds	r7, #16
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	603b      	str	r3, [r7, #0]
 8005468:	4613      	mov	r3, r2
 800546a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800546c:	e02c      	b.n	80054c8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005474:	d028      	beq.n	80054c8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d007      	beq.n	800548c <UART_WaitOnFlagUntilTimeout+0x30>
 800547c:	f7fc ff6c 	bl	8002358 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	69ba      	ldr	r2, [r7, #24]
 8005488:	429a      	cmp	r2, r3
 800548a:	d21d      	bcs.n	80054c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800549a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695a      	ldr	r2, [r3, #20]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0201 	bic.w	r2, r2, #1
 80054aa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2220      	movs	r2, #32
 80054b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e00f      	b.n	80054e8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	4013      	ands	r3, r2
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	bf0c      	ite	eq
 80054d8:	2301      	moveq	r3, #1
 80054da:	2300      	movne	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	461a      	mov	r2, r3
 80054e0:	79fb      	ldrb	r3, [r7, #7]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d0c3      	beq.n	800546e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}

080054f0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005506:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2220      	movs	r2, #32
 800550c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005532:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	695a      	ldr	r2, [r3, #20]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0201 	bic.w	r2, r2, #1
 8005542:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7ff fedc 	bl	8005330 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005578:	bf00      	nop
 800557a:	3710      	adds	r7, #16
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b21      	cmp	r3, #33	; 0x21
 8005592:	d144      	bne.n	800561e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800559c:	d11a      	bne.n	80055d4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	881b      	ldrh	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055b2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d105      	bne.n	80055c8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	1c9a      	adds	r2, r3, #2
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	621a      	str	r2, [r3, #32]
 80055c6:	e00e      	b.n	80055e6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a1b      	ldr	r3, [r3, #32]
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	621a      	str	r2, [r3, #32]
 80055d2:	e008      	b.n	80055e6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a1b      	ldr	r3, [r3, #32]
 80055d8:	1c59      	adds	r1, r3, #1
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6211      	str	r1, [r2, #32]
 80055de:	781a      	ldrb	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	3b01      	subs	r3, #1
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	4619      	mov	r1, r3
 80055f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10f      	bne.n	800561a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68da      	ldr	r2, [r3, #12]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005608:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005618:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800561a:	2300      	movs	r3, #0
 800561c:	e000      	b.n	8005620 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800561e:	2302      	movs	r3, #2
  }
}
 8005620:	4618      	mov	r0, r3
 8005622:	3714      	adds	r7, #20
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr

0800562c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68da      	ldr	r2, [r3, #12]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005642:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2220      	movs	r2, #32
 8005648:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff fe51 	bl	80052f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3708      	adds	r7, #8
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b22      	cmp	r3, #34	; 0x22
 800566e:	d171      	bne.n	8005754 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005678:	d123      	bne.n	80056c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10e      	bne.n	80056a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	b29b      	uxth	r3, r3
 8005690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005694:	b29a      	uxth	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569e:	1c9a      	adds	r2, r3, #2
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	629a      	str	r2, [r3, #40]	; 0x28
 80056a4:	e029      	b.n	80056fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	629a      	str	r2, [r3, #40]	; 0x28
 80056c0:	e01b      	b.n	80056fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d10a      	bne.n	80056e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6858      	ldr	r0, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d4:	1c59      	adds	r1, r3, #1
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6291      	str	r1, [r2, #40]	; 0x28
 80056da:	b2c2      	uxtb	r2, r0
 80056dc:	701a      	strb	r2, [r3, #0]
 80056de:	e00c      	b.n	80056fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	b2da      	uxtb	r2, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ec:	1c58      	adds	r0, r3, #1
 80056ee:	6879      	ldr	r1, [r7, #4]
 80056f0:	6288      	str	r0, [r1, #40]	; 0x28
 80056f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29b      	uxth	r3, r3
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	4619      	mov	r1, r3
 8005708:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800570a:	2b00      	cmp	r3, #0
 800570c:	d120      	bne.n	8005750 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68da      	ldr	r2, [r3, #12]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f022 0220 	bic.w	r2, r2, #32
 800571c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68da      	ldr	r2, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800572c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	695a      	ldr	r2, [r3, #20]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f022 0201 	bic.w	r2, r2, #1
 800573c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff fdde 	bl	8005308 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	e002      	b.n	8005756 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005750:	2300      	movs	r3, #0
 8005752:	e000      	b.n	8005756 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005754:	2302      	movs	r3, #2
  }
}
 8005756:	4618      	mov	r0, r3
 8005758:	3710      	adds	r7, #16
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005764:	b0bd      	sub	sp, #244	; 0xf4
 8005766:	af00      	add	r7, sp, #0
 8005768:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800576c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	691b      	ldr	r3, [r3, #16]
 8005774:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005778:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577c:	68d9      	ldr	r1, [r3, #12]
 800577e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	ea40 0301 	orr.w	r3, r0, r1
 8005788:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800578a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578e:	689a      	ldr	r2, [r3, #8]
 8005790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005794:	691b      	ldr	r3, [r3, #16]
 8005796:	431a      	orrs	r2, r3
 8005798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	431a      	orrs	r2, r3
 80057a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057a4:	69db      	ldr	r3, [r3, #28]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80057ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057b8:	f021 010c 	bic.w	r1, r1, #12
 80057bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80057c6:	430b      	orrs	r3, r1
 80057c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80057d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057da:	6999      	ldr	r1, [r3, #24]
 80057dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	ea40 0301 	orr.w	r3, r0, r1
 80057e6:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ec:	69db      	ldr	r3, [r3, #28]
 80057ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f2:	f040 81a5 	bne.w	8005b40 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80057f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	4bcd      	ldr	r3, [pc, #820]	; (8005b34 <UART_SetConfig+0x3d4>)
 80057fe:	429a      	cmp	r2, r3
 8005800:	d006      	beq.n	8005810 <UART_SetConfig+0xb0>
 8005802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4bcb      	ldr	r3, [pc, #812]	; (8005b38 <UART_SetConfig+0x3d8>)
 800580a:	429a      	cmp	r2, r3
 800580c:	f040 80cb 	bne.w	80059a6 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005810:	f7ff f82a 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 8005814:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005818:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800581c:	461c      	mov	r4, r3
 800581e:	f04f 0500 	mov.w	r5, #0
 8005822:	4622      	mov	r2, r4
 8005824:	462b      	mov	r3, r5
 8005826:	1891      	adds	r1, r2, r2
 8005828:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800582c:	415b      	adcs	r3, r3
 800582e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005832:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8005836:	1912      	adds	r2, r2, r4
 8005838:	eb45 0303 	adc.w	r3, r5, r3
 800583c:	f04f 0000 	mov.w	r0, #0
 8005840:	f04f 0100 	mov.w	r1, #0
 8005844:	00d9      	lsls	r1, r3, #3
 8005846:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800584a:	00d0      	lsls	r0, r2, #3
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	1911      	adds	r1, r2, r4
 8005852:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8005856:	416b      	adcs	r3, r5
 8005858:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800585c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	461a      	mov	r2, r3
 8005864:	f04f 0300 	mov.w	r3, #0
 8005868:	1891      	adds	r1, r2, r2
 800586a:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800586e:	415b      	adcs	r3, r3
 8005870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005874:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005878:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800587c:	f7fb f934 	bl	8000ae8 <__aeabi_uldivmod>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4bad      	ldr	r3, [pc, #692]	; (8005b3c <UART_SetConfig+0x3dc>)
 8005886:	fba3 2302 	umull	r2, r3, r3, r2
 800588a:	095b      	lsrs	r3, r3, #5
 800588c:	011e      	lsls	r6, r3, #4
 800588e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005892:	461c      	mov	r4, r3
 8005894:	f04f 0500 	mov.w	r5, #0
 8005898:	4622      	mov	r2, r4
 800589a:	462b      	mov	r3, r5
 800589c:	1891      	adds	r1, r2, r2
 800589e:	67b9      	str	r1, [r7, #120]	; 0x78
 80058a0:	415b      	adcs	r3, r3
 80058a2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058a4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80058a8:	1912      	adds	r2, r2, r4
 80058aa:	eb45 0303 	adc.w	r3, r5, r3
 80058ae:	f04f 0000 	mov.w	r0, #0
 80058b2:	f04f 0100 	mov.w	r1, #0
 80058b6:	00d9      	lsls	r1, r3, #3
 80058b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058bc:	00d0      	lsls	r0, r2, #3
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	1911      	adds	r1, r2, r4
 80058c4:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80058c8:	416b      	adcs	r3, r5
 80058ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80058ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	461a      	mov	r2, r3
 80058d6:	f04f 0300 	mov.w	r3, #0
 80058da:	1891      	adds	r1, r2, r2
 80058dc:	6739      	str	r1, [r7, #112]	; 0x70
 80058de:	415b      	adcs	r3, r3
 80058e0:	677b      	str	r3, [r7, #116]	; 0x74
 80058e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80058e6:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80058ea:	f7fb f8fd 	bl	8000ae8 <__aeabi_uldivmod>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	4b92      	ldr	r3, [pc, #584]	; (8005b3c <UART_SetConfig+0x3dc>)
 80058f4:	fba3 1302 	umull	r1, r3, r3, r2
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	2164      	movs	r1, #100	; 0x64
 80058fc:	fb01 f303 	mul.w	r3, r1, r3
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	00db      	lsls	r3, r3, #3
 8005904:	3332      	adds	r3, #50	; 0x32
 8005906:	4a8d      	ldr	r2, [pc, #564]	; (8005b3c <UART_SetConfig+0x3dc>)
 8005908:	fba2 2303 	umull	r2, r3, r2, r3
 800590c:	095b      	lsrs	r3, r3, #5
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005914:	441e      	add	r6, r3
 8005916:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800591a:	4618      	mov	r0, r3
 800591c:	f04f 0100 	mov.w	r1, #0
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	1894      	adds	r4, r2, r2
 8005926:	66bc      	str	r4, [r7, #104]	; 0x68
 8005928:	415b      	adcs	r3, r3
 800592a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800592c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8005930:	1812      	adds	r2, r2, r0
 8005932:	eb41 0303 	adc.w	r3, r1, r3
 8005936:	f04f 0400 	mov.w	r4, #0
 800593a:	f04f 0500 	mov.w	r5, #0
 800593e:	00dd      	lsls	r5, r3, #3
 8005940:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005944:	00d4      	lsls	r4, r2, #3
 8005946:	4622      	mov	r2, r4
 8005948:	462b      	mov	r3, r5
 800594a:	1814      	adds	r4, r2, r0
 800594c:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8005950:	414b      	adcs	r3, r1
 8005952:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	461a      	mov	r2, r3
 800595e:	f04f 0300 	mov.w	r3, #0
 8005962:	1891      	adds	r1, r2, r2
 8005964:	6639      	str	r1, [r7, #96]	; 0x60
 8005966:	415b      	adcs	r3, r3
 8005968:	667b      	str	r3, [r7, #100]	; 0x64
 800596a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800596e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005972:	f7fb f8b9 	bl	8000ae8 <__aeabi_uldivmod>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	4b70      	ldr	r3, [pc, #448]	; (8005b3c <UART_SetConfig+0x3dc>)
 800597c:	fba3 1302 	umull	r1, r3, r3, r2
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	2164      	movs	r1, #100	; 0x64
 8005984:	fb01 f303 	mul.w	r3, r1, r3
 8005988:	1ad3      	subs	r3, r2, r3
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	3332      	adds	r3, #50	; 0x32
 800598e:	4a6b      	ldr	r2, [pc, #428]	; (8005b3c <UART_SetConfig+0x3dc>)
 8005990:	fba2 2303 	umull	r2, r3, r2, r3
 8005994:	095b      	lsrs	r3, r3, #5
 8005996:	f003 0207 	and.w	r2, r3, #7
 800599a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4432      	add	r2, r6
 80059a2:	609a      	str	r2, [r3, #8]
 80059a4:	e26d      	b.n	8005e82 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059a6:	f7fe ff4b 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 80059aa:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059b2:	461c      	mov	r4, r3
 80059b4:	f04f 0500 	mov.w	r5, #0
 80059b8:	4622      	mov	r2, r4
 80059ba:	462b      	mov	r3, r5
 80059bc:	1891      	adds	r1, r2, r2
 80059be:	65b9      	str	r1, [r7, #88]	; 0x58
 80059c0:	415b      	adcs	r3, r3
 80059c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80059c8:	1912      	adds	r2, r2, r4
 80059ca:	eb45 0303 	adc.w	r3, r5, r3
 80059ce:	f04f 0000 	mov.w	r0, #0
 80059d2:	f04f 0100 	mov.w	r1, #0
 80059d6:	00d9      	lsls	r1, r3, #3
 80059d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80059dc:	00d0      	lsls	r0, r2, #3
 80059de:	4602      	mov	r2, r0
 80059e0:	460b      	mov	r3, r1
 80059e2:	1911      	adds	r1, r2, r4
 80059e4:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80059e8:	416b      	adcs	r3, r5
 80059ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	461a      	mov	r2, r3
 80059f6:	f04f 0300 	mov.w	r3, #0
 80059fa:	1891      	adds	r1, r2, r2
 80059fc:	6539      	str	r1, [r7, #80]	; 0x50
 80059fe:	415b      	adcs	r3, r3
 8005a00:	657b      	str	r3, [r7, #84]	; 0x54
 8005a02:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005a06:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8005a0a:	f7fb f86d 	bl	8000ae8 <__aeabi_uldivmod>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4b4a      	ldr	r3, [pc, #296]	; (8005b3c <UART_SetConfig+0x3dc>)
 8005a14:	fba3 2302 	umull	r2, r3, r3, r2
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	011e      	lsls	r6, r3, #4
 8005a1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a20:	461c      	mov	r4, r3
 8005a22:	f04f 0500 	mov.w	r5, #0
 8005a26:	4622      	mov	r2, r4
 8005a28:	462b      	mov	r3, r5
 8005a2a:	1891      	adds	r1, r2, r2
 8005a2c:	64b9      	str	r1, [r7, #72]	; 0x48
 8005a2e:	415b      	adcs	r3, r3
 8005a30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a32:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005a36:	1912      	adds	r2, r2, r4
 8005a38:	eb45 0303 	adc.w	r3, r5, r3
 8005a3c:	f04f 0000 	mov.w	r0, #0
 8005a40:	f04f 0100 	mov.w	r1, #0
 8005a44:	00d9      	lsls	r1, r3, #3
 8005a46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005a4a:	00d0      	lsls	r0, r2, #3
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	1911      	adds	r1, r2, r4
 8005a52:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005a56:	416b      	adcs	r3, r5
 8005a58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	461a      	mov	r2, r3
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	1891      	adds	r1, r2, r2
 8005a6a:	6439      	str	r1, [r7, #64]	; 0x40
 8005a6c:	415b      	adcs	r3, r3
 8005a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005a74:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8005a78:	f7fb f836 	bl	8000ae8 <__aeabi_uldivmod>
 8005a7c:	4602      	mov	r2, r0
 8005a7e:	460b      	mov	r3, r1
 8005a80:	4b2e      	ldr	r3, [pc, #184]	; (8005b3c <UART_SetConfig+0x3dc>)
 8005a82:	fba3 1302 	umull	r1, r3, r3, r2
 8005a86:	095b      	lsrs	r3, r3, #5
 8005a88:	2164      	movs	r1, #100	; 0x64
 8005a8a:	fb01 f303 	mul.w	r3, r1, r3
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	3332      	adds	r3, #50	; 0x32
 8005a94:	4a29      	ldr	r2, [pc, #164]	; (8005b3c <UART_SetConfig+0x3dc>)
 8005a96:	fba2 2303 	umull	r2, r3, r2, r3
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005aa2:	441e      	add	r6, r3
 8005aa4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f04f 0100 	mov.w	r1, #0
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	1894      	adds	r4, r2, r2
 8005ab4:	63bc      	str	r4, [r7, #56]	; 0x38
 8005ab6:	415b      	adcs	r3, r3
 8005ab8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aba:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005abe:	1812      	adds	r2, r2, r0
 8005ac0:	eb41 0303 	adc.w	r3, r1, r3
 8005ac4:	f04f 0400 	mov.w	r4, #0
 8005ac8:	f04f 0500 	mov.w	r5, #0
 8005acc:	00dd      	lsls	r5, r3, #3
 8005ace:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ad2:	00d4      	lsls	r4, r2, #3
 8005ad4:	4622      	mov	r2, r4
 8005ad6:	462b      	mov	r3, r5
 8005ad8:	1814      	adds	r4, r2, r0
 8005ada:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8005ade:	414b      	adcs	r3, r1
 8005ae0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	461a      	mov	r2, r3
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	1891      	adds	r1, r2, r2
 8005af2:	6339      	str	r1, [r7, #48]	; 0x30
 8005af4:	415b      	adcs	r3, r3
 8005af6:	637b      	str	r3, [r7, #52]	; 0x34
 8005af8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005afc:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005b00:	f7fa fff2 	bl	8000ae8 <__aeabi_uldivmod>
 8005b04:	4602      	mov	r2, r0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4b0c      	ldr	r3, [pc, #48]	; (8005b3c <UART_SetConfig+0x3dc>)
 8005b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	2164      	movs	r1, #100	; 0x64
 8005b12:	fb01 f303 	mul.w	r3, r1, r3
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	00db      	lsls	r3, r3, #3
 8005b1a:	3332      	adds	r3, #50	; 0x32
 8005b1c:	4a07      	ldr	r2, [pc, #28]	; (8005b3c <UART_SetConfig+0x3dc>)
 8005b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	f003 0207 	and.w	r2, r3, #7
 8005b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4432      	add	r2, r6
 8005b30:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005b32:	e1a6      	b.n	8005e82 <UART_SetConfig+0x722>
 8005b34:	40011000 	.word	0x40011000
 8005b38:	40011400 	.word	0x40011400
 8005b3c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	4bd1      	ldr	r3, [pc, #836]	; (8005e8c <UART_SetConfig+0x72c>)
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d006      	beq.n	8005b5a <UART_SetConfig+0x3fa>
 8005b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	4bcf      	ldr	r3, [pc, #828]	; (8005e90 <UART_SetConfig+0x730>)
 8005b54:	429a      	cmp	r2, r3
 8005b56:	f040 80ca 	bne.w	8005cee <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b5a:	f7fe fe85 	bl	8004868 <HAL_RCC_GetPCLK2Freq>
 8005b5e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b62:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b66:	461c      	mov	r4, r3
 8005b68:	f04f 0500 	mov.w	r5, #0
 8005b6c:	4622      	mov	r2, r4
 8005b6e:	462b      	mov	r3, r5
 8005b70:	1891      	adds	r1, r2, r2
 8005b72:	62b9      	str	r1, [r7, #40]	; 0x28
 8005b74:	415b      	adcs	r3, r3
 8005b76:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b7c:	1912      	adds	r2, r2, r4
 8005b7e:	eb45 0303 	adc.w	r3, r5, r3
 8005b82:	f04f 0000 	mov.w	r0, #0
 8005b86:	f04f 0100 	mov.w	r1, #0
 8005b8a:	00d9      	lsls	r1, r3, #3
 8005b8c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b90:	00d0      	lsls	r0, r2, #3
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	eb12 0a04 	adds.w	sl, r2, r4
 8005b9a:	eb43 0b05 	adc.w	fp, r3, r5
 8005b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f04f 0100 	mov.w	r1, #0
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	f04f 0300 	mov.w	r3, #0
 8005bb2:	008b      	lsls	r3, r1, #2
 8005bb4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bb8:	0082      	lsls	r2, r0, #2
 8005bba:	4650      	mov	r0, sl
 8005bbc:	4659      	mov	r1, fp
 8005bbe:	f7fa ff93 	bl	8000ae8 <__aeabi_uldivmod>
 8005bc2:	4602      	mov	r2, r0
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	4bb3      	ldr	r3, [pc, #716]	; (8005e94 <UART_SetConfig+0x734>)
 8005bc8:	fba3 2302 	umull	r2, r3, r3, r2
 8005bcc:	095b      	lsrs	r3, r3, #5
 8005bce:	011e      	lsls	r6, r3, #4
 8005bd0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f04f 0100 	mov.w	r1, #0
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	1894      	adds	r4, r2, r2
 8005be0:	623c      	str	r4, [r7, #32]
 8005be2:	415b      	adcs	r3, r3
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
 8005be6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005bea:	1812      	adds	r2, r2, r0
 8005bec:	eb41 0303 	adc.w	r3, r1, r3
 8005bf0:	f04f 0400 	mov.w	r4, #0
 8005bf4:	f04f 0500 	mov.w	r5, #0
 8005bf8:	00dd      	lsls	r5, r3, #3
 8005bfa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bfe:	00d4      	lsls	r4, r2, #3
 8005c00:	4622      	mov	r2, r4
 8005c02:	462b      	mov	r3, r5
 8005c04:	1814      	adds	r4, r2, r0
 8005c06:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8005c0a:	414b      	adcs	r3, r1
 8005c0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f04f 0100 	mov.w	r1, #0
 8005c1c:	f04f 0200 	mov.w	r2, #0
 8005c20:	f04f 0300 	mov.w	r3, #0
 8005c24:	008b      	lsls	r3, r1, #2
 8005c26:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c2a:	0082      	lsls	r2, r0, #2
 8005c2c:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8005c30:	f7fa ff5a 	bl	8000ae8 <__aeabi_uldivmod>
 8005c34:	4602      	mov	r2, r0
 8005c36:	460b      	mov	r3, r1
 8005c38:	4b96      	ldr	r3, [pc, #600]	; (8005e94 <UART_SetConfig+0x734>)
 8005c3a:	fba3 1302 	umull	r1, r3, r3, r2
 8005c3e:	095b      	lsrs	r3, r3, #5
 8005c40:	2164      	movs	r1, #100	; 0x64
 8005c42:	fb01 f303 	mul.w	r3, r1, r3
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	011b      	lsls	r3, r3, #4
 8005c4a:	3332      	adds	r3, #50	; 0x32
 8005c4c:	4a91      	ldr	r2, [pc, #580]	; (8005e94 <UART_SetConfig+0x734>)
 8005c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c52:	095b      	lsrs	r3, r3, #5
 8005c54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c58:	441e      	add	r6, r3
 8005c5a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f04f 0100 	mov.w	r1, #0
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	1894      	adds	r4, r2, r2
 8005c6a:	61bc      	str	r4, [r7, #24]
 8005c6c:	415b      	adcs	r3, r3
 8005c6e:	61fb      	str	r3, [r7, #28]
 8005c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c74:	1812      	adds	r2, r2, r0
 8005c76:	eb41 0303 	adc.w	r3, r1, r3
 8005c7a:	f04f 0400 	mov.w	r4, #0
 8005c7e:	f04f 0500 	mov.w	r5, #0
 8005c82:	00dd      	lsls	r5, r3, #3
 8005c84:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005c88:	00d4      	lsls	r4, r2, #3
 8005c8a:	4622      	mov	r2, r4
 8005c8c:	462b      	mov	r3, r5
 8005c8e:	1814      	adds	r4, r2, r0
 8005c90:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8005c94:	414b      	adcs	r3, r1
 8005c96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f04f 0100 	mov.w	r1, #0
 8005ca6:	f04f 0200 	mov.w	r2, #0
 8005caa:	f04f 0300 	mov.w	r3, #0
 8005cae:	008b      	lsls	r3, r1, #2
 8005cb0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005cb4:	0082      	lsls	r2, r0, #2
 8005cb6:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005cba:	f7fa ff15 	bl	8000ae8 <__aeabi_uldivmod>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	4b74      	ldr	r3, [pc, #464]	; (8005e94 <UART_SetConfig+0x734>)
 8005cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8005cc8:	095b      	lsrs	r3, r3, #5
 8005cca:	2164      	movs	r1, #100	; 0x64
 8005ccc:	fb01 f303 	mul.w	r3, r1, r3
 8005cd0:	1ad3      	subs	r3, r2, r3
 8005cd2:	011b      	lsls	r3, r3, #4
 8005cd4:	3332      	adds	r3, #50	; 0x32
 8005cd6:	4a6f      	ldr	r2, [pc, #444]	; (8005e94 <UART_SetConfig+0x734>)
 8005cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	f003 020f 	and.w	r2, r3, #15
 8005ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4432      	add	r2, r6
 8005cea:	609a      	str	r2, [r3, #8]
 8005cec:	e0c9      	b.n	8005e82 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cee:	f7fe fda7 	bl	8004840 <HAL_RCC_GetPCLK1Freq>
 8005cf2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cf6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cfa:	461c      	mov	r4, r3
 8005cfc:	f04f 0500 	mov.w	r5, #0
 8005d00:	4622      	mov	r2, r4
 8005d02:	462b      	mov	r3, r5
 8005d04:	1891      	adds	r1, r2, r2
 8005d06:	6139      	str	r1, [r7, #16]
 8005d08:	415b      	adcs	r3, r3
 8005d0a:	617b      	str	r3, [r7, #20]
 8005d0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d10:	1912      	adds	r2, r2, r4
 8005d12:	eb45 0303 	adc.w	r3, r5, r3
 8005d16:	f04f 0000 	mov.w	r0, #0
 8005d1a:	f04f 0100 	mov.w	r1, #0
 8005d1e:	00d9      	lsls	r1, r3, #3
 8005d20:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d24:	00d0      	lsls	r0, r2, #3
 8005d26:	4602      	mov	r2, r0
 8005d28:	460b      	mov	r3, r1
 8005d2a:	eb12 0804 	adds.w	r8, r2, r4
 8005d2e:	eb43 0905 	adc.w	r9, r3, r5
 8005d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f04f 0100 	mov.w	r1, #0
 8005d3e:	f04f 0200 	mov.w	r2, #0
 8005d42:	f04f 0300 	mov.w	r3, #0
 8005d46:	008b      	lsls	r3, r1, #2
 8005d48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d4c:	0082      	lsls	r2, r0, #2
 8005d4e:	4640      	mov	r0, r8
 8005d50:	4649      	mov	r1, r9
 8005d52:	f7fa fec9 	bl	8000ae8 <__aeabi_uldivmod>
 8005d56:	4602      	mov	r2, r0
 8005d58:	460b      	mov	r3, r1
 8005d5a:	4b4e      	ldr	r3, [pc, #312]	; (8005e94 <UART_SetConfig+0x734>)
 8005d5c:	fba3 2302 	umull	r2, r3, r3, r2
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	011e      	lsls	r6, r3, #4
 8005d64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f04f 0100 	mov.w	r1, #0
 8005d6e:	4602      	mov	r2, r0
 8005d70:	460b      	mov	r3, r1
 8005d72:	1894      	adds	r4, r2, r2
 8005d74:	60bc      	str	r4, [r7, #8]
 8005d76:	415b      	adcs	r3, r3
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d7e:	1812      	adds	r2, r2, r0
 8005d80:	eb41 0303 	adc.w	r3, r1, r3
 8005d84:	f04f 0400 	mov.w	r4, #0
 8005d88:	f04f 0500 	mov.w	r5, #0
 8005d8c:	00dd      	lsls	r5, r3, #3
 8005d8e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d92:	00d4      	lsls	r4, r2, #3
 8005d94:	4622      	mov	r2, r4
 8005d96:	462b      	mov	r3, r5
 8005d98:	1814      	adds	r4, r2, r0
 8005d9a:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005d9e:	414b      	adcs	r3, r1
 8005da0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	4618      	mov	r0, r3
 8005dac:	f04f 0100 	mov.w	r1, #0
 8005db0:	f04f 0200 	mov.w	r2, #0
 8005db4:	f04f 0300 	mov.w	r3, #0
 8005db8:	008b      	lsls	r3, r1, #2
 8005dba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005dbe:	0082      	lsls	r2, r0, #2
 8005dc0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005dc4:	f7fa fe90 	bl	8000ae8 <__aeabi_uldivmod>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4b31      	ldr	r3, [pc, #196]	; (8005e94 <UART_SetConfig+0x734>)
 8005dce:	fba3 1302 	umull	r1, r3, r3, r2
 8005dd2:	095b      	lsrs	r3, r3, #5
 8005dd4:	2164      	movs	r1, #100	; 0x64
 8005dd6:	fb01 f303 	mul.w	r3, r1, r3
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	3332      	adds	r3, #50	; 0x32
 8005de0:	4a2c      	ldr	r2, [pc, #176]	; (8005e94 <UART_SetConfig+0x734>)
 8005de2:	fba2 2303 	umull	r2, r3, r2, r3
 8005de6:	095b      	lsrs	r3, r3, #5
 8005de8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005dec:	441e      	add	r6, r3
 8005dee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005df2:	4618      	mov	r0, r3
 8005df4:	f04f 0100 	mov.w	r1, #0
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	1894      	adds	r4, r2, r2
 8005dfe:	603c      	str	r4, [r7, #0]
 8005e00:	415b      	adcs	r3, r3
 8005e02:	607b      	str	r3, [r7, #4]
 8005e04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e08:	1812      	adds	r2, r2, r0
 8005e0a:	eb41 0303 	adc.w	r3, r1, r3
 8005e0e:	f04f 0400 	mov.w	r4, #0
 8005e12:	f04f 0500 	mov.w	r5, #0
 8005e16:	00dd      	lsls	r5, r3, #3
 8005e18:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e1c:	00d4      	lsls	r4, r2, #3
 8005e1e:	4622      	mov	r2, r4
 8005e20:	462b      	mov	r3, r5
 8005e22:	1814      	adds	r4, r2, r0
 8005e24:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8005e28:	414b      	adcs	r3, r1
 8005e2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f04f 0100 	mov.w	r1, #0
 8005e3a:	f04f 0200 	mov.w	r2, #0
 8005e3e:	f04f 0300 	mov.w	r3, #0
 8005e42:	008b      	lsls	r3, r1, #2
 8005e44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e48:	0082      	lsls	r2, r0, #2
 8005e4a:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005e4e:	f7fa fe4b 	bl	8000ae8 <__aeabi_uldivmod>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4b0f      	ldr	r3, [pc, #60]	; (8005e94 <UART_SetConfig+0x734>)
 8005e58:	fba3 1302 	umull	r1, r3, r3, r2
 8005e5c:	095b      	lsrs	r3, r3, #5
 8005e5e:	2164      	movs	r1, #100	; 0x64
 8005e60:	fb01 f303 	mul.w	r3, r1, r3
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	011b      	lsls	r3, r3, #4
 8005e68:	3332      	adds	r3, #50	; 0x32
 8005e6a:	4a0a      	ldr	r2, [pc, #40]	; (8005e94 <UART_SetConfig+0x734>)
 8005e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e70:	095b      	lsrs	r3, r3, #5
 8005e72:	f003 020f 	and.w	r2, r3, #15
 8005e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4432      	add	r2, r6
 8005e7e:	609a      	str	r2, [r3, #8]
}
 8005e80:	e7ff      	b.n	8005e82 <UART_SetConfig+0x722>
 8005e82:	bf00      	nop
 8005e84:	37f4      	adds	r7, #244	; 0xf4
 8005e86:	46bd      	mov	sp, r7
 8005e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8c:	40011000 	.word	0x40011000
 8005e90:	40011400 	.word	0x40011400
 8005e94:	51eb851f 	.word	0x51eb851f

08005e98 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005eaa:	2b84      	cmp	r3, #132	; 0x84
 8005eac:	d005      	beq.n	8005eba <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005eae:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	3303      	adds	r3, #3
 8005eb8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005eba:	68fb      	ldr	r3, [r7, #12]
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ece:	f3ef 8305 	mrs	r3, IPSR
 8005ed2:	607b      	str	r3, [r7, #4]
  return(result);
 8005ed4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	bf14      	ite	ne
 8005eda:	2301      	movne	r3, #1
 8005edc:	2300      	moveq	r3, #0
 8005ede:	b2db      	uxtb	r3, r3
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005ef0:	f001 f902 	bl	80070f8 <vTaskStartScheduler>
  
  return osOK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005efa:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005efc:	b089      	sub	sp, #36	; 0x24
 8005efe:	af04      	add	r7, sp, #16
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d020      	beq.n	8005f4e <osThreadCreate+0x54>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01c      	beq.n	8005f4e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685c      	ldr	r4, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681d      	ldr	r5, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	691e      	ldr	r6, [r3, #16]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7ff ffb6 	bl	8005e98 <makeFreeRtosPriority>
 8005f2c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f36:	9202      	str	r2, [sp, #8]
 8005f38:	9301      	str	r3, [sp, #4]
 8005f3a:	9100      	str	r1, [sp, #0]
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	4632      	mov	r2, r6
 8005f40:	4629      	mov	r1, r5
 8005f42:	4620      	mov	r0, r4
 8005f44:	f000 ff10 	bl	8006d68 <xTaskCreateStatic>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	e01c      	b.n	8005f88 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685c      	ldr	r4, [r3, #4]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005f5a:	b29e      	uxth	r6, r3
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff ff98 	bl	8005e98 <makeFreeRtosPriority>
 8005f68:	4602      	mov	r2, r0
 8005f6a:	f107 030c 	add.w	r3, r7, #12
 8005f6e:	9301      	str	r3, [sp, #4]
 8005f70:	9200      	str	r2, [sp, #0]
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	4632      	mov	r2, r6
 8005f76:	4629      	mov	r1, r5
 8005f78:	4620      	mov	r0, r4
 8005f7a:	f000 ff52 	bl	8006e22 <xTaskCreate>
 8005f7e:	4603      	mov	r3, r0
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d001      	beq.n	8005f88 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	e000      	b.n	8005f8a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005f88:	68fb      	ldr	r3, [r7, #12]
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	3714      	adds	r7, #20
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005f92 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005f92:	b580      	push	{r7, lr}
 8005f94:	b084      	sub	sp, #16
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d001      	beq.n	8005fa8 <osDelay+0x16>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	e000      	b.n	8005faa <osDelay+0x18>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	4618      	mov	r0, r3
 8005fac:	f001 f870 	bl	8007090 <vTaskDelay>
  
  return osOK;
 8005fb0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005fba:	b590      	push	{r4, r7, lr}
 8005fbc:	b085      	sub	sp, #20
 8005fbe:	af02      	add	r7, sp, #8
 8005fc0:	6078      	str	r0, [r7, #4]
 8005fc2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d011      	beq.n	8005ff0 <osMessageCreate+0x36>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	68db      	ldr	r3, [r3, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00d      	beq.n	8005ff0 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6859      	ldr	r1, [r3, #4]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	2400      	movs	r4, #0
 8005fe6:	9400      	str	r4, [sp, #0]
 8005fe8:	f000 f9e0 	bl	80063ac <xQueueGenericCreateStatic>
 8005fec:	4603      	mov	r3, r0
 8005fee:	e008      	b.n	8006002 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6818      	ldr	r0, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	f000 fa4e 	bl	800649c <xQueueGenericCreate>
 8006000:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006002:	4618      	mov	r0, r3
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	bd90      	pop	{r4, r7, pc}
	...

0800600c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8006018:	2300      	movs	r3, #0
 800601a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <osMessagePut+0x1e>
    ticks = 1;
 8006026:	2301      	movs	r3, #1
 8006028:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800602a:	f7ff ff4d 	bl	8005ec8 <inHandlerMode>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d018      	beq.n	8006066 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8006034:	f107 0210 	add.w	r2, r7, #16
 8006038:	f107 0108 	add.w	r1, r7, #8
 800603c:	2300      	movs	r3, #0
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 fb8a 	bl	8006758 <xQueueGenericSendFromISR>
 8006044:	4603      	mov	r3, r0
 8006046:	2b01      	cmp	r3, #1
 8006048:	d001      	beq.n	800604e <osMessagePut+0x42>
      return osErrorOS;
 800604a:	23ff      	movs	r3, #255	; 0xff
 800604c:	e018      	b.n	8006080 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d014      	beq.n	800607e <osMessagePut+0x72>
 8006054:	4b0c      	ldr	r3, [pc, #48]	; (8006088 <osMessagePut+0x7c>)
 8006056:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	e00b      	b.n	800607e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8006066:	f107 0108 	add.w	r1, r7, #8
 800606a:	2300      	movs	r3, #0
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	68f8      	ldr	r0, [r7, #12]
 8006070:	f000 fa74 	bl	800655c <xQueueGenericSend>
 8006074:	4603      	mov	r3, r0
 8006076:	2b01      	cmp	r3, #1
 8006078:	d001      	beq.n	800607e <osMessagePut+0x72>
      return osErrorOS;
 800607a:	23ff      	movs	r3, #255	; 0xff
 800607c:	e000      	b.n	8006080 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	e000ed04 	.word	0xe000ed04

0800608c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800608c:	b590      	push	{r4, r7, lr}
 800608e:	b08b      	sub	sp, #44	; 0x2c
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10a      	bne.n	80060bc <osMessageGet+0x30>
    event.status = osErrorParameter;
 80060a6:	2380      	movs	r3, #128	; 0x80
 80060a8:	617b      	str	r3, [r7, #20]
    return event;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	461c      	mov	r4, r3
 80060ae:	f107 0314 	add.w	r3, r7, #20
 80060b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80060b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80060ba:	e054      	b.n	8006166 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80060bc:	2300      	movs	r3, #0
 80060be:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ca:	d103      	bne.n	80060d4 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80060cc:	f04f 33ff 	mov.w	r3, #4294967295
 80060d0:	627b      	str	r3, [r7, #36]	; 0x24
 80060d2:	e009      	b.n	80060e8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d006      	beq.n	80060e8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d101      	bne.n	80060e8 <osMessageGet+0x5c>
      ticks = 1;
 80060e4:	2301      	movs	r3, #1
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80060e8:	f7ff feee 	bl	8005ec8 <inHandlerMode>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d01c      	beq.n	800612c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80060f2:	f107 0220 	add.w	r2, r7, #32
 80060f6:	f107 0314 	add.w	r3, r7, #20
 80060fa:	3304      	adds	r3, #4
 80060fc:	4619      	mov	r1, r3
 80060fe:	68b8      	ldr	r0, [r7, #8]
 8006100:	f000 fca2 	bl	8006a48 <xQueueReceiveFromISR>
 8006104:	4603      	mov	r3, r0
 8006106:	2b01      	cmp	r3, #1
 8006108:	d102      	bne.n	8006110 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800610a:	2310      	movs	r3, #16
 800610c:	617b      	str	r3, [r7, #20]
 800610e:	e001      	b.n	8006114 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d01d      	beq.n	8006156 <osMessageGet+0xca>
 800611a:	4b15      	ldr	r3, [pc, #84]	; (8006170 <osMessageGet+0xe4>)
 800611c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006120:	601a      	str	r2, [r3, #0]
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	f3bf 8f6f 	isb	sy
 800612a:	e014      	b.n	8006156 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800612c:	f107 0314 	add.w	r3, r7, #20
 8006130:	3304      	adds	r3, #4
 8006132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006134:	4619      	mov	r1, r3
 8006136:	68b8      	ldr	r0, [r7, #8]
 8006138:	f000 fba6 	bl	8006888 <xQueueReceive>
 800613c:	4603      	mov	r3, r0
 800613e:	2b01      	cmp	r3, #1
 8006140:	d102      	bne.n	8006148 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8006142:	2310      	movs	r3, #16
 8006144:	617b      	str	r3, [r7, #20]
 8006146:	e006      	b.n	8006156 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8006148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614a:	2b00      	cmp	r3, #0
 800614c:	d101      	bne.n	8006152 <osMessageGet+0xc6>
 800614e:	2300      	movs	r3, #0
 8006150:	e000      	b.n	8006154 <osMessageGet+0xc8>
 8006152:	2340      	movs	r3, #64	; 0x40
 8006154:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	461c      	mov	r4, r3
 800615a:	f107 0314 	add.w	r3, r7, #20
 800615e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006162:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	372c      	adds	r7, #44	; 0x2c
 800616a:	46bd      	mov	sp, r7
 800616c:	bd90      	pop	{r4, r7, pc}
 800616e:	bf00      	nop
 8006170:	e000ed04 	.word	0xe000ed04

08006174 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f103 0208 	add.w	r2, r3, #8
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f04f 32ff 	mov.w	r2, #4294967295
 800618c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f103 0208 	add.w	r2, r3, #8
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f103 0208 	add.w	r2, r3, #8
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061ce:	b480      	push	{r7}
 80061d0:	b085      	sub	sp, #20
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	689b      	ldr	r3, [r3, #8]
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	683a      	ldr	r2, [r7, #0]
 80061f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	601a      	str	r2, [r3, #0]
}
 800620a:	bf00      	nop
 800620c:	3714      	adds	r7, #20
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d103      	bne.n	8006236 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	60fb      	str	r3, [r7, #12]
 8006234:	e00c      	b.n	8006250 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3308      	adds	r3, #8
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	e002      	b.n	8006244 <vListInsert+0x2e>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68ba      	ldr	r2, [r7, #8]
 800624c:	429a      	cmp	r2, r3
 800624e:	d2f6      	bcs.n	800623e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	683a      	ldr	r2, [r7, #0]
 800625e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	683a      	ldr	r2, [r7, #0]
 800626a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	601a      	str	r2, [r3, #0]
}
 800627c:	bf00      	nop
 800627e:	3714      	adds	r7, #20
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006288:	b480      	push	{r7}
 800628a:	b085      	sub	sp, #20
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	691b      	ldr	r3, [r3, #16]
 8006294:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	6892      	ldr	r2, [r2, #8]
 800629e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	6852      	ldr	r2, [r2, #4]
 80062a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d103      	bne.n	80062bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689a      	ldr	r2, [r3, #8]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	1e5a      	subs	r2, r3, #1
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3714      	adds	r7, #20
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d10a      	bne.n	8006306 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80062f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f4:	f383 8811 	msr	BASEPRI, r3
 80062f8:	f3bf 8f6f 	isb	sy
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006302:	bf00      	nop
 8006304:	e7fe      	b.n	8006304 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006306:	f001 fd2d 	bl	8007d64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006316:	fb01 f303 	mul.w	r3, r1, r3
 800631a:	441a      	add	r2, r3
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006336:	3b01      	subs	r3, #1
 8006338:	68f9      	ldr	r1, [r7, #12]
 800633a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800633c:	fb01 f303 	mul.w	r3, r1, r3
 8006340:	441a      	add	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	22ff      	movs	r2, #255	; 0xff
 800634a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	22ff      	movs	r2, #255	; 0xff
 8006352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d114      	bne.n	8006386 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d01a      	beq.n	800639a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3310      	adds	r3, #16
 8006368:	4618      	mov	r0, r3
 800636a:	f001 f907 	bl	800757c <xTaskRemoveFromEventList>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d012      	beq.n	800639a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006374:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <xQueueGenericReset+0xcc>)
 8006376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	e009      	b.n	800639a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3310      	adds	r3, #16
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff fef2 	bl	8006174 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	3324      	adds	r3, #36	; 0x24
 8006394:	4618      	mov	r0, r3
 8006396:	f7ff feed 	bl	8006174 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800639a:	f001 fd13 	bl	8007dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800639e:	2301      	movs	r3, #1
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b08e      	sub	sp, #56	; 0x38
 80063b0:	af02      	add	r7, sp, #8
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
 80063b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10a      	bne.n	80063d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063d2:	bf00      	nop
 80063d4:	e7fe      	b.n	80063d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10a      	bne.n	80063f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80063dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e0:	f383 8811 	msr	BASEPRI, r3
 80063e4:	f3bf 8f6f 	isb	sy
 80063e8:	f3bf 8f4f 	dsb	sy
 80063ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80063ee:	bf00      	nop
 80063f0:	e7fe      	b.n	80063f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d002      	beq.n	80063fe <xQueueGenericCreateStatic+0x52>
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d001      	beq.n	8006402 <xQueueGenericCreateStatic+0x56>
 80063fe:	2301      	movs	r3, #1
 8006400:	e000      	b.n	8006404 <xQueueGenericCreateStatic+0x58>
 8006402:	2300      	movs	r3, #0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d10a      	bne.n	800641e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800640c:	f383 8811 	msr	BASEPRI, r3
 8006410:	f3bf 8f6f 	isb	sy
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	623b      	str	r3, [r7, #32]
}
 800641a:	bf00      	nop
 800641c:	e7fe      	b.n	800641c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d102      	bne.n	800642a <xQueueGenericCreateStatic+0x7e>
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d101      	bne.n	800642e <xQueueGenericCreateStatic+0x82>
 800642a:	2301      	movs	r3, #1
 800642c:	e000      	b.n	8006430 <xQueueGenericCreateStatic+0x84>
 800642e:	2300      	movs	r3, #0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d10a      	bne.n	800644a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	61fb      	str	r3, [r7, #28]
}
 8006446:	bf00      	nop
 8006448:	e7fe      	b.n	8006448 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800644a:	2348      	movs	r3, #72	; 0x48
 800644c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2b48      	cmp	r3, #72	; 0x48
 8006452:	d00a      	beq.n	800646a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	61bb      	str	r3, [r7, #24]
}
 8006466:	bf00      	nop
 8006468:	e7fe      	b.n	8006468 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800646a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00d      	beq.n	8006492 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006478:	2201      	movs	r2, #1
 800647a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800647e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	4613      	mov	r3, r2
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 f845 	bl	800651c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006494:	4618      	mov	r0, r3
 8006496:	3730      	adds	r7, #48	; 0x30
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800649c:	b580      	push	{r7, lr}
 800649e:	b08a      	sub	sp, #40	; 0x28
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	4613      	mov	r3, r2
 80064a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d10a      	bne.n	80064c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80064b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b4:	f383 8811 	msr	BASEPRI, r3
 80064b8:	f3bf 8f6f 	isb	sy
 80064bc:	f3bf 8f4f 	dsb	sy
 80064c0:	613b      	str	r3, [r7, #16]
}
 80064c2:	bf00      	nop
 80064c4:	e7fe      	b.n	80064c4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d102      	bne.n	80064d2 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80064cc:	2300      	movs	r3, #0
 80064ce:	61fb      	str	r3, [r7, #28]
 80064d0:	e004      	b.n	80064dc <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	fb02 f303 	mul.w	r3, r2, r3
 80064da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	3348      	adds	r3, #72	; 0x48
 80064e0:	4618      	mov	r0, r3
 80064e2:	f001 fd61 	bl	8007fa8 <pvPortMalloc>
 80064e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d011      	beq.n	8006512 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	3348      	adds	r3, #72	; 0x48
 80064f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	2200      	movs	r2, #0
 80064fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006500:	79fa      	ldrb	r2, [r7, #7]
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	9300      	str	r3, [sp, #0]
 8006506:	4613      	mov	r3, r2
 8006508:	697a      	ldr	r2, [r7, #20]
 800650a:	68b9      	ldr	r1, [r7, #8]
 800650c:	68f8      	ldr	r0, [r7, #12]
 800650e:	f000 f805 	bl	800651c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006512:	69bb      	ldr	r3, [r7, #24]
	}
 8006514:	4618      	mov	r0, r3
 8006516:	3720      	adds	r7, #32
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}

0800651c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
 8006528:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d103      	bne.n	8006538 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	69ba      	ldr	r2, [r7, #24]
 8006534:	601a      	str	r2, [r3, #0]
 8006536:	e002      	b.n	800653e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006544:	69bb      	ldr	r3, [r7, #24]
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800654a:	2101      	movs	r1, #1
 800654c:	69b8      	ldr	r0, [r7, #24]
 800654e:	f7ff fec5 	bl	80062dc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006552:	bf00      	nop
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b08e      	sub	sp, #56	; 0x38
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800656a:	2300      	movs	r3, #0
 800656c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <xQueueGenericSend+0x32>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d103      	bne.n	800659c <xQueueGenericSend+0x40>
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	d101      	bne.n	80065a0 <xQueueGenericSend+0x44>
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <xQueueGenericSend+0x46>
 80065a0:	2300      	movs	r3, #0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d10a      	bne.n	80065bc <xQueueGenericSend+0x60>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065b8:	bf00      	nop
 80065ba:	e7fe      	b.n	80065ba <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	d103      	bne.n	80065ca <xQueueGenericSend+0x6e>
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d101      	bne.n	80065ce <xQueueGenericSend+0x72>
 80065ca:	2301      	movs	r3, #1
 80065cc:	e000      	b.n	80065d0 <xQueueGenericSend+0x74>
 80065ce:	2300      	movs	r3, #0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10a      	bne.n	80065ea <xQueueGenericSend+0x8e>
	__asm volatile
 80065d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	623b      	str	r3, [r7, #32]
}
 80065e6:	bf00      	nop
 80065e8:	e7fe      	b.n	80065e8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065ea:	f001 f983 	bl	80078f4 <xTaskGetSchedulerState>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <xQueueGenericSend+0x9e>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d101      	bne.n	80065fe <xQueueGenericSend+0xa2>
 80065fa:	2301      	movs	r3, #1
 80065fc:	e000      	b.n	8006600 <xQueueGenericSend+0xa4>
 80065fe:	2300      	movs	r3, #0
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10a      	bne.n	800661a <xQueueGenericSend+0xbe>
	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	61fb      	str	r3, [r7, #28]
}
 8006616:	bf00      	nop
 8006618:	e7fe      	b.n	8006618 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800661a:	f001 fba3 	bl	8007d64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006626:	429a      	cmp	r2, r3
 8006628:	d302      	bcc.n	8006630 <xQueueGenericSend+0xd4>
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	2b02      	cmp	r3, #2
 800662e:	d129      	bne.n	8006684 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	68b9      	ldr	r1, [r7, #8]
 8006634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006636:	f000 fa87 	bl	8006b48 <prvCopyDataToQueue>
 800663a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	d010      	beq.n	8006666 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006646:	3324      	adds	r3, #36	; 0x24
 8006648:	4618      	mov	r0, r3
 800664a:	f000 ff97 	bl	800757c <xTaskRemoveFromEventList>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d013      	beq.n	800667c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006654:	4b3f      	ldr	r3, [pc, #252]	; (8006754 <xQueueGenericSend+0x1f8>)
 8006656:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800665a:	601a      	str	r2, [r3, #0]
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	e00a      	b.n	800667c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006668:	2b00      	cmp	r3, #0
 800666a:	d007      	beq.n	800667c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800666c:	4b39      	ldr	r3, [pc, #228]	; (8006754 <xQueueGenericSend+0x1f8>)
 800666e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006672:	601a      	str	r2, [r3, #0]
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800667c:	f001 fba2 	bl	8007dc4 <vPortExitCritical>
				return pdPASS;
 8006680:	2301      	movs	r3, #1
 8006682:	e063      	b.n	800674c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d103      	bne.n	8006692 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800668a:	f001 fb9b 	bl	8007dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800668e:	2300      	movs	r3, #0
 8006690:	e05c      	b.n	800674c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006694:	2b00      	cmp	r3, #0
 8006696:	d106      	bne.n	80066a6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006698:	f107 0314 	add.w	r3, r7, #20
 800669c:	4618      	mov	r0, r3
 800669e:	f000 ffcf 	bl	8007640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80066a2:	2301      	movs	r3, #1
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80066a6:	f001 fb8d 	bl	8007dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80066aa:	f000 fd85 	bl	80071b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80066ae:	f001 fb59 	bl	8007d64 <vPortEnterCritical>
 80066b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80066b8:	b25b      	sxtb	r3, r3
 80066ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066be:	d103      	bne.n	80066c8 <xQueueGenericSend+0x16c>
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80066ce:	b25b      	sxtb	r3, r3
 80066d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d4:	d103      	bne.n	80066de <xQueueGenericSend+0x182>
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80066de:	f001 fb71 	bl	8007dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066e2:	1d3a      	adds	r2, r7, #4
 80066e4:	f107 0314 	add.w	r3, r7, #20
 80066e8:	4611      	mov	r1, r2
 80066ea:	4618      	mov	r0, r3
 80066ec:	f000 ffbe 	bl	800766c <xTaskCheckForTimeOut>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d124      	bne.n	8006740 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80066f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80066f8:	f000 fb1e 	bl	8006d38 <prvIsQueueFull>
 80066fc:	4603      	mov	r3, r0
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d018      	beq.n	8006734 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	3310      	adds	r3, #16
 8006706:	687a      	ldr	r2, [r7, #4]
 8006708:	4611      	mov	r1, r2
 800670a:	4618      	mov	r0, r3
 800670c:	f000 ff12 	bl	8007534 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006710:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006712:	f000 faa9 	bl	8006c68 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006716:	f000 fd5d 	bl	80071d4 <xTaskResumeAll>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	f47f af7c 	bne.w	800661a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006722:	4b0c      	ldr	r3, [pc, #48]	; (8006754 <xQueueGenericSend+0x1f8>)
 8006724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	f3bf 8f6f 	isb	sy
 8006732:	e772      	b.n	800661a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006734:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006736:	f000 fa97 	bl	8006c68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800673a:	f000 fd4b 	bl	80071d4 <xTaskResumeAll>
 800673e:	e76c      	b.n	800661a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006742:	f000 fa91 	bl	8006c68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006746:	f000 fd45 	bl	80071d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800674a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800674c:	4618      	mov	r0, r3
 800674e:	3738      	adds	r7, #56	; 0x38
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	e000ed04 	.word	0xe000ed04

08006758 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b08e      	sub	sp, #56	; 0x38
 800675c:	af00      	add	r7, sp, #0
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	60b9      	str	r1, [r7, #8]
 8006762:	607a      	str	r2, [r7, #4]
 8006764:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800676a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800676c:	2b00      	cmp	r3, #0
 800676e:	d10a      	bne.n	8006786 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006782:	bf00      	nop
 8006784:	e7fe      	b.n	8006784 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d103      	bne.n	8006794 <xQueueGenericSendFromISR+0x3c>
 800678c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800678e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006790:	2b00      	cmp	r3, #0
 8006792:	d101      	bne.n	8006798 <xQueueGenericSendFromISR+0x40>
 8006794:	2301      	movs	r3, #1
 8006796:	e000      	b.n	800679a <xQueueGenericSendFromISR+0x42>
 8006798:	2300      	movs	r3, #0
 800679a:	2b00      	cmp	r3, #0
 800679c:	d10a      	bne.n	80067b4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	623b      	str	r3, [r7, #32]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	2b02      	cmp	r3, #2
 80067b8:	d103      	bne.n	80067c2 <xQueueGenericSendFromISR+0x6a>
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d101      	bne.n	80067c6 <xQueueGenericSendFromISR+0x6e>
 80067c2:	2301      	movs	r3, #1
 80067c4:	e000      	b.n	80067c8 <xQueueGenericSendFromISR+0x70>
 80067c6:	2300      	movs	r3, #0
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10a      	bne.n	80067e2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80067cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d0:	f383 8811 	msr	BASEPRI, r3
 80067d4:	f3bf 8f6f 	isb	sy
 80067d8:	f3bf 8f4f 	dsb	sy
 80067dc:	61fb      	str	r3, [r7, #28]
}
 80067de:	bf00      	nop
 80067e0:	e7fe      	b.n	80067e0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80067e2:	f001 fba1 	bl	8007f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80067e6:	f3ef 8211 	mrs	r2, BASEPRI
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	61ba      	str	r2, [r7, #24]
 80067fc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80067fe:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006800:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680a:	429a      	cmp	r2, r3
 800680c:	d302      	bcc.n	8006814 <xQueueGenericSendFromISR+0xbc>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	2b02      	cmp	r3, #2
 8006812:	d12c      	bne.n	800686e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800681a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800681e:	683a      	ldr	r2, [r7, #0]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006824:	f000 f990 	bl	8006b48 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006828:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800682c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006830:	d112      	bne.n	8006858 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	2b00      	cmp	r3, #0
 8006838:	d016      	beq.n	8006868 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800683a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800683c:	3324      	adds	r3, #36	; 0x24
 800683e:	4618      	mov	r0, r3
 8006840:	f000 fe9c 	bl	800757c <xTaskRemoveFromEventList>
 8006844:	4603      	mov	r3, r0
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00e      	beq.n	8006868 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	e007      	b.n	8006868 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006858:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800685c:	3301      	adds	r3, #1
 800685e:	b2db      	uxtb	r3, r3
 8006860:	b25a      	sxtb	r2, r3
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006868:	2301      	movs	r3, #1
 800686a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800686c:	e001      	b.n	8006872 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800686e:	2300      	movs	r3, #0
 8006870:	637b      	str	r3, [r7, #52]	; 0x34
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800687c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800687e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006880:	4618      	mov	r0, r3
 8006882:	3738      	adds	r7, #56	; 0x38
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b08c      	sub	sp, #48	; 0x30
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006894:	2300      	movs	r3, #0
 8006896:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10a      	bne.n	80068b8 <xQueueReceive+0x30>
	__asm volatile
 80068a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	623b      	str	r3, [r7, #32]
}
 80068b4:	bf00      	nop
 80068b6:	e7fe      	b.n	80068b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d103      	bne.n	80068c6 <xQueueReceive+0x3e>
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <xQueueReceive+0x42>
 80068c6:	2301      	movs	r3, #1
 80068c8:	e000      	b.n	80068cc <xQueueReceive+0x44>
 80068ca:	2300      	movs	r3, #0
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d10a      	bne.n	80068e6 <xQueueReceive+0x5e>
	__asm volatile
 80068d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d4:	f383 8811 	msr	BASEPRI, r3
 80068d8:	f3bf 8f6f 	isb	sy
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	61fb      	str	r3, [r7, #28]
}
 80068e2:	bf00      	nop
 80068e4:	e7fe      	b.n	80068e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80068e6:	f001 f805 	bl	80078f4 <xTaskGetSchedulerState>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d102      	bne.n	80068f6 <xQueueReceive+0x6e>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <xQueueReceive+0x72>
 80068f6:	2301      	movs	r3, #1
 80068f8:	e000      	b.n	80068fc <xQueueReceive+0x74>
 80068fa:	2300      	movs	r3, #0
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10a      	bne.n	8006916 <xQueueReceive+0x8e>
	__asm volatile
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	61bb      	str	r3, [r7, #24]
}
 8006912:	bf00      	nop
 8006914:	e7fe      	b.n	8006914 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006916:	f001 fa25 	bl	8007d64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800691a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006922:	2b00      	cmp	r3, #0
 8006924:	d01f      	beq.n	8006966 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006926:	68b9      	ldr	r1, [r7, #8]
 8006928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800692a:	f000 f977 	bl	8006c1c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800692e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006930:	1e5a      	subs	r2, r3, #1
 8006932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006934:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00f      	beq.n	800695e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800693e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006940:	3310      	adds	r3, #16
 8006942:	4618      	mov	r0, r3
 8006944:	f000 fe1a 	bl	800757c <xTaskRemoveFromEventList>
 8006948:	4603      	mov	r3, r0
 800694a:	2b00      	cmp	r3, #0
 800694c:	d007      	beq.n	800695e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800694e:	4b3d      	ldr	r3, [pc, #244]	; (8006a44 <xQueueReceive+0x1bc>)
 8006950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006954:	601a      	str	r2, [r3, #0]
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800695e:	f001 fa31 	bl	8007dc4 <vPortExitCritical>
				return pdPASS;
 8006962:	2301      	movs	r3, #1
 8006964:	e069      	b.n	8006a3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d103      	bne.n	8006974 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800696c:	f001 fa2a 	bl	8007dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006970:	2300      	movs	r3, #0
 8006972:	e062      	b.n	8006a3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006976:	2b00      	cmp	r3, #0
 8006978:	d106      	bne.n	8006988 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800697a:	f107 0310 	add.w	r3, r7, #16
 800697e:	4618      	mov	r0, r3
 8006980:	f000 fe5e 	bl	8007640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006984:	2301      	movs	r3, #1
 8006986:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006988:	f001 fa1c 	bl	8007dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800698c:	f000 fc14 	bl	80071b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006990:	f001 f9e8 	bl	8007d64 <vPortEnterCritical>
 8006994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800699a:	b25b      	sxtb	r3, r3
 800699c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069a0:	d103      	bne.n	80069aa <xQueueReceive+0x122>
 80069a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069a4:	2200      	movs	r2, #0
 80069a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80069b0:	b25b      	sxtb	r3, r3
 80069b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b6:	d103      	bne.n	80069c0 <xQueueReceive+0x138>
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	2200      	movs	r2, #0
 80069bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80069c0:	f001 fa00 	bl	8007dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80069c4:	1d3a      	adds	r2, r7, #4
 80069c6:	f107 0310 	add.w	r3, r7, #16
 80069ca:	4611      	mov	r1, r2
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fe4d 	bl	800766c <xTaskCheckForTimeOut>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d123      	bne.n	8006a20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069da:	f000 f997 	bl	8006d0c <prvIsQueueEmpty>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d017      	beq.n	8006a14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e6:	3324      	adds	r3, #36	; 0x24
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	4611      	mov	r1, r2
 80069ec:	4618      	mov	r0, r3
 80069ee:	f000 fda1 	bl	8007534 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80069f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069f4:	f000 f938 	bl	8006c68 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80069f8:	f000 fbec 	bl	80071d4 <xTaskResumeAll>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d189      	bne.n	8006916 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006a02:	4b10      	ldr	r3, [pc, #64]	; (8006a44 <xQueueReceive+0x1bc>)
 8006a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	f3bf 8f6f 	isb	sy
 8006a12:	e780      	b.n	8006916 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a16:	f000 f927 	bl	8006c68 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006a1a:	f000 fbdb 	bl	80071d4 <xTaskResumeAll>
 8006a1e:	e77a      	b.n	8006916 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a22:	f000 f921 	bl	8006c68 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006a26:	f000 fbd5 	bl	80071d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a2c:	f000 f96e 	bl	8006d0c <prvIsQueueEmpty>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	f43f af6f 	beq.w	8006916 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006a38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3730      	adds	r7, #48	; 0x30
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	e000ed04 	.word	0xe000ed04

08006a48 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b08e      	sub	sp, #56	; 0x38
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10a      	bne.n	8006a74 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	623b      	str	r3, [r7, #32]
}
 8006a70:	bf00      	nop
 8006a72:	e7fe      	b.n	8006a72 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d103      	bne.n	8006a82 <xQueueReceiveFromISR+0x3a>
 8006a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <xQueueReceiveFromISR+0x3e>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <xQueueReceiveFromISR+0x40>
 8006a86:	2300      	movs	r3, #0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d10a      	bne.n	8006aa2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	61fb      	str	r3, [r7, #28]
}
 8006a9e:	bf00      	nop
 8006aa0:	e7fe      	b.n	8006aa0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006aa2:	f001 fa41 	bl	8007f28 <vPortValidateInterruptPriority>
	__asm volatile
 8006aa6:	f3ef 8211 	mrs	r2, BASEPRI
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	61ba      	str	r2, [r7, #24]
 8006abc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006abe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ac6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d02f      	beq.n	8006b2e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ad4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ad8:	68b9      	ldr	r1, [r7, #8]
 8006ada:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006adc:	f000 f89e 	bl	8006c1c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae2:	1e5a      	subs	r2, r3, #1
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006ae8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af0:	d112      	bne.n	8006b18 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d016      	beq.n	8006b28 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	3310      	adds	r3, #16
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fd3c 	bl	800757c <xTaskRemoveFromEventList>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00e      	beq.n	8006b28 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00b      	beq.n	8006b28 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	e007      	b.n	8006b28 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	b25a      	sxtb	r2, r3
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006b2c:	e001      	b.n	8006b32 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	637b      	str	r3, [r7, #52]	; 0x34
 8006b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b34:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	f383 8811 	msr	BASEPRI, r3
}
 8006b3c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3738      	adds	r7, #56	; 0x38
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b54:	2300      	movs	r3, #0
 8006b56:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b5c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d10d      	bne.n	8006b82 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d14d      	bne.n	8006c0a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	689b      	ldr	r3, [r3, #8]
 8006b72:	4618      	mov	r0, r3
 8006b74:	f000 fedc 	bl	8007930 <xTaskPriorityDisinherit>
 8006b78:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	609a      	str	r2, [r3, #8]
 8006b80:	e043      	b.n	8006c0a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d119      	bne.n	8006bbc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	6858      	ldr	r0, [r3, #4]
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	461a      	mov	r2, r3
 8006b92:	68b9      	ldr	r1, [r7, #8]
 8006b94:	f001 fc0c 	bl	80083b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	685a      	ldr	r2, [r3, #4]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba0:	441a      	add	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	685a      	ldr	r2, [r3, #4]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d32b      	bcc.n	8006c0a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	605a      	str	r2, [r3, #4]
 8006bba:	e026      	b.n	8006c0a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	68d8      	ldr	r0, [r3, #12]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	f001 fbf2 	bl	80083b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	425b      	negs	r3, r3
 8006bd6:	441a      	add	r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	68da      	ldr	r2, [r3, #12]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d207      	bcs.n	8006bf8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf0:	425b      	negs	r3, r3
 8006bf2:	441a      	add	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d105      	bne.n	8006c0a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d002      	beq.n	8006c0a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	3b01      	subs	r3, #1
 8006c08:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	1c5a      	adds	r2, r3, #1
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006c12:	697b      	ldr	r3, [r7, #20]
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b082      	sub	sp, #8
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d018      	beq.n	8006c60 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68da      	ldr	r2, [r3, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c36:	441a      	add	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68da      	ldr	r2, [r3, #12]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d303      	bcc.n	8006c50 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68d9      	ldr	r1, [r3, #12]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c58:	461a      	mov	r2, r3
 8006c5a:	6838      	ldr	r0, [r7, #0]
 8006c5c:	f001 fba8 	bl	80083b0 <memcpy>
	}
}
 8006c60:	bf00      	nop
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b084      	sub	sp, #16
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c70:	f001 f878 	bl	8007d64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c7a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c7c:	e011      	b.n	8006ca2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d012      	beq.n	8006cac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3324      	adds	r3, #36	; 0x24
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fc76 	bl	800757c <xTaskRemoveFromEventList>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c96:	f000 fd4b 	bl	8007730 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	b2db      	uxtb	r3, r3
 8006ca0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	dce9      	bgt.n	8006c7e <prvUnlockQueue+0x16>
 8006caa:	e000      	b.n	8006cae <prvUnlockQueue+0x46>
					break;
 8006cac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	22ff      	movs	r2, #255	; 0xff
 8006cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006cb6:	f001 f885 	bl	8007dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006cba:	f001 f853 	bl	8007d64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cc4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cc6:	e011      	b.n	8006cec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	691b      	ldr	r3, [r3, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d012      	beq.n	8006cf6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3310      	adds	r3, #16
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	f000 fc51 	bl	800757c <xTaskRemoveFromEventList>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ce0:	f000 fd26 	bl	8007730 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	dce9      	bgt.n	8006cc8 <prvUnlockQueue+0x60>
 8006cf4:	e000      	b.n	8006cf8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006cf6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	22ff      	movs	r2, #255	; 0xff
 8006cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006d00:	f001 f860 	bl	8007dc4 <vPortExitCritical>
}
 8006d04:	bf00      	nop
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d14:	f001 f826 	bl	8007d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d102      	bne.n	8006d26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d20:	2301      	movs	r3, #1
 8006d22:	60fb      	str	r3, [r7, #12]
 8006d24:	e001      	b.n	8006d2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d26:	2300      	movs	r3, #0
 8006d28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d2a:	f001 f84b 	bl	8007dc4 <vPortExitCritical>

	return xReturn;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d40:	f001 f810 	bl	8007d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d102      	bne.n	8006d56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d50:	2301      	movs	r3, #1
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	e001      	b.n	8006d5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d56:	2300      	movs	r3, #0
 8006d58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d5a:	f001 f833 	bl	8007dc4 <vPortExitCritical>

	return xReturn;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b08e      	sub	sp, #56	; 0x38
 8006d6c:	af04      	add	r7, sp, #16
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
 8006d74:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	623b      	str	r3, [r7, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d10a      	bne.n	8006dae <xTaskCreateStatic+0x46>
	__asm volatile
 8006d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d9c:	f383 8811 	msr	BASEPRI, r3
 8006da0:	f3bf 8f6f 	isb	sy
 8006da4:	f3bf 8f4f 	dsb	sy
 8006da8:	61fb      	str	r3, [r7, #28]
}
 8006daa:	bf00      	nop
 8006dac:	e7fe      	b.n	8006dac <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006dae:	2354      	movs	r3, #84	; 0x54
 8006db0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	2b54      	cmp	r3, #84	; 0x54
 8006db6:	d00a      	beq.n	8006dce <xTaskCreateStatic+0x66>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	61bb      	str	r3, [r7, #24]
}
 8006dca:	bf00      	nop
 8006dcc:	e7fe      	b.n	8006dcc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006dce:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d01e      	beq.n	8006e14 <xTaskCreateStatic+0xac>
 8006dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d01b      	beq.n	8006e14 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006de4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de8:	2202      	movs	r2, #2
 8006dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006dee:	2300      	movs	r3, #0
 8006df0:	9303      	str	r3, [sp, #12]
 8006df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df4:	9302      	str	r3, [sp, #8]
 8006df6:	f107 0314 	add.w	r3, r7, #20
 8006dfa:	9301      	str	r3, [sp, #4]
 8006dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	68b9      	ldr	r1, [r7, #8]
 8006e06:	68f8      	ldr	r0, [r7, #12]
 8006e08:	f000 f850 	bl	8006eac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e0e:	f000 f8d5 	bl	8006fbc <prvAddNewTaskToReadyList>
 8006e12:	e001      	b.n	8006e18 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006e18:	697b      	ldr	r3, [r7, #20]
	}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3728      	adds	r7, #40	; 0x28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b08c      	sub	sp, #48	; 0x30
 8006e26:	af04      	add	r7, sp, #16
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	603b      	str	r3, [r7, #0]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4618      	mov	r0, r3
 8006e38:	f001 f8b6 	bl	8007fa8 <pvPortMalloc>
 8006e3c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d00e      	beq.n	8006e62 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006e44:	2054      	movs	r0, #84	; 0x54
 8006e46:	f001 f8af 	bl	8007fa8 <pvPortMalloc>
 8006e4a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d003      	beq.n	8006e5a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	631a      	str	r2, [r3, #48]	; 0x30
 8006e58:	e005      	b.n	8006e66 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e5a:	6978      	ldr	r0, [r7, #20]
 8006e5c:	f001 f968 	bl	8008130 <vPortFree>
 8006e60:	e001      	b.n	8006e66 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e62:	2300      	movs	r3, #0
 8006e64:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d017      	beq.n	8006e9c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e6c:	69fb      	ldr	r3, [r7, #28]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e74:	88fa      	ldrh	r2, [r7, #6]
 8006e76:	2300      	movs	r3, #0
 8006e78:	9303      	str	r3, [sp, #12]
 8006e7a:	69fb      	ldr	r3, [r7, #28]
 8006e7c:	9302      	str	r3, [sp, #8]
 8006e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	68b9      	ldr	r1, [r7, #8]
 8006e8a:	68f8      	ldr	r0, [r7, #12]
 8006e8c:	f000 f80e 	bl	8006eac <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e90:	69f8      	ldr	r0, [r7, #28]
 8006e92:	f000 f893 	bl	8006fbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e96:	2301      	movs	r3, #1
 8006e98:	61bb      	str	r3, [r7, #24]
 8006e9a:	e002      	b.n	8006ea2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8006ea0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ea2:	69bb      	ldr	r3, [r7, #24]
	}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3720      	adds	r7, #32
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
 8006eb8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ecc:	69bb      	ldr	r3, [r7, #24]
 8006ece:	f023 0307 	bic.w	r3, r3, #7
 8006ed2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	f003 0307 	and.w	r3, r3, #7
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	617b      	str	r3, [r7, #20]
}
 8006ef0:	bf00      	nop
 8006ef2:	e7fe      	b.n	8006ef2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ef4:	68bb      	ldr	r3, [r7, #8]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d01f      	beq.n	8006f3a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006efa:	2300      	movs	r3, #0
 8006efc:	61fb      	str	r3, [r7, #28]
 8006efe:	e012      	b.n	8006f26 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	4413      	add	r3, r2
 8006f06:	7819      	ldrb	r1, [r3, #0]
 8006f08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	3334      	adds	r3, #52	; 0x34
 8006f10:	460a      	mov	r2, r1
 8006f12:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006f14:	68ba      	ldr	r2, [r7, #8]
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	4413      	add	r3, r2
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d006      	beq.n	8006f2e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	3301      	adds	r3, #1
 8006f24:	61fb      	str	r3, [r7, #28]
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	2b0f      	cmp	r3, #15
 8006f2a:	d9e9      	bls.n	8006f00 <prvInitialiseNewTask+0x54>
 8006f2c:	e000      	b.n	8006f30 <prvInitialiseNewTask+0x84>
			{
				break;
 8006f2e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f38:	e003      	b.n	8006f42 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f44:	2b06      	cmp	r3, #6
 8006f46:	d901      	bls.n	8006f4c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f48:	2306      	movs	r3, #6
 8006f4a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f50:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f56:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f60:	3304      	adds	r3, #4
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff f926 	bl	80061b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	3318      	adds	r3, #24
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7ff f921 	bl	80061b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f76:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7a:	f1c3 0207 	rsb	r2, r3, #7
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f86:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	68f9      	ldr	r1, [r7, #12]
 8006f9a:	69b8      	ldr	r0, [r7, #24]
 8006f9c:	f000 fdb4 	bl	8007b08 <pxPortInitialiseStack>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fb2:	bf00      	nop
 8006fb4:	3720      	adds	r7, #32
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006fc4:	f000 fece 	bl	8007d64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006fc8:	4b2a      	ldr	r3, [pc, #168]	; (8007074 <prvAddNewTaskToReadyList+0xb8>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	4a29      	ldr	r2, [pc, #164]	; (8007074 <prvAddNewTaskToReadyList+0xb8>)
 8006fd0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006fd2:	4b29      	ldr	r3, [pc, #164]	; (8007078 <prvAddNewTaskToReadyList+0xbc>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d109      	bne.n	8006fee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006fda:	4a27      	ldr	r2, [pc, #156]	; (8007078 <prvAddNewTaskToReadyList+0xbc>)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006fe0:	4b24      	ldr	r3, [pc, #144]	; (8007074 <prvAddNewTaskToReadyList+0xb8>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d110      	bne.n	800700a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006fe8:	f000 fbc6 	bl	8007778 <prvInitialiseTaskLists>
 8006fec:	e00d      	b.n	800700a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006fee:	4b23      	ldr	r3, [pc, #140]	; (800707c <prvAddNewTaskToReadyList+0xc0>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d109      	bne.n	800700a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ff6:	4b20      	ldr	r3, [pc, #128]	; (8007078 <prvAddNewTaskToReadyList+0xbc>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	429a      	cmp	r2, r3
 8007002:	d802      	bhi.n	800700a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007004:	4a1c      	ldr	r2, [pc, #112]	; (8007078 <prvAddNewTaskToReadyList+0xbc>)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800700a:	4b1d      	ldr	r3, [pc, #116]	; (8007080 <prvAddNewTaskToReadyList+0xc4>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	3301      	adds	r3, #1
 8007010:	4a1b      	ldr	r2, [pc, #108]	; (8007080 <prvAddNewTaskToReadyList+0xc4>)
 8007012:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007018:	2201      	movs	r2, #1
 800701a:	409a      	lsls	r2, r3
 800701c:	4b19      	ldr	r3, [pc, #100]	; (8007084 <prvAddNewTaskToReadyList+0xc8>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4313      	orrs	r3, r2
 8007022:	4a18      	ldr	r2, [pc, #96]	; (8007084 <prvAddNewTaskToReadyList+0xc8>)
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702a:	4613      	mov	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4a15      	ldr	r2, [pc, #84]	; (8007088 <prvAddNewTaskToReadyList+0xcc>)
 8007034:	441a      	add	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	3304      	adds	r3, #4
 800703a:	4619      	mov	r1, r3
 800703c:	4610      	mov	r0, r2
 800703e:	f7ff f8c6 	bl	80061ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007042:	f000 febf 	bl	8007dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007046:	4b0d      	ldr	r3, [pc, #52]	; (800707c <prvAddNewTaskToReadyList+0xc0>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00e      	beq.n	800706c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800704e:	4b0a      	ldr	r3, [pc, #40]	; (8007078 <prvAddNewTaskToReadyList+0xbc>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007058:	429a      	cmp	r2, r3
 800705a:	d207      	bcs.n	800706c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800705c:	4b0b      	ldr	r3, [pc, #44]	; (800708c <prvAddNewTaskToReadyList+0xd0>)
 800705e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	f3bf 8f4f 	dsb	sy
 8007068:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800706c:	bf00      	nop
 800706e:	3708      	adds	r7, #8
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}
 8007074:	200003f4 	.word	0x200003f4
 8007078:	200002f4 	.word	0x200002f4
 800707c:	20000400 	.word	0x20000400
 8007080:	20000410 	.word	0x20000410
 8007084:	200003fc 	.word	0x200003fc
 8007088:	200002f8 	.word	0x200002f8
 800708c:	e000ed04 	.word	0xe000ed04

08007090 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007098:	2300      	movs	r3, #0
 800709a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d017      	beq.n	80070d2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80070a2:	4b13      	ldr	r3, [pc, #76]	; (80070f0 <vTaskDelay+0x60>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00a      	beq.n	80070c0 <vTaskDelay+0x30>
	__asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	60bb      	str	r3, [r7, #8]
}
 80070bc:	bf00      	nop
 80070be:	e7fe      	b.n	80070be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80070c0:	f000 f87a 	bl	80071b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070c4:	2100      	movs	r1, #0
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fcb8 	bl	8007a3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80070cc:	f000 f882 	bl	80071d4 <xTaskResumeAll>
 80070d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d107      	bne.n	80070e8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80070d8:	4b06      	ldr	r3, [pc, #24]	; (80070f4 <vTaskDelay+0x64>)
 80070da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	f3bf 8f4f 	dsb	sy
 80070e4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070e8:	bf00      	nop
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	2000041c 	.word	0x2000041c
 80070f4:	e000ed04 	.word	0xe000ed04

080070f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b08a      	sub	sp, #40	; 0x28
 80070fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007102:	2300      	movs	r3, #0
 8007104:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007106:	463a      	mov	r2, r7
 8007108:	1d39      	adds	r1, r7, #4
 800710a:	f107 0308 	add.w	r3, r7, #8
 800710e:	4618      	mov	r0, r3
 8007110:	f7f9 ff62 	bl	8000fd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007114:	6839      	ldr	r1, [r7, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	9202      	str	r2, [sp, #8]
 800711c:	9301      	str	r3, [sp, #4]
 800711e:	2300      	movs	r3, #0
 8007120:	9300      	str	r3, [sp, #0]
 8007122:	2300      	movs	r3, #0
 8007124:	460a      	mov	r2, r1
 8007126:	491e      	ldr	r1, [pc, #120]	; (80071a0 <vTaskStartScheduler+0xa8>)
 8007128:	481e      	ldr	r0, [pc, #120]	; (80071a4 <vTaskStartScheduler+0xac>)
 800712a:	f7ff fe1d 	bl	8006d68 <xTaskCreateStatic>
 800712e:	4603      	mov	r3, r0
 8007130:	4a1d      	ldr	r2, [pc, #116]	; (80071a8 <vTaskStartScheduler+0xb0>)
 8007132:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007134:	4b1c      	ldr	r3, [pc, #112]	; (80071a8 <vTaskStartScheduler+0xb0>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800713c:	2301      	movs	r3, #1
 800713e:	617b      	str	r3, [r7, #20]
 8007140:	e001      	b.n	8007146 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007142:	2300      	movs	r3, #0
 8007144:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d116      	bne.n	800717a <vTaskStartScheduler+0x82>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	613b      	str	r3, [r7, #16]
}
 800715e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007160:	4b12      	ldr	r3, [pc, #72]	; (80071ac <vTaskStartScheduler+0xb4>)
 8007162:	f04f 32ff 	mov.w	r2, #4294967295
 8007166:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007168:	4b11      	ldr	r3, [pc, #68]	; (80071b0 <vTaskStartScheduler+0xb8>)
 800716a:	2201      	movs	r2, #1
 800716c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800716e:	4b11      	ldr	r3, [pc, #68]	; (80071b4 <vTaskStartScheduler+0xbc>)
 8007170:	2200      	movs	r2, #0
 8007172:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007174:	f000 fd54 	bl	8007c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007178:	e00e      	b.n	8007198 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007180:	d10a      	bne.n	8007198 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	60fb      	str	r3, [r7, #12]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <vTaskStartScheduler+0x9e>
}
 8007198:	bf00      	nop
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	08009dc4 	.word	0x08009dc4
 80071a4:	08007749 	.word	0x08007749
 80071a8:	20000418 	.word	0x20000418
 80071ac:	20000414 	.word	0x20000414
 80071b0:	20000400 	.word	0x20000400
 80071b4:	200003f8 	.word	0x200003f8

080071b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80071bc:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <vTaskSuspendAll+0x18>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3301      	adds	r3, #1
 80071c2:	4a03      	ldr	r2, [pc, #12]	; (80071d0 <vTaskSuspendAll+0x18>)
 80071c4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80071c6:	bf00      	nop
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	2000041c 	.word	0x2000041c

080071d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071da:	2300      	movs	r3, #0
 80071dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071de:	2300      	movs	r3, #0
 80071e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071e2:	4b41      	ldr	r3, [pc, #260]	; (80072e8 <xTaskResumeAll+0x114>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10a      	bne.n	8007200 <xTaskResumeAll+0x2c>
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	603b      	str	r3, [r7, #0]
}
 80071fc:	bf00      	nop
 80071fe:	e7fe      	b.n	80071fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007200:	f000 fdb0 	bl	8007d64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007204:	4b38      	ldr	r3, [pc, #224]	; (80072e8 <xTaskResumeAll+0x114>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3b01      	subs	r3, #1
 800720a:	4a37      	ldr	r2, [pc, #220]	; (80072e8 <xTaskResumeAll+0x114>)
 800720c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800720e:	4b36      	ldr	r3, [pc, #216]	; (80072e8 <xTaskResumeAll+0x114>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d161      	bne.n	80072da <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007216:	4b35      	ldr	r3, [pc, #212]	; (80072ec <xTaskResumeAll+0x118>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d05d      	beq.n	80072da <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800721e:	e02e      	b.n	800727e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007220:	4b33      	ldr	r3, [pc, #204]	; (80072f0 <xTaskResumeAll+0x11c>)
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3318      	adds	r3, #24
 800722c:	4618      	mov	r0, r3
 800722e:	f7ff f82b 	bl	8006288 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	3304      	adds	r3, #4
 8007236:	4618      	mov	r0, r3
 8007238:	f7ff f826 	bl	8006288 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	2201      	movs	r2, #1
 8007242:	409a      	lsls	r2, r3
 8007244:	4b2b      	ldr	r3, [pc, #172]	; (80072f4 <xTaskResumeAll+0x120>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4313      	orrs	r3, r2
 800724a:	4a2a      	ldr	r2, [pc, #168]	; (80072f4 <xTaskResumeAll+0x120>)
 800724c:	6013      	str	r3, [r2, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007252:	4613      	mov	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	4a27      	ldr	r2, [pc, #156]	; (80072f8 <xTaskResumeAll+0x124>)
 800725c:	441a      	add	r2, r3
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3304      	adds	r3, #4
 8007262:	4619      	mov	r1, r3
 8007264:	4610      	mov	r0, r2
 8007266:	f7fe ffb2 	bl	80061ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726e:	4b23      	ldr	r3, [pc, #140]	; (80072fc <xTaskResumeAll+0x128>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007274:	429a      	cmp	r2, r3
 8007276:	d302      	bcc.n	800727e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007278:	4b21      	ldr	r3, [pc, #132]	; (8007300 <xTaskResumeAll+0x12c>)
 800727a:	2201      	movs	r2, #1
 800727c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800727e:	4b1c      	ldr	r3, [pc, #112]	; (80072f0 <xTaskResumeAll+0x11c>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1cc      	bne.n	8007220 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800728c:	f000 fb12 	bl	80078b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007290:	4b1c      	ldr	r3, [pc, #112]	; (8007304 <xTaskResumeAll+0x130>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d010      	beq.n	80072be <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800729c:	f000 f836 	bl	800730c <xTaskIncrementTick>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d002      	beq.n	80072ac <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80072a6:	4b16      	ldr	r3, [pc, #88]	; (8007300 <xTaskResumeAll+0x12c>)
 80072a8:	2201      	movs	r2, #1
 80072aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	3b01      	subs	r3, #1
 80072b0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1f1      	bne.n	800729c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80072b8:	4b12      	ldr	r3, [pc, #72]	; (8007304 <xTaskResumeAll+0x130>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072be:	4b10      	ldr	r3, [pc, #64]	; (8007300 <xTaskResumeAll+0x12c>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d009      	beq.n	80072da <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072c6:	2301      	movs	r3, #1
 80072c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072ca:	4b0f      	ldr	r3, [pc, #60]	; (8007308 <xTaskResumeAll+0x134>)
 80072cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	f3bf 8f4f 	dsb	sy
 80072d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072da:	f000 fd73 	bl	8007dc4 <vPortExitCritical>

	return xAlreadyYielded;
 80072de:	68bb      	ldr	r3, [r7, #8]
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	2000041c 	.word	0x2000041c
 80072ec:	200003f4 	.word	0x200003f4
 80072f0:	200003b4 	.word	0x200003b4
 80072f4:	200003fc 	.word	0x200003fc
 80072f8:	200002f8 	.word	0x200002f8
 80072fc:	200002f4 	.word	0x200002f4
 8007300:	20000408 	.word	0x20000408
 8007304:	20000404 	.word	0x20000404
 8007308:	e000ed04 	.word	0xe000ed04

0800730c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b086      	sub	sp, #24
 8007310:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007312:	2300      	movs	r3, #0
 8007314:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007316:	4b4e      	ldr	r3, [pc, #312]	; (8007450 <xTaskIncrementTick+0x144>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	f040 8088 	bne.w	8007430 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007320:	4b4c      	ldr	r3, [pc, #304]	; (8007454 <xTaskIncrementTick+0x148>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	3301      	adds	r3, #1
 8007326:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007328:	4a4a      	ldr	r2, [pc, #296]	; (8007454 <xTaskIncrementTick+0x148>)
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d120      	bne.n	8007376 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007334:	4b48      	ldr	r3, [pc, #288]	; (8007458 <xTaskIncrementTick+0x14c>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <xTaskIncrementTick+0x48>
	__asm volatile
 800733e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007342:	f383 8811 	msr	BASEPRI, r3
 8007346:	f3bf 8f6f 	isb	sy
 800734a:	f3bf 8f4f 	dsb	sy
 800734e:	603b      	str	r3, [r7, #0]
}
 8007350:	bf00      	nop
 8007352:	e7fe      	b.n	8007352 <xTaskIncrementTick+0x46>
 8007354:	4b40      	ldr	r3, [pc, #256]	; (8007458 <xTaskIncrementTick+0x14c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60fb      	str	r3, [r7, #12]
 800735a:	4b40      	ldr	r3, [pc, #256]	; (800745c <xTaskIncrementTick+0x150>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a3e      	ldr	r2, [pc, #248]	; (8007458 <xTaskIncrementTick+0x14c>)
 8007360:	6013      	str	r3, [r2, #0]
 8007362:	4a3e      	ldr	r2, [pc, #248]	; (800745c <xTaskIncrementTick+0x150>)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	6013      	str	r3, [r2, #0]
 8007368:	4b3d      	ldr	r3, [pc, #244]	; (8007460 <xTaskIncrementTick+0x154>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	3301      	adds	r3, #1
 800736e:	4a3c      	ldr	r2, [pc, #240]	; (8007460 <xTaskIncrementTick+0x154>)
 8007370:	6013      	str	r3, [r2, #0]
 8007372:	f000 fa9f 	bl	80078b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007376:	4b3b      	ldr	r3, [pc, #236]	; (8007464 <xTaskIncrementTick+0x158>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	429a      	cmp	r2, r3
 800737e:	d348      	bcc.n	8007412 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007380:	4b35      	ldr	r3, [pc, #212]	; (8007458 <xTaskIncrementTick+0x14c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d104      	bne.n	8007394 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800738a:	4b36      	ldr	r3, [pc, #216]	; (8007464 <xTaskIncrementTick+0x158>)
 800738c:	f04f 32ff 	mov.w	r2, #4294967295
 8007390:	601a      	str	r2, [r3, #0]
					break;
 8007392:	e03e      	b.n	8007412 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007394:	4b30      	ldr	r3, [pc, #192]	; (8007458 <xTaskIncrementTick+0x14c>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68db      	ldr	r3, [r3, #12]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d203      	bcs.n	80073b4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073ac:	4a2d      	ldr	r2, [pc, #180]	; (8007464 <xTaskIncrementTick+0x158>)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80073b2:	e02e      	b.n	8007412 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	3304      	adds	r3, #4
 80073b8:	4618      	mov	r0, r3
 80073ba:	f7fe ff65 	bl	8006288 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d004      	beq.n	80073d0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	3318      	adds	r3, #24
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fe ff5c 	bl	8006288 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d4:	2201      	movs	r2, #1
 80073d6:	409a      	lsls	r2, r3
 80073d8:	4b23      	ldr	r3, [pc, #140]	; (8007468 <xTaskIncrementTick+0x15c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4313      	orrs	r3, r2
 80073de:	4a22      	ldr	r2, [pc, #136]	; (8007468 <xTaskIncrementTick+0x15c>)
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	4a1f      	ldr	r2, [pc, #124]	; (800746c <xTaskIncrementTick+0x160>)
 80073f0:	441a      	add	r2, r3
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4619      	mov	r1, r3
 80073f8:	4610      	mov	r0, r2
 80073fa:	f7fe fee8 	bl	80061ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007402:	4b1b      	ldr	r3, [pc, #108]	; (8007470 <xTaskIncrementTick+0x164>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007408:	429a      	cmp	r2, r3
 800740a:	d3b9      	bcc.n	8007380 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800740c:	2301      	movs	r3, #1
 800740e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007410:	e7b6      	b.n	8007380 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007412:	4b17      	ldr	r3, [pc, #92]	; (8007470 <xTaskIncrementTick+0x164>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007418:	4914      	ldr	r1, [pc, #80]	; (800746c <xTaskIncrementTick+0x160>)
 800741a:	4613      	mov	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	440b      	add	r3, r1
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d907      	bls.n	800743a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800742a:	2301      	movs	r3, #1
 800742c:	617b      	str	r3, [r7, #20]
 800742e:	e004      	b.n	800743a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007430:	4b10      	ldr	r3, [pc, #64]	; (8007474 <xTaskIncrementTick+0x168>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	3301      	adds	r3, #1
 8007436:	4a0f      	ldr	r2, [pc, #60]	; (8007474 <xTaskIncrementTick+0x168>)
 8007438:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800743a:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <xTaskIncrementTick+0x16c>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007442:	2301      	movs	r3, #1
 8007444:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007446:	697b      	ldr	r3, [r7, #20]
}
 8007448:	4618      	mov	r0, r3
 800744a:	3718      	adds	r7, #24
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}
 8007450:	2000041c 	.word	0x2000041c
 8007454:	200003f8 	.word	0x200003f8
 8007458:	200003ac 	.word	0x200003ac
 800745c:	200003b0 	.word	0x200003b0
 8007460:	2000040c 	.word	0x2000040c
 8007464:	20000414 	.word	0x20000414
 8007468:	200003fc 	.word	0x200003fc
 800746c:	200002f8 	.word	0x200002f8
 8007470:	200002f4 	.word	0x200002f4
 8007474:	20000404 	.word	0x20000404
 8007478:	20000408 	.word	0x20000408

0800747c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800747c:	b480      	push	{r7}
 800747e:	b087      	sub	sp, #28
 8007480:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007482:	4b27      	ldr	r3, [pc, #156]	; (8007520 <vTaskSwitchContext+0xa4>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800748a:	4b26      	ldr	r3, [pc, #152]	; (8007524 <vTaskSwitchContext+0xa8>)
 800748c:	2201      	movs	r2, #1
 800748e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007490:	e03f      	b.n	8007512 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007492:	4b24      	ldr	r3, [pc, #144]	; (8007524 <vTaskSwitchContext+0xa8>)
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007498:	4b23      	ldr	r3, [pc, #140]	; (8007528 <vTaskSwitchContext+0xac>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	fab3 f383 	clz	r3, r3
 80074a4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80074a6:	7afb      	ldrb	r3, [r7, #11]
 80074a8:	f1c3 031f 	rsb	r3, r3, #31
 80074ac:	617b      	str	r3, [r7, #20]
 80074ae:	491f      	ldr	r1, [pc, #124]	; (800752c <vTaskSwitchContext+0xb0>)
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	4613      	mov	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	440b      	add	r3, r1
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d10a      	bne.n	80074d8 <vTaskSwitchContext+0x5c>
	__asm volatile
 80074c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	607b      	str	r3, [r7, #4]
}
 80074d4:	bf00      	nop
 80074d6:	e7fe      	b.n	80074d6 <vTaskSwitchContext+0x5a>
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	4613      	mov	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4413      	add	r3, r2
 80074e0:	009b      	lsls	r3, r3, #2
 80074e2:	4a12      	ldr	r2, [pc, #72]	; (800752c <vTaskSwitchContext+0xb0>)
 80074e4:	4413      	add	r3, r2
 80074e6:	613b      	str	r3, [r7, #16]
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	605a      	str	r2, [r3, #4]
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	685a      	ldr	r2, [r3, #4]
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	3308      	adds	r3, #8
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d104      	bne.n	8007508 <vTaskSwitchContext+0x8c>
 80074fe:	693b      	ldr	r3, [r7, #16]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	605a      	str	r2, [r3, #4]
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	4a08      	ldr	r2, [pc, #32]	; (8007530 <vTaskSwitchContext+0xb4>)
 8007510:	6013      	str	r3, [r2, #0]
}
 8007512:	bf00      	nop
 8007514:	371c      	adds	r7, #28
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	2000041c 	.word	0x2000041c
 8007524:	20000408 	.word	0x20000408
 8007528:	200003fc 	.word	0x200003fc
 800752c:	200002f8 	.word	0x200002f8
 8007530:	200002f4 	.word	0x200002f4

08007534 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10a      	bne.n	800755a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007548:	f383 8811 	msr	BASEPRI, r3
 800754c:	f3bf 8f6f 	isb	sy
 8007550:	f3bf 8f4f 	dsb	sy
 8007554:	60fb      	str	r3, [r7, #12]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800755a:	4b07      	ldr	r3, [pc, #28]	; (8007578 <vTaskPlaceOnEventList+0x44>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3318      	adds	r3, #24
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f7fe fe57 	bl	8006216 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007568:	2101      	movs	r1, #1
 800756a:	6838      	ldr	r0, [r7, #0]
 800756c:	f000 fa66 	bl	8007a3c <prvAddCurrentTaskToDelayedList>
}
 8007570:	bf00      	nop
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	200002f4 	.word	0x200002f4

0800757c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b086      	sub	sp, #24
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10a      	bne.n	80075a8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	60fb      	str	r3, [r7, #12]
}
 80075a4:	bf00      	nop
 80075a6:	e7fe      	b.n	80075a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	3318      	adds	r3, #24
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fe fe6b 	bl	8006288 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075b2:	4b1d      	ldr	r3, [pc, #116]	; (8007628 <xTaskRemoveFromEventList+0xac>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d11c      	bne.n	80075f4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	3304      	adds	r3, #4
 80075be:	4618      	mov	r0, r3
 80075c0:	f7fe fe62 	bl	8006288 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c8:	2201      	movs	r2, #1
 80075ca:	409a      	lsls	r2, r3
 80075cc:	4b17      	ldr	r3, [pc, #92]	; (800762c <xTaskRemoveFromEventList+0xb0>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4313      	orrs	r3, r2
 80075d2:	4a16      	ldr	r2, [pc, #88]	; (800762c <xTaskRemoveFromEventList+0xb0>)
 80075d4:	6013      	str	r3, [r2, #0]
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4a13      	ldr	r2, [pc, #76]	; (8007630 <xTaskRemoveFromEventList+0xb4>)
 80075e4:	441a      	add	r2, r3
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	3304      	adds	r3, #4
 80075ea:	4619      	mov	r1, r3
 80075ec:	4610      	mov	r0, r2
 80075ee:	f7fe fdee 	bl	80061ce <vListInsertEnd>
 80075f2:	e005      	b.n	8007600 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	3318      	adds	r3, #24
 80075f8:	4619      	mov	r1, r3
 80075fa:	480e      	ldr	r0, [pc, #56]	; (8007634 <xTaskRemoveFromEventList+0xb8>)
 80075fc:	f7fe fde7 	bl	80061ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007604:	4b0c      	ldr	r3, [pc, #48]	; (8007638 <xTaskRemoveFromEventList+0xbc>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800760a:	429a      	cmp	r2, r3
 800760c:	d905      	bls.n	800761a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800760e:	2301      	movs	r3, #1
 8007610:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007612:	4b0a      	ldr	r3, [pc, #40]	; (800763c <xTaskRemoveFromEventList+0xc0>)
 8007614:	2201      	movs	r2, #1
 8007616:	601a      	str	r2, [r3, #0]
 8007618:	e001      	b.n	800761e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800761a:	2300      	movs	r3, #0
 800761c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800761e:	697b      	ldr	r3, [r7, #20]
}
 8007620:	4618      	mov	r0, r3
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	2000041c 	.word	0x2000041c
 800762c:	200003fc 	.word	0x200003fc
 8007630:	200002f8 	.word	0x200002f8
 8007634:	200003b4 	.word	0x200003b4
 8007638:	200002f4 	.word	0x200002f4
 800763c:	20000408 	.word	0x20000408

08007640 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007648:	4b06      	ldr	r3, [pc, #24]	; (8007664 <vTaskInternalSetTimeOutState+0x24>)
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007650:	4b05      	ldr	r3, [pc, #20]	; (8007668 <vTaskInternalSetTimeOutState+0x28>)
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	605a      	str	r2, [r3, #4]
}
 8007658:	bf00      	nop
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	2000040c 	.word	0x2000040c
 8007668:	200003f8 	.word	0x200003f8

0800766c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b088      	sub	sp, #32
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10a      	bne.n	8007692 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	613b      	str	r3, [r7, #16]
}
 800768e:	bf00      	nop
 8007690:	e7fe      	b.n	8007690 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10a      	bne.n	80076ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	60fb      	str	r3, [r7, #12]
}
 80076aa:	bf00      	nop
 80076ac:	e7fe      	b.n	80076ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80076ae:	f000 fb59 	bl	8007d64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076b2:	4b1d      	ldr	r3, [pc, #116]	; (8007728 <xTaskCheckForTimeOut+0xbc>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	685b      	ldr	r3, [r3, #4]
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ca:	d102      	bne.n	80076d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076cc:	2300      	movs	r3, #0
 80076ce:	61fb      	str	r3, [r7, #28]
 80076d0:	e023      	b.n	800771a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	4b15      	ldr	r3, [pc, #84]	; (800772c <xTaskCheckForTimeOut+0xc0>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d007      	beq.n	80076ee <xTaskCheckForTimeOut+0x82>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	685b      	ldr	r3, [r3, #4]
 80076e2:	69ba      	ldr	r2, [r7, #24]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d302      	bcc.n	80076ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076e8:	2301      	movs	r3, #1
 80076ea:	61fb      	str	r3, [r7, #28]
 80076ec:	e015      	b.n	800771a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	697a      	ldr	r2, [r7, #20]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d20b      	bcs.n	8007710 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	1ad2      	subs	r2, r2, r3
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7ff ff9b 	bl	8007640 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800770a:	2300      	movs	r3, #0
 800770c:	61fb      	str	r3, [r7, #28]
 800770e:	e004      	b.n	800771a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007716:	2301      	movs	r3, #1
 8007718:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800771a:	f000 fb53 	bl	8007dc4 <vPortExitCritical>

	return xReturn;
 800771e:	69fb      	ldr	r3, [r7, #28]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3720      	adds	r7, #32
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	200003f8 	.word	0x200003f8
 800772c:	2000040c 	.word	0x2000040c

08007730 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007730:	b480      	push	{r7}
 8007732:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007734:	4b03      	ldr	r3, [pc, #12]	; (8007744 <vTaskMissedYield+0x14>)
 8007736:	2201      	movs	r2, #1
 8007738:	601a      	str	r2, [r3, #0]
}
 800773a:	bf00      	nop
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr
 8007744:	20000408 	.word	0x20000408

08007748 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007750:	f000 f852 	bl	80077f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007754:	4b06      	ldr	r3, [pc, #24]	; (8007770 <prvIdleTask+0x28>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d9f9      	bls.n	8007750 <prvIdleTask+0x8>
			{
				taskYIELD();
 800775c:	4b05      	ldr	r3, [pc, #20]	; (8007774 <prvIdleTask+0x2c>)
 800775e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007762:	601a      	str	r2, [r3, #0]
 8007764:	f3bf 8f4f 	dsb	sy
 8007768:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800776c:	e7f0      	b.n	8007750 <prvIdleTask+0x8>
 800776e:	bf00      	nop
 8007770:	200002f8 	.word	0x200002f8
 8007774:	e000ed04 	.word	0xe000ed04

08007778 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800777e:	2300      	movs	r3, #0
 8007780:	607b      	str	r3, [r7, #4]
 8007782:	e00c      	b.n	800779e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	4613      	mov	r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	4413      	add	r3, r2
 800778c:	009b      	lsls	r3, r3, #2
 800778e:	4a12      	ldr	r2, [pc, #72]	; (80077d8 <prvInitialiseTaskLists+0x60>)
 8007790:	4413      	add	r3, r2
 8007792:	4618      	mov	r0, r3
 8007794:	f7fe fcee 	bl	8006174 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3301      	adds	r3, #1
 800779c:	607b      	str	r3, [r7, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2b06      	cmp	r3, #6
 80077a2:	d9ef      	bls.n	8007784 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80077a4:	480d      	ldr	r0, [pc, #52]	; (80077dc <prvInitialiseTaskLists+0x64>)
 80077a6:	f7fe fce5 	bl	8006174 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80077aa:	480d      	ldr	r0, [pc, #52]	; (80077e0 <prvInitialiseTaskLists+0x68>)
 80077ac:	f7fe fce2 	bl	8006174 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077b0:	480c      	ldr	r0, [pc, #48]	; (80077e4 <prvInitialiseTaskLists+0x6c>)
 80077b2:	f7fe fcdf 	bl	8006174 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077b6:	480c      	ldr	r0, [pc, #48]	; (80077e8 <prvInitialiseTaskLists+0x70>)
 80077b8:	f7fe fcdc 	bl	8006174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077bc:	480b      	ldr	r0, [pc, #44]	; (80077ec <prvInitialiseTaskLists+0x74>)
 80077be:	f7fe fcd9 	bl	8006174 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077c2:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <prvInitialiseTaskLists+0x78>)
 80077c4:	4a05      	ldr	r2, [pc, #20]	; (80077dc <prvInitialiseTaskLists+0x64>)
 80077c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077c8:	4b0a      	ldr	r3, [pc, #40]	; (80077f4 <prvInitialiseTaskLists+0x7c>)
 80077ca:	4a05      	ldr	r2, [pc, #20]	; (80077e0 <prvInitialiseTaskLists+0x68>)
 80077cc:	601a      	str	r2, [r3, #0]
}
 80077ce:	bf00      	nop
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	200002f8 	.word	0x200002f8
 80077dc:	20000384 	.word	0x20000384
 80077e0:	20000398 	.word	0x20000398
 80077e4:	200003b4 	.word	0x200003b4
 80077e8:	200003c8 	.word	0x200003c8
 80077ec:	200003e0 	.word	0x200003e0
 80077f0:	200003ac 	.word	0x200003ac
 80077f4:	200003b0 	.word	0x200003b0

080077f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077fe:	e019      	b.n	8007834 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007800:	f000 fab0 	bl	8007d64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007804:	4b10      	ldr	r3, [pc, #64]	; (8007848 <prvCheckTasksWaitingTermination+0x50>)
 8007806:	68db      	ldr	r3, [r3, #12]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	3304      	adds	r3, #4
 8007810:	4618      	mov	r0, r3
 8007812:	f7fe fd39 	bl	8006288 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007816:	4b0d      	ldr	r3, [pc, #52]	; (800784c <prvCheckTasksWaitingTermination+0x54>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3b01      	subs	r3, #1
 800781c:	4a0b      	ldr	r2, [pc, #44]	; (800784c <prvCheckTasksWaitingTermination+0x54>)
 800781e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007820:	4b0b      	ldr	r3, [pc, #44]	; (8007850 <prvCheckTasksWaitingTermination+0x58>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3b01      	subs	r3, #1
 8007826:	4a0a      	ldr	r2, [pc, #40]	; (8007850 <prvCheckTasksWaitingTermination+0x58>)
 8007828:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800782a:	f000 facb 	bl	8007dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f810 	bl	8007854 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007834:	4b06      	ldr	r3, [pc, #24]	; (8007850 <prvCheckTasksWaitingTermination+0x58>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1e1      	bne.n	8007800 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800783c:	bf00      	nop
 800783e:	bf00      	nop
 8007840:	3708      	adds	r7, #8
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	200003c8 	.word	0x200003c8
 800784c:	200003f4 	.word	0x200003f4
 8007850:	200003dc 	.word	0x200003dc

08007854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007862:	2b00      	cmp	r3, #0
 8007864:	d108      	bne.n	8007878 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800786a:	4618      	mov	r0, r3
 800786c:	f000 fc60 	bl	8008130 <vPortFree>
				vPortFree( pxTCB );
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fc5d 	bl	8008130 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007876:	e018      	b.n	80078aa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800787e:	2b01      	cmp	r3, #1
 8007880:	d103      	bne.n	800788a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 fc54 	bl	8008130 <vPortFree>
	}
 8007888:	e00f      	b.n	80078aa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007890:	2b02      	cmp	r3, #2
 8007892:	d00a      	beq.n	80078aa <prvDeleteTCB+0x56>
	__asm volatile
 8007894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	60fb      	str	r3, [r7, #12]
}
 80078a6:	bf00      	nop
 80078a8:	e7fe      	b.n	80078a8 <prvDeleteTCB+0x54>
	}
 80078aa:	bf00      	nop
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078ba:	4b0c      	ldr	r3, [pc, #48]	; (80078ec <prvResetNextTaskUnblockTime+0x38>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d104      	bne.n	80078ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078c4:	4b0a      	ldr	r3, [pc, #40]	; (80078f0 <prvResetNextTaskUnblockTime+0x3c>)
 80078c6:	f04f 32ff 	mov.w	r2, #4294967295
 80078ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078cc:	e008      	b.n	80078e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078ce:	4b07      	ldr	r3, [pc, #28]	; (80078ec <prvResetNextTaskUnblockTime+0x38>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	68db      	ldr	r3, [r3, #12]
 80078d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	4a04      	ldr	r2, [pc, #16]	; (80078f0 <prvResetNextTaskUnblockTime+0x3c>)
 80078de:	6013      	str	r3, [r2, #0]
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	200003ac 	.word	0x200003ac
 80078f0:	20000414 	.word	0x20000414

080078f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078fa:	4b0b      	ldr	r3, [pc, #44]	; (8007928 <xTaskGetSchedulerState+0x34>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d102      	bne.n	8007908 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007902:	2301      	movs	r3, #1
 8007904:	607b      	str	r3, [r7, #4]
 8007906:	e008      	b.n	800791a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007908:	4b08      	ldr	r3, [pc, #32]	; (800792c <xTaskGetSchedulerState+0x38>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d102      	bne.n	8007916 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007910:	2302      	movs	r3, #2
 8007912:	607b      	str	r3, [r7, #4]
 8007914:	e001      	b.n	800791a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007916:	2300      	movs	r3, #0
 8007918:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800791a:	687b      	ldr	r3, [r7, #4]
	}
 800791c:	4618      	mov	r0, r3
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr
 8007928:	20000400 	.word	0x20000400
 800792c:	2000041c 	.word	0x2000041c

08007930 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800793c:	2300      	movs	r3, #0
 800793e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d06e      	beq.n	8007a24 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007946:	4b3a      	ldr	r3, [pc, #232]	; (8007a30 <xTaskPriorityDisinherit+0x100>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	429a      	cmp	r2, r3
 800794e:	d00a      	beq.n	8007966 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	60fb      	str	r3, [r7, #12]
}
 8007962:	bf00      	nop
 8007964:	e7fe      	b.n	8007964 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10a      	bne.n	8007984 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	60bb      	str	r3, [r7, #8]
}
 8007980:	bf00      	nop
 8007982:	e7fe      	b.n	8007982 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007988:	1e5a      	subs	r2, r3, #1
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007996:	429a      	cmp	r2, r3
 8007998:	d044      	beq.n	8007a24 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d140      	bne.n	8007a24 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	3304      	adds	r3, #4
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fe fc6e 	bl	8006288 <uxListRemove>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d115      	bne.n	80079de <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b6:	491f      	ldr	r1, [pc, #124]	; (8007a34 <xTaskPriorityDisinherit+0x104>)
 80079b8:	4613      	mov	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	009b      	lsls	r3, r3, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10a      	bne.n	80079de <xTaskPriorityDisinherit+0xae>
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079cc:	2201      	movs	r2, #1
 80079ce:	fa02 f303 	lsl.w	r3, r2, r3
 80079d2:	43da      	mvns	r2, r3
 80079d4:	4b18      	ldr	r3, [pc, #96]	; (8007a38 <xTaskPriorityDisinherit+0x108>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4013      	ands	r3, r2
 80079da:	4a17      	ldr	r2, [pc, #92]	; (8007a38 <xTaskPriorityDisinherit+0x108>)
 80079dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079de:	693b      	ldr	r3, [r7, #16]
 80079e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ea:	f1c3 0207 	rsb	r2, r3, #7
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	2201      	movs	r2, #1
 80079f8:	409a      	lsls	r2, r3
 80079fa:	4b0f      	ldr	r3, [pc, #60]	; (8007a38 <xTaskPriorityDisinherit+0x108>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	4a0d      	ldr	r2, [pc, #52]	; (8007a38 <xTaskPriorityDisinherit+0x108>)
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a08:	4613      	mov	r3, r2
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	4a08      	ldr	r2, [pc, #32]	; (8007a34 <xTaskPriorityDisinherit+0x104>)
 8007a12:	441a      	add	r2, r3
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	3304      	adds	r3, #4
 8007a18:	4619      	mov	r1, r3
 8007a1a:	4610      	mov	r0, r2
 8007a1c:	f7fe fbd7 	bl	80061ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a20:	2301      	movs	r3, #1
 8007a22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a24:	697b      	ldr	r3, [r7, #20]
	}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3718      	adds	r7, #24
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	200002f4 	.word	0x200002f4
 8007a34:	200002f8 	.word	0x200002f8
 8007a38:	200003fc 	.word	0x200003fc

08007a3c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a46:	4b29      	ldr	r3, [pc, #164]	; (8007aec <prvAddCurrentTaskToDelayedList+0xb0>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a4c:	4b28      	ldr	r3, [pc, #160]	; (8007af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3304      	adds	r3, #4
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7fe fc18 	bl	8006288 <uxListRemove>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d10b      	bne.n	8007a76 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007a5e:	4b24      	ldr	r3, [pc, #144]	; (8007af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a64:	2201      	movs	r2, #1
 8007a66:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6a:	43da      	mvns	r2, r3
 8007a6c:	4b21      	ldr	r3, [pc, #132]	; (8007af4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4013      	ands	r3, r2
 8007a72:	4a20      	ldr	r2, [pc, #128]	; (8007af4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007a74:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a7c:	d10a      	bne.n	8007a94 <prvAddCurrentTaskToDelayedList+0x58>
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d007      	beq.n	8007a94 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a84:	4b1a      	ldr	r3, [pc, #104]	; (8007af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	3304      	adds	r3, #4
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	481a      	ldr	r0, [pc, #104]	; (8007af8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007a8e:	f7fe fb9e 	bl	80061ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a92:	e026      	b.n	8007ae2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4413      	add	r3, r2
 8007a9a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a9c:	4b14      	ldr	r3, [pc, #80]	; (8007af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d209      	bcs.n	8007ac0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007aac:	4b13      	ldr	r3, [pc, #76]	; (8007afc <prvAddCurrentTaskToDelayedList+0xc0>)
 8007aae:	681a      	ldr	r2, [r3, #0]
 8007ab0:	4b0f      	ldr	r3, [pc, #60]	; (8007af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	3304      	adds	r3, #4
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	4610      	mov	r0, r2
 8007aba:	f7fe fbac 	bl	8006216 <vListInsert>
}
 8007abe:	e010      	b.n	8007ae2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ac0:	4b0f      	ldr	r3, [pc, #60]	; (8007b00 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007ac2:	681a      	ldr	r2, [r3, #0]
 8007ac4:	4b0a      	ldr	r3, [pc, #40]	; (8007af0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f7fe fba2 	bl	8006216 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ad2:	4b0c      	ldr	r3, [pc, #48]	; (8007b04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	68ba      	ldr	r2, [r7, #8]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d202      	bcs.n	8007ae2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007adc:	4a09      	ldr	r2, [pc, #36]	; (8007b04 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	6013      	str	r3, [r2, #0]
}
 8007ae2:	bf00      	nop
 8007ae4:	3710      	adds	r7, #16
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	200003f8 	.word	0x200003f8
 8007af0:	200002f4 	.word	0x200002f4
 8007af4:	200003fc 	.word	0x200003fc
 8007af8:	200003e0 	.word	0x200003e0
 8007afc:	200003b0 	.word	0x200003b0
 8007b00:	200003ac 	.word	0x200003ac
 8007b04:	20000414 	.word	0x20000414

08007b08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60f8      	str	r0, [r7, #12]
 8007b10:	60b9      	str	r1, [r7, #8]
 8007b12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3b04      	subs	r3, #4
 8007b18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3b04      	subs	r3, #4
 8007b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f023 0201 	bic.w	r2, r3, #1
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	3b04      	subs	r3, #4
 8007b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b38:	4a0c      	ldr	r2, [pc, #48]	; (8007b6c <pxPortInitialiseStack+0x64>)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	3b14      	subs	r3, #20
 8007b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b44:	687a      	ldr	r2, [r7, #4]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3b04      	subs	r3, #4
 8007b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f06f 0202 	mvn.w	r2, #2
 8007b56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3b20      	subs	r3, #32
 8007b5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr
 8007b6c:	08007b71 	.word	0x08007b71

08007b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007b70:	b480      	push	{r7}
 8007b72:	b085      	sub	sp, #20
 8007b74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007b76:	2300      	movs	r3, #0
 8007b78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007b7a:	4b12      	ldr	r3, [pc, #72]	; (8007bc4 <prvTaskExitError+0x54>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b82:	d00a      	beq.n	8007b9a <prvTaskExitError+0x2a>
	__asm volatile
 8007b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b88:	f383 8811 	msr	BASEPRI, r3
 8007b8c:	f3bf 8f6f 	isb	sy
 8007b90:	f3bf 8f4f 	dsb	sy
 8007b94:	60fb      	str	r3, [r7, #12]
}
 8007b96:	bf00      	nop
 8007b98:	e7fe      	b.n	8007b98 <prvTaskExitError+0x28>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	f383 8811 	msr	BASEPRI, r3
 8007ba2:	f3bf 8f6f 	isb	sy
 8007ba6:	f3bf 8f4f 	dsb	sy
 8007baa:	60bb      	str	r3, [r7, #8]
}
 8007bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007bae:	bf00      	nop
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d0fc      	beq.n	8007bb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bb6:	bf00      	nop
 8007bb8:	bf00      	nop
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr
 8007bc4:	2000000c 	.word	0x2000000c
	...

08007bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007bd0:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <pxCurrentTCBConst2>)
 8007bd2:	6819      	ldr	r1, [r3, #0]
 8007bd4:	6808      	ldr	r0, [r1, #0]
 8007bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bda:	f380 8809 	msr	PSP, r0
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f04f 0000 	mov.w	r0, #0
 8007be6:	f380 8811 	msr	BASEPRI, r0
 8007bea:	4770      	bx	lr
 8007bec:	f3af 8000 	nop.w

08007bf0 <pxCurrentTCBConst2>:
 8007bf0:	200002f4 	.word	0x200002f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007bf4:	bf00      	nop
 8007bf6:	bf00      	nop

08007bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007bf8:	4808      	ldr	r0, [pc, #32]	; (8007c1c <prvPortStartFirstTask+0x24>)
 8007bfa:	6800      	ldr	r0, [r0, #0]
 8007bfc:	6800      	ldr	r0, [r0, #0]
 8007bfe:	f380 8808 	msr	MSP, r0
 8007c02:	f04f 0000 	mov.w	r0, #0
 8007c06:	f380 8814 	msr	CONTROL, r0
 8007c0a:	b662      	cpsie	i
 8007c0c:	b661      	cpsie	f
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	df00      	svc	0
 8007c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c1a:	bf00      	nop
 8007c1c:	e000ed08 	.word	0xe000ed08

08007c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c26:	4b46      	ldr	r3, [pc, #280]	; (8007d40 <xPortStartScheduler+0x120>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4a46      	ldr	r2, [pc, #280]	; (8007d44 <xPortStartScheduler+0x124>)
 8007c2c:	4293      	cmp	r3, r2
 8007c2e:	d10a      	bne.n	8007c46 <xPortStartScheduler+0x26>
	__asm volatile
 8007c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c34:	f383 8811 	msr	BASEPRI, r3
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	f3bf 8f4f 	dsb	sy
 8007c40:	613b      	str	r3, [r7, #16]
}
 8007c42:	bf00      	nop
 8007c44:	e7fe      	b.n	8007c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c46:	4b3e      	ldr	r3, [pc, #248]	; (8007d40 <xPortStartScheduler+0x120>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a3f      	ldr	r2, [pc, #252]	; (8007d48 <xPortStartScheduler+0x128>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d10a      	bne.n	8007c66 <xPortStartScheduler+0x46>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	60fb      	str	r3, [r7, #12]
}
 8007c62:	bf00      	nop
 8007c64:	e7fe      	b.n	8007c64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c66:	4b39      	ldr	r3, [pc, #228]	; (8007d4c <xPortStartScheduler+0x12c>)
 8007c68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	22ff      	movs	r2, #255	; 0xff
 8007c76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c80:	78fb      	ldrb	r3, [r7, #3]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c88:	b2da      	uxtb	r2, r3
 8007c8a:	4b31      	ldr	r3, [pc, #196]	; (8007d50 <xPortStartScheduler+0x130>)
 8007c8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c8e:	4b31      	ldr	r3, [pc, #196]	; (8007d54 <xPortStartScheduler+0x134>)
 8007c90:	2207      	movs	r2, #7
 8007c92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c94:	e009      	b.n	8007caa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007c96:	4b2f      	ldr	r3, [pc, #188]	; (8007d54 <xPortStartScheduler+0x134>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	4a2d      	ldr	r2, [pc, #180]	; (8007d54 <xPortStartScheduler+0x134>)
 8007c9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ca0:	78fb      	ldrb	r3, [r7, #3]
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	005b      	lsls	r3, r3, #1
 8007ca6:	b2db      	uxtb	r3, r3
 8007ca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007caa:	78fb      	ldrb	r3, [r7, #3]
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb2:	2b80      	cmp	r3, #128	; 0x80
 8007cb4:	d0ef      	beq.n	8007c96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cb6:	4b27      	ldr	r3, [pc, #156]	; (8007d54 <xPortStartScheduler+0x134>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f1c3 0307 	rsb	r3, r3, #7
 8007cbe:	2b04      	cmp	r3, #4
 8007cc0:	d00a      	beq.n	8007cd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8007cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	60bb      	str	r3, [r7, #8]
}
 8007cd4:	bf00      	nop
 8007cd6:	e7fe      	b.n	8007cd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007cd8:	4b1e      	ldr	r3, [pc, #120]	; (8007d54 <xPortStartScheduler+0x134>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	021b      	lsls	r3, r3, #8
 8007cde:	4a1d      	ldr	r2, [pc, #116]	; (8007d54 <xPortStartScheduler+0x134>)
 8007ce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ce2:	4b1c      	ldr	r3, [pc, #112]	; (8007d54 <xPortStartScheduler+0x134>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cea:	4a1a      	ldr	r2, [pc, #104]	; (8007d54 <xPortStartScheduler+0x134>)
 8007cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007cf6:	4b18      	ldr	r3, [pc, #96]	; (8007d58 <xPortStartScheduler+0x138>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a17      	ldr	r2, [pc, #92]	; (8007d58 <xPortStartScheduler+0x138>)
 8007cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d02:	4b15      	ldr	r3, [pc, #84]	; (8007d58 <xPortStartScheduler+0x138>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a14      	ldr	r2, [pc, #80]	; (8007d58 <xPortStartScheduler+0x138>)
 8007d08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007d0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d0e:	f000 f8dd 	bl	8007ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d12:	4b12      	ldr	r3, [pc, #72]	; (8007d5c <xPortStartScheduler+0x13c>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d18:	f000 f8fc 	bl	8007f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d1c:	4b10      	ldr	r3, [pc, #64]	; (8007d60 <xPortStartScheduler+0x140>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a0f      	ldr	r2, [pc, #60]	; (8007d60 <xPortStartScheduler+0x140>)
 8007d22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007d26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d28:	f7ff ff66 	bl	8007bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d2c:	f7ff fba6 	bl	800747c <vTaskSwitchContext>
	prvTaskExitError();
 8007d30:	f7ff ff1e 	bl	8007b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	e000ed00 	.word	0xe000ed00
 8007d44:	410fc271 	.word	0x410fc271
 8007d48:	410fc270 	.word	0x410fc270
 8007d4c:	e000e400 	.word	0xe000e400
 8007d50:	20000420 	.word	0x20000420
 8007d54:	20000424 	.word	0x20000424
 8007d58:	e000ed20 	.word	0xe000ed20
 8007d5c:	2000000c 	.word	0x2000000c
 8007d60:	e000ef34 	.word	0xe000ef34

08007d64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	607b      	str	r3, [r7, #4]
}
 8007d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007d7e:	4b0f      	ldr	r3, [pc, #60]	; (8007dbc <vPortEnterCritical+0x58>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3301      	adds	r3, #1
 8007d84:	4a0d      	ldr	r2, [pc, #52]	; (8007dbc <vPortEnterCritical+0x58>)
 8007d86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007d88:	4b0c      	ldr	r3, [pc, #48]	; (8007dbc <vPortEnterCritical+0x58>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	2b01      	cmp	r3, #1
 8007d8e:	d10f      	bne.n	8007db0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d90:	4b0b      	ldr	r3, [pc, #44]	; (8007dc0 <vPortEnterCritical+0x5c>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00a      	beq.n	8007db0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	603b      	str	r3, [r7, #0]
}
 8007dac:	bf00      	nop
 8007dae:	e7fe      	b.n	8007dae <vPortEnterCritical+0x4a>
	}
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	2000000c 	.word	0x2000000c
 8007dc0:	e000ed04 	.word	0xe000ed04

08007dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007dca:	4b12      	ldr	r3, [pc, #72]	; (8007e14 <vPortExitCritical+0x50>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10a      	bne.n	8007de8 <vPortExitCritical+0x24>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	607b      	str	r3, [r7, #4]
}
 8007de4:	bf00      	nop
 8007de6:	e7fe      	b.n	8007de6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007de8:	4b0a      	ldr	r3, [pc, #40]	; (8007e14 <vPortExitCritical+0x50>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	3b01      	subs	r3, #1
 8007dee:	4a09      	ldr	r2, [pc, #36]	; (8007e14 <vPortExitCritical+0x50>)
 8007df0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007df2:	4b08      	ldr	r3, [pc, #32]	; (8007e14 <vPortExitCritical+0x50>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d105      	bne.n	8007e06 <vPortExitCritical+0x42>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	f383 8811 	msr	BASEPRI, r3
}
 8007e04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e06:	bf00      	nop
 8007e08:	370c      	adds	r7, #12
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr
 8007e12:	bf00      	nop
 8007e14:	2000000c 	.word	0x2000000c
	...

08007e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e20:	f3ef 8009 	mrs	r0, PSP
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	4b15      	ldr	r3, [pc, #84]	; (8007e80 <pxCurrentTCBConst>)
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	f01e 0f10 	tst.w	lr, #16
 8007e30:	bf08      	it	eq
 8007e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3a:	6010      	str	r0, [r2, #0]
 8007e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007e44:	f380 8811 	msr	BASEPRI, r0
 8007e48:	f3bf 8f4f 	dsb	sy
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f7ff fb14 	bl	800747c <vTaskSwitchContext>
 8007e54:	f04f 0000 	mov.w	r0, #0
 8007e58:	f380 8811 	msr	BASEPRI, r0
 8007e5c:	bc09      	pop	{r0, r3}
 8007e5e:	6819      	ldr	r1, [r3, #0]
 8007e60:	6808      	ldr	r0, [r1, #0]
 8007e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e66:	f01e 0f10 	tst.w	lr, #16
 8007e6a:	bf08      	it	eq
 8007e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e70:	f380 8809 	msr	PSP, r0
 8007e74:	f3bf 8f6f 	isb	sy
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	f3af 8000 	nop.w

08007e80 <pxCurrentTCBConst>:
 8007e80:	200002f4 	.word	0x200002f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop

08007e88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b082      	sub	sp, #8
 8007e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	607b      	str	r3, [r7, #4]
}
 8007ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ea2:	f7ff fa33 	bl	800730c <xTaskIncrementTick>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d003      	beq.n	8007eb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007eac:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <SysTick_Handler+0x40>)
 8007eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007eb2:	601a      	str	r2, [r3, #0]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	f383 8811 	msr	BASEPRI, r3
}
 8007ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	e000ed04 	.word	0xe000ed04

08007ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007ed0:	4b0b      	ldr	r3, [pc, #44]	; (8007f00 <vPortSetupTimerInterrupt+0x34>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007ed6:	4b0b      	ldr	r3, [pc, #44]	; (8007f04 <vPortSetupTimerInterrupt+0x38>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007edc:	4b0a      	ldr	r3, [pc, #40]	; (8007f08 <vPortSetupTimerInterrupt+0x3c>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	4a0a      	ldr	r2, [pc, #40]	; (8007f0c <vPortSetupTimerInterrupt+0x40>)
 8007ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee6:	099b      	lsrs	r3, r3, #6
 8007ee8:	4a09      	ldr	r2, [pc, #36]	; (8007f10 <vPortSetupTimerInterrupt+0x44>)
 8007eea:	3b01      	subs	r3, #1
 8007eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007eee:	4b04      	ldr	r3, [pc, #16]	; (8007f00 <vPortSetupTimerInterrupt+0x34>)
 8007ef0:	2207      	movs	r2, #7
 8007ef2:	601a      	str	r2, [r3, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr
 8007efe:	bf00      	nop
 8007f00:	e000e010 	.word	0xe000e010
 8007f04:	e000e018 	.word	0xe000e018
 8007f08:	20000000 	.word	0x20000000
 8007f0c:	10624dd3 	.word	0x10624dd3
 8007f10:	e000e014 	.word	0xe000e014

08007f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007f24 <vPortEnableVFP+0x10>
 8007f18:	6801      	ldr	r1, [r0, #0]
 8007f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007f1e:	6001      	str	r1, [r0, #0]
 8007f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f22:	bf00      	nop
 8007f24:	e000ed88 	.word	0xe000ed88

08007f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f28:	b480      	push	{r7}
 8007f2a:	b085      	sub	sp, #20
 8007f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f2e:	f3ef 8305 	mrs	r3, IPSR
 8007f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2b0f      	cmp	r3, #15
 8007f38:	d914      	bls.n	8007f64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f3a:	4a17      	ldr	r2, [pc, #92]	; (8007f98 <vPortValidateInterruptPriority+0x70>)
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	4413      	add	r3, r2
 8007f40:	781b      	ldrb	r3, [r3, #0]
 8007f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f44:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <vPortValidateInterruptPriority+0x74>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	7afa      	ldrb	r2, [r7, #11]
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d20a      	bcs.n	8007f64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f52:	f383 8811 	msr	BASEPRI, r3
 8007f56:	f3bf 8f6f 	isb	sy
 8007f5a:	f3bf 8f4f 	dsb	sy
 8007f5e:	607b      	str	r3, [r7, #4]
}
 8007f60:	bf00      	nop
 8007f62:	e7fe      	b.n	8007f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f64:	4b0e      	ldr	r3, [pc, #56]	; (8007fa0 <vPortValidateInterruptPriority+0x78>)
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007f6c:	4b0d      	ldr	r3, [pc, #52]	; (8007fa4 <vPortValidateInterruptPriority+0x7c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d90a      	bls.n	8007f8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	603b      	str	r3, [r7, #0]
}
 8007f86:	bf00      	nop
 8007f88:	e7fe      	b.n	8007f88 <vPortValidateInterruptPriority+0x60>
	}
 8007f8a:	bf00      	nop
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	e000e3f0 	.word	0xe000e3f0
 8007f9c:	20000420 	.word	0x20000420
 8007fa0:	e000ed0c 	.word	0xe000ed0c
 8007fa4:	20000424 	.word	0x20000424

08007fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08a      	sub	sp, #40	; 0x28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fb4:	f7ff f900 	bl	80071b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fb8:	4b58      	ldr	r3, [pc, #352]	; (800811c <pvPortMalloc+0x174>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d101      	bne.n	8007fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007fc0:	f000 f910 	bl	80081e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007fc4:	4b56      	ldr	r3, [pc, #344]	; (8008120 <pvPortMalloc+0x178>)
 8007fc6:	681a      	ldr	r2, [r3, #0]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4013      	ands	r3, r2
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f040 808e 	bne.w	80080ee <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d01d      	beq.n	8008014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007fd8:	2208      	movs	r2, #8
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4413      	add	r3, r2
 8007fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f003 0307 	and.w	r3, r3, #7
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d014      	beq.n	8008014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f023 0307 	bic.w	r3, r3, #7
 8007ff0:	3308      	adds	r3, #8
 8007ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f003 0307 	and.w	r3, r3, #7
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00a      	beq.n	8008014 <pvPortMalloc+0x6c>
	__asm volatile
 8007ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008002:	f383 8811 	msr	BASEPRI, r3
 8008006:	f3bf 8f6f 	isb	sy
 800800a:	f3bf 8f4f 	dsb	sy
 800800e:	617b      	str	r3, [r7, #20]
}
 8008010:	bf00      	nop
 8008012:	e7fe      	b.n	8008012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d069      	beq.n	80080ee <pvPortMalloc+0x146>
 800801a:	4b42      	ldr	r3, [pc, #264]	; (8008124 <pvPortMalloc+0x17c>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	429a      	cmp	r2, r3
 8008022:	d864      	bhi.n	80080ee <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008024:	4b40      	ldr	r3, [pc, #256]	; (8008128 <pvPortMalloc+0x180>)
 8008026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008028:	4b3f      	ldr	r3, [pc, #252]	; (8008128 <pvPortMalloc+0x180>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800802e:	e004      	b.n	800803a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	429a      	cmp	r2, r3
 8008042:	d903      	bls.n	800804c <pvPortMalloc+0xa4>
 8008044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1f1      	bne.n	8008030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800804c:	4b33      	ldr	r3, [pc, #204]	; (800811c <pvPortMalloc+0x174>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008052:	429a      	cmp	r2, r3
 8008054:	d04b      	beq.n	80080ee <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008056:	6a3b      	ldr	r3, [r7, #32]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2208      	movs	r2, #8
 800805c:	4413      	add	r3, r2
 800805e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	1ad2      	subs	r2, r2, r3
 8008070:	2308      	movs	r3, #8
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	429a      	cmp	r2, r3
 8008076:	d91f      	bls.n	80080b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4413      	add	r3, r2
 800807e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	f003 0307 	and.w	r3, r3, #7
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00a      	beq.n	80080a0 <pvPortMalloc+0xf8>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	613b      	str	r3, [r7, #16]
}
 800809c:	bf00      	nop
 800809e:	e7fe      	b.n	800809e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	1ad2      	subs	r2, r2, r3
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080b2:	69b8      	ldr	r0, [r7, #24]
 80080b4:	f000 f8f8 	bl	80082a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080b8:	4b1a      	ldr	r3, [pc, #104]	; (8008124 <pvPortMalloc+0x17c>)
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	4a18      	ldr	r2, [pc, #96]	; (8008124 <pvPortMalloc+0x17c>)
 80080c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080c6:	4b17      	ldr	r3, [pc, #92]	; (8008124 <pvPortMalloc+0x17c>)
 80080c8:	681a      	ldr	r2, [r3, #0]
 80080ca:	4b18      	ldr	r3, [pc, #96]	; (800812c <pvPortMalloc+0x184>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d203      	bcs.n	80080da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80080d2:	4b14      	ldr	r3, [pc, #80]	; (8008124 <pvPortMalloc+0x17c>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a15      	ldr	r2, [pc, #84]	; (800812c <pvPortMalloc+0x184>)
 80080d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80080da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	4b10      	ldr	r3, [pc, #64]	; (8008120 <pvPortMalloc+0x178>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	431a      	orrs	r2, r3
 80080e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80080e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80080ee:	f7ff f871 	bl	80071d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	f003 0307 	and.w	r3, r3, #7
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d00a      	beq.n	8008112 <pvPortMalloc+0x16a>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	60fb      	str	r3, [r7, #12]
}
 800810e:	bf00      	nop
 8008110:	e7fe      	b.n	8008110 <pvPortMalloc+0x168>
	return pvReturn;
 8008112:	69fb      	ldr	r3, [r7, #28]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3728      	adds	r7, #40	; 0x28
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}
 800811c:	20004030 	.word	0x20004030
 8008120:	2000403c 	.word	0x2000403c
 8008124:	20004034 	.word	0x20004034
 8008128:	20004028 	.word	0x20004028
 800812c:	20004038 	.word	0x20004038

08008130 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b086      	sub	sp, #24
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d048      	beq.n	80081d4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008142:	2308      	movs	r3, #8
 8008144:	425b      	negs	r3, r3
 8008146:	697a      	ldr	r2, [r7, #20]
 8008148:	4413      	add	r3, r2
 800814a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	685a      	ldr	r2, [r3, #4]
 8008154:	4b21      	ldr	r3, [pc, #132]	; (80081dc <vPortFree+0xac>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4013      	ands	r3, r2
 800815a:	2b00      	cmp	r3, #0
 800815c:	d10a      	bne.n	8008174 <vPortFree+0x44>
	__asm volatile
 800815e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008162:	f383 8811 	msr	BASEPRI, r3
 8008166:	f3bf 8f6f 	isb	sy
 800816a:	f3bf 8f4f 	dsb	sy
 800816e:	60fb      	str	r3, [r7, #12]
}
 8008170:	bf00      	nop
 8008172:	e7fe      	b.n	8008172 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d00a      	beq.n	8008192 <vPortFree+0x62>
	__asm volatile
 800817c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008180:	f383 8811 	msr	BASEPRI, r3
 8008184:	f3bf 8f6f 	isb	sy
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	60bb      	str	r3, [r7, #8]
}
 800818e:	bf00      	nop
 8008190:	e7fe      	b.n	8008190 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	4b11      	ldr	r3, [pc, #68]	; (80081dc <vPortFree+0xac>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4013      	ands	r3, r2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d019      	beq.n	80081d4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d115      	bne.n	80081d4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	4b0b      	ldr	r3, [pc, #44]	; (80081dc <vPortFree+0xac>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	43db      	mvns	r3, r3
 80081b2:	401a      	ands	r2, r3
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80081b8:	f7fe fffe 	bl	80071b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	685a      	ldr	r2, [r3, #4]
 80081c0:	4b07      	ldr	r3, [pc, #28]	; (80081e0 <vPortFree+0xb0>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4413      	add	r3, r2
 80081c6:	4a06      	ldr	r2, [pc, #24]	; (80081e0 <vPortFree+0xb0>)
 80081c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081ca:	6938      	ldr	r0, [r7, #16]
 80081cc:	f000 f86c 	bl	80082a8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80081d0:	f7ff f800 	bl	80071d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80081d4:	bf00      	nop
 80081d6:	3718      	adds	r7, #24
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	2000403c 	.word	0x2000403c
 80081e0:	20004034 	.word	0x20004034

080081e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081ea:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80081ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80081f0:	4b27      	ldr	r3, [pc, #156]	; (8008290 <prvHeapInit+0xac>)
 80081f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d00c      	beq.n	8008218 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	3307      	adds	r3, #7
 8008202:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 0307 	bic.w	r3, r3, #7
 800820a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800820c:	68ba      	ldr	r2, [r7, #8]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	4a1f      	ldr	r2, [pc, #124]	; (8008290 <prvHeapInit+0xac>)
 8008214:	4413      	add	r3, r2
 8008216:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800821c:	4a1d      	ldr	r2, [pc, #116]	; (8008294 <prvHeapInit+0xb0>)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008222:	4b1c      	ldr	r3, [pc, #112]	; (8008294 <prvHeapInit+0xb0>)
 8008224:	2200      	movs	r2, #0
 8008226:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68ba      	ldr	r2, [r7, #8]
 800822c:	4413      	add	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008230:	2208      	movs	r2, #8
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	1a9b      	subs	r3, r3, r2
 8008236:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	f023 0307 	bic.w	r3, r3, #7
 800823e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	4a15      	ldr	r2, [pc, #84]	; (8008298 <prvHeapInit+0xb4>)
 8008244:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008246:	4b14      	ldr	r3, [pc, #80]	; (8008298 <prvHeapInit+0xb4>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2200      	movs	r2, #0
 800824c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800824e:	4b12      	ldr	r3, [pc, #72]	; (8008298 <prvHeapInit+0xb4>)
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	2200      	movs	r2, #0
 8008254:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	68fa      	ldr	r2, [r7, #12]
 800825e:	1ad2      	subs	r2, r2, r3
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008264:	4b0c      	ldr	r3, [pc, #48]	; (8008298 <prvHeapInit+0xb4>)
 8008266:	681a      	ldr	r2, [r3, #0]
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	4a0a      	ldr	r2, [pc, #40]	; (800829c <prvHeapInit+0xb8>)
 8008272:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	685b      	ldr	r3, [r3, #4]
 8008278:	4a09      	ldr	r2, [pc, #36]	; (80082a0 <prvHeapInit+0xbc>)
 800827a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800827c:	4b09      	ldr	r3, [pc, #36]	; (80082a4 <prvHeapInit+0xc0>)
 800827e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008282:	601a      	str	r2, [r3, #0]
}
 8008284:	bf00      	nop
 8008286:	3714      	adds	r7, #20
 8008288:	46bd      	mov	sp, r7
 800828a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828e:	4770      	bx	lr
 8008290:	20000428 	.word	0x20000428
 8008294:	20004028 	.word	0x20004028
 8008298:	20004030 	.word	0x20004030
 800829c:	20004038 	.word	0x20004038
 80082a0:	20004034 	.word	0x20004034
 80082a4:	2000403c 	.word	0x2000403c

080082a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80082b0:	4b28      	ldr	r3, [pc, #160]	; (8008354 <prvInsertBlockIntoFreeList+0xac>)
 80082b2:	60fb      	str	r3, [r7, #12]
 80082b4:	e002      	b.n	80082bc <prvInsertBlockIntoFreeList+0x14>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	60fb      	str	r3, [r7, #12]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d8f7      	bhi.n	80082b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	4413      	add	r3, r2
 80082d2:	687a      	ldr	r2, [r7, #4]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d108      	bne.n	80082ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	685a      	ldr	r2, [r3, #4]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	441a      	add	r2, r3
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	441a      	add	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	429a      	cmp	r2, r3
 80082fc:	d118      	bne.n	8008330 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	4b15      	ldr	r3, [pc, #84]	; (8008358 <prvInsertBlockIntoFreeList+0xb0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	429a      	cmp	r2, r3
 8008308:	d00d      	beq.n	8008326 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685a      	ldr	r2, [r3, #4]
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	441a      	add	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	601a      	str	r2, [r3, #0]
 8008324:	e008      	b.n	8008338 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008326:	4b0c      	ldr	r3, [pc, #48]	; (8008358 <prvInsertBlockIntoFreeList+0xb0>)
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	601a      	str	r2, [r3, #0]
 800832e:	e003      	b.n	8008338 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	429a      	cmp	r2, r3
 800833e:	d002      	beq.n	8008346 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	687a      	ldr	r2, [r7, #4]
 8008344:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008346:	bf00      	nop
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	20004028 	.word	0x20004028
 8008358:	20004030 	.word	0x20004030

0800835c <__errno>:
 800835c:	4b01      	ldr	r3, [pc, #4]	; (8008364 <__errno+0x8>)
 800835e:	6818      	ldr	r0, [r3, #0]
 8008360:	4770      	bx	lr
 8008362:	bf00      	nop
 8008364:	20000010 	.word	0x20000010

08008368 <__libc_init_array>:
 8008368:	b570      	push	{r4, r5, r6, lr}
 800836a:	4d0d      	ldr	r5, [pc, #52]	; (80083a0 <__libc_init_array+0x38>)
 800836c:	4c0d      	ldr	r4, [pc, #52]	; (80083a4 <__libc_init_array+0x3c>)
 800836e:	1b64      	subs	r4, r4, r5
 8008370:	10a4      	asrs	r4, r4, #2
 8008372:	2600      	movs	r6, #0
 8008374:	42a6      	cmp	r6, r4
 8008376:	d109      	bne.n	800838c <__libc_init_array+0x24>
 8008378:	4d0b      	ldr	r5, [pc, #44]	; (80083a8 <__libc_init_array+0x40>)
 800837a:	4c0c      	ldr	r4, [pc, #48]	; (80083ac <__libc_init_array+0x44>)
 800837c:	f001 fcaa 	bl	8009cd4 <_init>
 8008380:	1b64      	subs	r4, r4, r5
 8008382:	10a4      	asrs	r4, r4, #2
 8008384:	2600      	movs	r6, #0
 8008386:	42a6      	cmp	r6, r4
 8008388:	d105      	bne.n	8008396 <__libc_init_array+0x2e>
 800838a:	bd70      	pop	{r4, r5, r6, pc}
 800838c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008390:	4798      	blx	r3
 8008392:	3601      	adds	r6, #1
 8008394:	e7ee      	b.n	8008374 <__libc_init_array+0xc>
 8008396:	f855 3b04 	ldr.w	r3, [r5], #4
 800839a:	4798      	blx	r3
 800839c:	3601      	adds	r6, #1
 800839e:	e7f2      	b.n	8008386 <__libc_init_array+0x1e>
 80083a0:	08009ea0 	.word	0x08009ea0
 80083a4:	08009ea0 	.word	0x08009ea0
 80083a8:	08009ea0 	.word	0x08009ea0
 80083ac:	08009ea4 	.word	0x08009ea4

080083b0 <memcpy>:
 80083b0:	440a      	add	r2, r1
 80083b2:	4291      	cmp	r1, r2
 80083b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083b8:	d100      	bne.n	80083bc <memcpy+0xc>
 80083ba:	4770      	bx	lr
 80083bc:	b510      	push	{r4, lr}
 80083be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083c6:	4291      	cmp	r1, r2
 80083c8:	d1f9      	bne.n	80083be <memcpy+0xe>
 80083ca:	bd10      	pop	{r4, pc}

080083cc <memset>:
 80083cc:	4402      	add	r2, r0
 80083ce:	4603      	mov	r3, r0
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d100      	bne.n	80083d6 <memset+0xa>
 80083d4:	4770      	bx	lr
 80083d6:	f803 1b01 	strb.w	r1, [r3], #1
 80083da:	e7f9      	b.n	80083d0 <memset+0x4>

080083dc <_puts_r>:
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	460e      	mov	r6, r1
 80083e0:	4605      	mov	r5, r0
 80083e2:	b118      	cbz	r0, 80083ec <_puts_r+0x10>
 80083e4:	6983      	ldr	r3, [r0, #24]
 80083e6:	b90b      	cbnz	r3, 80083ec <_puts_r+0x10>
 80083e8:	f000 fa48 	bl	800887c <__sinit>
 80083ec:	69ab      	ldr	r3, [r5, #24]
 80083ee:	68ac      	ldr	r4, [r5, #8]
 80083f0:	b913      	cbnz	r3, 80083f8 <_puts_r+0x1c>
 80083f2:	4628      	mov	r0, r5
 80083f4:	f000 fa42 	bl	800887c <__sinit>
 80083f8:	4b2c      	ldr	r3, [pc, #176]	; (80084ac <_puts_r+0xd0>)
 80083fa:	429c      	cmp	r4, r3
 80083fc:	d120      	bne.n	8008440 <_puts_r+0x64>
 80083fe:	686c      	ldr	r4, [r5, #4]
 8008400:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008402:	07db      	lsls	r3, r3, #31
 8008404:	d405      	bmi.n	8008412 <_puts_r+0x36>
 8008406:	89a3      	ldrh	r3, [r4, #12]
 8008408:	0598      	lsls	r0, r3, #22
 800840a:	d402      	bmi.n	8008412 <_puts_r+0x36>
 800840c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800840e:	f000 fad3 	bl	80089b8 <__retarget_lock_acquire_recursive>
 8008412:	89a3      	ldrh	r3, [r4, #12]
 8008414:	0719      	lsls	r1, r3, #28
 8008416:	d51d      	bpl.n	8008454 <_puts_r+0x78>
 8008418:	6923      	ldr	r3, [r4, #16]
 800841a:	b1db      	cbz	r3, 8008454 <_puts_r+0x78>
 800841c:	3e01      	subs	r6, #1
 800841e:	68a3      	ldr	r3, [r4, #8]
 8008420:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008424:	3b01      	subs	r3, #1
 8008426:	60a3      	str	r3, [r4, #8]
 8008428:	bb39      	cbnz	r1, 800847a <_puts_r+0x9e>
 800842a:	2b00      	cmp	r3, #0
 800842c:	da38      	bge.n	80084a0 <_puts_r+0xc4>
 800842e:	4622      	mov	r2, r4
 8008430:	210a      	movs	r1, #10
 8008432:	4628      	mov	r0, r5
 8008434:	f000 f848 	bl	80084c8 <__swbuf_r>
 8008438:	3001      	adds	r0, #1
 800843a:	d011      	beq.n	8008460 <_puts_r+0x84>
 800843c:	250a      	movs	r5, #10
 800843e:	e011      	b.n	8008464 <_puts_r+0x88>
 8008440:	4b1b      	ldr	r3, [pc, #108]	; (80084b0 <_puts_r+0xd4>)
 8008442:	429c      	cmp	r4, r3
 8008444:	d101      	bne.n	800844a <_puts_r+0x6e>
 8008446:	68ac      	ldr	r4, [r5, #8]
 8008448:	e7da      	b.n	8008400 <_puts_r+0x24>
 800844a:	4b1a      	ldr	r3, [pc, #104]	; (80084b4 <_puts_r+0xd8>)
 800844c:	429c      	cmp	r4, r3
 800844e:	bf08      	it	eq
 8008450:	68ec      	ldreq	r4, [r5, #12]
 8008452:	e7d5      	b.n	8008400 <_puts_r+0x24>
 8008454:	4621      	mov	r1, r4
 8008456:	4628      	mov	r0, r5
 8008458:	f000 f888 	bl	800856c <__swsetup_r>
 800845c:	2800      	cmp	r0, #0
 800845e:	d0dd      	beq.n	800841c <_puts_r+0x40>
 8008460:	f04f 35ff 	mov.w	r5, #4294967295
 8008464:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008466:	07da      	lsls	r2, r3, #31
 8008468:	d405      	bmi.n	8008476 <_puts_r+0x9a>
 800846a:	89a3      	ldrh	r3, [r4, #12]
 800846c:	059b      	lsls	r3, r3, #22
 800846e:	d402      	bmi.n	8008476 <_puts_r+0x9a>
 8008470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008472:	f000 faa2 	bl	80089ba <__retarget_lock_release_recursive>
 8008476:	4628      	mov	r0, r5
 8008478:	bd70      	pop	{r4, r5, r6, pc}
 800847a:	2b00      	cmp	r3, #0
 800847c:	da04      	bge.n	8008488 <_puts_r+0xac>
 800847e:	69a2      	ldr	r2, [r4, #24]
 8008480:	429a      	cmp	r2, r3
 8008482:	dc06      	bgt.n	8008492 <_puts_r+0xb6>
 8008484:	290a      	cmp	r1, #10
 8008486:	d004      	beq.n	8008492 <_puts_r+0xb6>
 8008488:	6823      	ldr	r3, [r4, #0]
 800848a:	1c5a      	adds	r2, r3, #1
 800848c:	6022      	str	r2, [r4, #0]
 800848e:	7019      	strb	r1, [r3, #0]
 8008490:	e7c5      	b.n	800841e <_puts_r+0x42>
 8008492:	4622      	mov	r2, r4
 8008494:	4628      	mov	r0, r5
 8008496:	f000 f817 	bl	80084c8 <__swbuf_r>
 800849a:	3001      	adds	r0, #1
 800849c:	d1bf      	bne.n	800841e <_puts_r+0x42>
 800849e:	e7df      	b.n	8008460 <_puts_r+0x84>
 80084a0:	6823      	ldr	r3, [r4, #0]
 80084a2:	250a      	movs	r5, #10
 80084a4:	1c5a      	adds	r2, r3, #1
 80084a6:	6022      	str	r2, [r4, #0]
 80084a8:	701d      	strb	r5, [r3, #0]
 80084aa:	e7db      	b.n	8008464 <_puts_r+0x88>
 80084ac:	08009e10 	.word	0x08009e10
 80084b0:	08009e30 	.word	0x08009e30
 80084b4:	08009df0 	.word	0x08009df0

080084b8 <puts>:
 80084b8:	4b02      	ldr	r3, [pc, #8]	; (80084c4 <puts+0xc>)
 80084ba:	4601      	mov	r1, r0
 80084bc:	6818      	ldr	r0, [r3, #0]
 80084be:	f7ff bf8d 	b.w	80083dc <_puts_r>
 80084c2:	bf00      	nop
 80084c4:	20000010 	.word	0x20000010

080084c8 <__swbuf_r>:
 80084c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ca:	460e      	mov	r6, r1
 80084cc:	4614      	mov	r4, r2
 80084ce:	4605      	mov	r5, r0
 80084d0:	b118      	cbz	r0, 80084da <__swbuf_r+0x12>
 80084d2:	6983      	ldr	r3, [r0, #24]
 80084d4:	b90b      	cbnz	r3, 80084da <__swbuf_r+0x12>
 80084d6:	f000 f9d1 	bl	800887c <__sinit>
 80084da:	4b21      	ldr	r3, [pc, #132]	; (8008560 <__swbuf_r+0x98>)
 80084dc:	429c      	cmp	r4, r3
 80084de:	d12b      	bne.n	8008538 <__swbuf_r+0x70>
 80084e0:	686c      	ldr	r4, [r5, #4]
 80084e2:	69a3      	ldr	r3, [r4, #24]
 80084e4:	60a3      	str	r3, [r4, #8]
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	071a      	lsls	r2, r3, #28
 80084ea:	d52f      	bpl.n	800854c <__swbuf_r+0x84>
 80084ec:	6923      	ldr	r3, [r4, #16]
 80084ee:	b36b      	cbz	r3, 800854c <__swbuf_r+0x84>
 80084f0:	6923      	ldr	r3, [r4, #16]
 80084f2:	6820      	ldr	r0, [r4, #0]
 80084f4:	1ac0      	subs	r0, r0, r3
 80084f6:	6963      	ldr	r3, [r4, #20]
 80084f8:	b2f6      	uxtb	r6, r6
 80084fa:	4283      	cmp	r3, r0
 80084fc:	4637      	mov	r7, r6
 80084fe:	dc04      	bgt.n	800850a <__swbuf_r+0x42>
 8008500:	4621      	mov	r1, r4
 8008502:	4628      	mov	r0, r5
 8008504:	f000 f926 	bl	8008754 <_fflush_r>
 8008508:	bb30      	cbnz	r0, 8008558 <__swbuf_r+0x90>
 800850a:	68a3      	ldr	r3, [r4, #8]
 800850c:	3b01      	subs	r3, #1
 800850e:	60a3      	str	r3, [r4, #8]
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	1c5a      	adds	r2, r3, #1
 8008514:	6022      	str	r2, [r4, #0]
 8008516:	701e      	strb	r6, [r3, #0]
 8008518:	6963      	ldr	r3, [r4, #20]
 800851a:	3001      	adds	r0, #1
 800851c:	4283      	cmp	r3, r0
 800851e:	d004      	beq.n	800852a <__swbuf_r+0x62>
 8008520:	89a3      	ldrh	r3, [r4, #12]
 8008522:	07db      	lsls	r3, r3, #31
 8008524:	d506      	bpl.n	8008534 <__swbuf_r+0x6c>
 8008526:	2e0a      	cmp	r6, #10
 8008528:	d104      	bne.n	8008534 <__swbuf_r+0x6c>
 800852a:	4621      	mov	r1, r4
 800852c:	4628      	mov	r0, r5
 800852e:	f000 f911 	bl	8008754 <_fflush_r>
 8008532:	b988      	cbnz	r0, 8008558 <__swbuf_r+0x90>
 8008534:	4638      	mov	r0, r7
 8008536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008538:	4b0a      	ldr	r3, [pc, #40]	; (8008564 <__swbuf_r+0x9c>)
 800853a:	429c      	cmp	r4, r3
 800853c:	d101      	bne.n	8008542 <__swbuf_r+0x7a>
 800853e:	68ac      	ldr	r4, [r5, #8]
 8008540:	e7cf      	b.n	80084e2 <__swbuf_r+0x1a>
 8008542:	4b09      	ldr	r3, [pc, #36]	; (8008568 <__swbuf_r+0xa0>)
 8008544:	429c      	cmp	r4, r3
 8008546:	bf08      	it	eq
 8008548:	68ec      	ldreq	r4, [r5, #12]
 800854a:	e7ca      	b.n	80084e2 <__swbuf_r+0x1a>
 800854c:	4621      	mov	r1, r4
 800854e:	4628      	mov	r0, r5
 8008550:	f000 f80c 	bl	800856c <__swsetup_r>
 8008554:	2800      	cmp	r0, #0
 8008556:	d0cb      	beq.n	80084f0 <__swbuf_r+0x28>
 8008558:	f04f 37ff 	mov.w	r7, #4294967295
 800855c:	e7ea      	b.n	8008534 <__swbuf_r+0x6c>
 800855e:	bf00      	nop
 8008560:	08009e10 	.word	0x08009e10
 8008564:	08009e30 	.word	0x08009e30
 8008568:	08009df0 	.word	0x08009df0

0800856c <__swsetup_r>:
 800856c:	4b32      	ldr	r3, [pc, #200]	; (8008638 <__swsetup_r+0xcc>)
 800856e:	b570      	push	{r4, r5, r6, lr}
 8008570:	681d      	ldr	r5, [r3, #0]
 8008572:	4606      	mov	r6, r0
 8008574:	460c      	mov	r4, r1
 8008576:	b125      	cbz	r5, 8008582 <__swsetup_r+0x16>
 8008578:	69ab      	ldr	r3, [r5, #24]
 800857a:	b913      	cbnz	r3, 8008582 <__swsetup_r+0x16>
 800857c:	4628      	mov	r0, r5
 800857e:	f000 f97d 	bl	800887c <__sinit>
 8008582:	4b2e      	ldr	r3, [pc, #184]	; (800863c <__swsetup_r+0xd0>)
 8008584:	429c      	cmp	r4, r3
 8008586:	d10f      	bne.n	80085a8 <__swsetup_r+0x3c>
 8008588:	686c      	ldr	r4, [r5, #4]
 800858a:	89a3      	ldrh	r3, [r4, #12]
 800858c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008590:	0719      	lsls	r1, r3, #28
 8008592:	d42c      	bmi.n	80085ee <__swsetup_r+0x82>
 8008594:	06dd      	lsls	r5, r3, #27
 8008596:	d411      	bmi.n	80085bc <__swsetup_r+0x50>
 8008598:	2309      	movs	r3, #9
 800859a:	6033      	str	r3, [r6, #0]
 800859c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80085a0:	81a3      	strh	r3, [r4, #12]
 80085a2:	f04f 30ff 	mov.w	r0, #4294967295
 80085a6:	e03e      	b.n	8008626 <__swsetup_r+0xba>
 80085a8:	4b25      	ldr	r3, [pc, #148]	; (8008640 <__swsetup_r+0xd4>)
 80085aa:	429c      	cmp	r4, r3
 80085ac:	d101      	bne.n	80085b2 <__swsetup_r+0x46>
 80085ae:	68ac      	ldr	r4, [r5, #8]
 80085b0:	e7eb      	b.n	800858a <__swsetup_r+0x1e>
 80085b2:	4b24      	ldr	r3, [pc, #144]	; (8008644 <__swsetup_r+0xd8>)
 80085b4:	429c      	cmp	r4, r3
 80085b6:	bf08      	it	eq
 80085b8:	68ec      	ldreq	r4, [r5, #12]
 80085ba:	e7e6      	b.n	800858a <__swsetup_r+0x1e>
 80085bc:	0758      	lsls	r0, r3, #29
 80085be:	d512      	bpl.n	80085e6 <__swsetup_r+0x7a>
 80085c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085c2:	b141      	cbz	r1, 80085d6 <__swsetup_r+0x6a>
 80085c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085c8:	4299      	cmp	r1, r3
 80085ca:	d002      	beq.n	80085d2 <__swsetup_r+0x66>
 80085cc:	4630      	mov	r0, r6
 80085ce:	f000 fa59 	bl	8008a84 <_free_r>
 80085d2:	2300      	movs	r3, #0
 80085d4:	6363      	str	r3, [r4, #52]	; 0x34
 80085d6:	89a3      	ldrh	r3, [r4, #12]
 80085d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085dc:	81a3      	strh	r3, [r4, #12]
 80085de:	2300      	movs	r3, #0
 80085e0:	6063      	str	r3, [r4, #4]
 80085e2:	6923      	ldr	r3, [r4, #16]
 80085e4:	6023      	str	r3, [r4, #0]
 80085e6:	89a3      	ldrh	r3, [r4, #12]
 80085e8:	f043 0308 	orr.w	r3, r3, #8
 80085ec:	81a3      	strh	r3, [r4, #12]
 80085ee:	6923      	ldr	r3, [r4, #16]
 80085f0:	b94b      	cbnz	r3, 8008606 <__swsetup_r+0x9a>
 80085f2:	89a3      	ldrh	r3, [r4, #12]
 80085f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085fc:	d003      	beq.n	8008606 <__swsetup_r+0x9a>
 80085fe:	4621      	mov	r1, r4
 8008600:	4630      	mov	r0, r6
 8008602:	f000 f9ff 	bl	8008a04 <__smakebuf_r>
 8008606:	89a0      	ldrh	r0, [r4, #12]
 8008608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800860c:	f010 0301 	ands.w	r3, r0, #1
 8008610:	d00a      	beq.n	8008628 <__swsetup_r+0xbc>
 8008612:	2300      	movs	r3, #0
 8008614:	60a3      	str	r3, [r4, #8]
 8008616:	6963      	ldr	r3, [r4, #20]
 8008618:	425b      	negs	r3, r3
 800861a:	61a3      	str	r3, [r4, #24]
 800861c:	6923      	ldr	r3, [r4, #16]
 800861e:	b943      	cbnz	r3, 8008632 <__swsetup_r+0xc6>
 8008620:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008624:	d1ba      	bne.n	800859c <__swsetup_r+0x30>
 8008626:	bd70      	pop	{r4, r5, r6, pc}
 8008628:	0781      	lsls	r1, r0, #30
 800862a:	bf58      	it	pl
 800862c:	6963      	ldrpl	r3, [r4, #20]
 800862e:	60a3      	str	r3, [r4, #8]
 8008630:	e7f4      	b.n	800861c <__swsetup_r+0xb0>
 8008632:	2000      	movs	r0, #0
 8008634:	e7f7      	b.n	8008626 <__swsetup_r+0xba>
 8008636:	bf00      	nop
 8008638:	20000010 	.word	0x20000010
 800863c:	08009e10 	.word	0x08009e10
 8008640:	08009e30 	.word	0x08009e30
 8008644:	08009df0 	.word	0x08009df0

08008648 <__sflush_r>:
 8008648:	898a      	ldrh	r2, [r1, #12]
 800864a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800864e:	4605      	mov	r5, r0
 8008650:	0710      	lsls	r0, r2, #28
 8008652:	460c      	mov	r4, r1
 8008654:	d458      	bmi.n	8008708 <__sflush_r+0xc0>
 8008656:	684b      	ldr	r3, [r1, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	dc05      	bgt.n	8008668 <__sflush_r+0x20>
 800865c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800865e:	2b00      	cmp	r3, #0
 8008660:	dc02      	bgt.n	8008668 <__sflush_r+0x20>
 8008662:	2000      	movs	r0, #0
 8008664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800866a:	2e00      	cmp	r6, #0
 800866c:	d0f9      	beq.n	8008662 <__sflush_r+0x1a>
 800866e:	2300      	movs	r3, #0
 8008670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008674:	682f      	ldr	r7, [r5, #0]
 8008676:	602b      	str	r3, [r5, #0]
 8008678:	d032      	beq.n	80086e0 <__sflush_r+0x98>
 800867a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800867c:	89a3      	ldrh	r3, [r4, #12]
 800867e:	075a      	lsls	r2, r3, #29
 8008680:	d505      	bpl.n	800868e <__sflush_r+0x46>
 8008682:	6863      	ldr	r3, [r4, #4]
 8008684:	1ac0      	subs	r0, r0, r3
 8008686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008688:	b10b      	cbz	r3, 800868e <__sflush_r+0x46>
 800868a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800868c:	1ac0      	subs	r0, r0, r3
 800868e:	2300      	movs	r3, #0
 8008690:	4602      	mov	r2, r0
 8008692:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008694:	6a21      	ldr	r1, [r4, #32]
 8008696:	4628      	mov	r0, r5
 8008698:	47b0      	blx	r6
 800869a:	1c43      	adds	r3, r0, #1
 800869c:	89a3      	ldrh	r3, [r4, #12]
 800869e:	d106      	bne.n	80086ae <__sflush_r+0x66>
 80086a0:	6829      	ldr	r1, [r5, #0]
 80086a2:	291d      	cmp	r1, #29
 80086a4:	d82c      	bhi.n	8008700 <__sflush_r+0xb8>
 80086a6:	4a2a      	ldr	r2, [pc, #168]	; (8008750 <__sflush_r+0x108>)
 80086a8:	40ca      	lsrs	r2, r1
 80086aa:	07d6      	lsls	r6, r2, #31
 80086ac:	d528      	bpl.n	8008700 <__sflush_r+0xb8>
 80086ae:	2200      	movs	r2, #0
 80086b0:	6062      	str	r2, [r4, #4]
 80086b2:	04d9      	lsls	r1, r3, #19
 80086b4:	6922      	ldr	r2, [r4, #16]
 80086b6:	6022      	str	r2, [r4, #0]
 80086b8:	d504      	bpl.n	80086c4 <__sflush_r+0x7c>
 80086ba:	1c42      	adds	r2, r0, #1
 80086bc:	d101      	bne.n	80086c2 <__sflush_r+0x7a>
 80086be:	682b      	ldr	r3, [r5, #0]
 80086c0:	b903      	cbnz	r3, 80086c4 <__sflush_r+0x7c>
 80086c2:	6560      	str	r0, [r4, #84]	; 0x54
 80086c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80086c6:	602f      	str	r7, [r5, #0]
 80086c8:	2900      	cmp	r1, #0
 80086ca:	d0ca      	beq.n	8008662 <__sflush_r+0x1a>
 80086cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80086d0:	4299      	cmp	r1, r3
 80086d2:	d002      	beq.n	80086da <__sflush_r+0x92>
 80086d4:	4628      	mov	r0, r5
 80086d6:	f000 f9d5 	bl	8008a84 <_free_r>
 80086da:	2000      	movs	r0, #0
 80086dc:	6360      	str	r0, [r4, #52]	; 0x34
 80086de:	e7c1      	b.n	8008664 <__sflush_r+0x1c>
 80086e0:	6a21      	ldr	r1, [r4, #32]
 80086e2:	2301      	movs	r3, #1
 80086e4:	4628      	mov	r0, r5
 80086e6:	47b0      	blx	r6
 80086e8:	1c41      	adds	r1, r0, #1
 80086ea:	d1c7      	bne.n	800867c <__sflush_r+0x34>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0c4      	beq.n	800867c <__sflush_r+0x34>
 80086f2:	2b1d      	cmp	r3, #29
 80086f4:	d001      	beq.n	80086fa <__sflush_r+0xb2>
 80086f6:	2b16      	cmp	r3, #22
 80086f8:	d101      	bne.n	80086fe <__sflush_r+0xb6>
 80086fa:	602f      	str	r7, [r5, #0]
 80086fc:	e7b1      	b.n	8008662 <__sflush_r+0x1a>
 80086fe:	89a3      	ldrh	r3, [r4, #12]
 8008700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008704:	81a3      	strh	r3, [r4, #12]
 8008706:	e7ad      	b.n	8008664 <__sflush_r+0x1c>
 8008708:	690f      	ldr	r7, [r1, #16]
 800870a:	2f00      	cmp	r7, #0
 800870c:	d0a9      	beq.n	8008662 <__sflush_r+0x1a>
 800870e:	0793      	lsls	r3, r2, #30
 8008710:	680e      	ldr	r6, [r1, #0]
 8008712:	bf08      	it	eq
 8008714:	694b      	ldreq	r3, [r1, #20]
 8008716:	600f      	str	r7, [r1, #0]
 8008718:	bf18      	it	ne
 800871a:	2300      	movne	r3, #0
 800871c:	eba6 0807 	sub.w	r8, r6, r7
 8008720:	608b      	str	r3, [r1, #8]
 8008722:	f1b8 0f00 	cmp.w	r8, #0
 8008726:	dd9c      	ble.n	8008662 <__sflush_r+0x1a>
 8008728:	6a21      	ldr	r1, [r4, #32]
 800872a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800872c:	4643      	mov	r3, r8
 800872e:	463a      	mov	r2, r7
 8008730:	4628      	mov	r0, r5
 8008732:	47b0      	blx	r6
 8008734:	2800      	cmp	r0, #0
 8008736:	dc06      	bgt.n	8008746 <__sflush_r+0xfe>
 8008738:	89a3      	ldrh	r3, [r4, #12]
 800873a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800873e:	81a3      	strh	r3, [r4, #12]
 8008740:	f04f 30ff 	mov.w	r0, #4294967295
 8008744:	e78e      	b.n	8008664 <__sflush_r+0x1c>
 8008746:	4407      	add	r7, r0
 8008748:	eba8 0800 	sub.w	r8, r8, r0
 800874c:	e7e9      	b.n	8008722 <__sflush_r+0xda>
 800874e:	bf00      	nop
 8008750:	20400001 	.word	0x20400001

08008754 <_fflush_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	690b      	ldr	r3, [r1, #16]
 8008758:	4605      	mov	r5, r0
 800875a:	460c      	mov	r4, r1
 800875c:	b913      	cbnz	r3, 8008764 <_fflush_r+0x10>
 800875e:	2500      	movs	r5, #0
 8008760:	4628      	mov	r0, r5
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	b118      	cbz	r0, 800876e <_fflush_r+0x1a>
 8008766:	6983      	ldr	r3, [r0, #24]
 8008768:	b90b      	cbnz	r3, 800876e <_fflush_r+0x1a>
 800876a:	f000 f887 	bl	800887c <__sinit>
 800876e:	4b14      	ldr	r3, [pc, #80]	; (80087c0 <_fflush_r+0x6c>)
 8008770:	429c      	cmp	r4, r3
 8008772:	d11b      	bne.n	80087ac <_fflush_r+0x58>
 8008774:	686c      	ldr	r4, [r5, #4]
 8008776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d0ef      	beq.n	800875e <_fflush_r+0xa>
 800877e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008780:	07d0      	lsls	r0, r2, #31
 8008782:	d404      	bmi.n	800878e <_fflush_r+0x3a>
 8008784:	0599      	lsls	r1, r3, #22
 8008786:	d402      	bmi.n	800878e <_fflush_r+0x3a>
 8008788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800878a:	f000 f915 	bl	80089b8 <__retarget_lock_acquire_recursive>
 800878e:	4628      	mov	r0, r5
 8008790:	4621      	mov	r1, r4
 8008792:	f7ff ff59 	bl	8008648 <__sflush_r>
 8008796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008798:	07da      	lsls	r2, r3, #31
 800879a:	4605      	mov	r5, r0
 800879c:	d4e0      	bmi.n	8008760 <_fflush_r+0xc>
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	059b      	lsls	r3, r3, #22
 80087a2:	d4dd      	bmi.n	8008760 <_fflush_r+0xc>
 80087a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087a6:	f000 f908 	bl	80089ba <__retarget_lock_release_recursive>
 80087aa:	e7d9      	b.n	8008760 <_fflush_r+0xc>
 80087ac:	4b05      	ldr	r3, [pc, #20]	; (80087c4 <_fflush_r+0x70>)
 80087ae:	429c      	cmp	r4, r3
 80087b0:	d101      	bne.n	80087b6 <_fflush_r+0x62>
 80087b2:	68ac      	ldr	r4, [r5, #8]
 80087b4:	e7df      	b.n	8008776 <_fflush_r+0x22>
 80087b6:	4b04      	ldr	r3, [pc, #16]	; (80087c8 <_fflush_r+0x74>)
 80087b8:	429c      	cmp	r4, r3
 80087ba:	bf08      	it	eq
 80087bc:	68ec      	ldreq	r4, [r5, #12]
 80087be:	e7da      	b.n	8008776 <_fflush_r+0x22>
 80087c0:	08009e10 	.word	0x08009e10
 80087c4:	08009e30 	.word	0x08009e30
 80087c8:	08009df0 	.word	0x08009df0

080087cc <std>:
 80087cc:	2300      	movs	r3, #0
 80087ce:	b510      	push	{r4, lr}
 80087d0:	4604      	mov	r4, r0
 80087d2:	e9c0 3300 	strd	r3, r3, [r0]
 80087d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80087da:	6083      	str	r3, [r0, #8]
 80087dc:	8181      	strh	r1, [r0, #12]
 80087de:	6643      	str	r3, [r0, #100]	; 0x64
 80087e0:	81c2      	strh	r2, [r0, #14]
 80087e2:	6183      	str	r3, [r0, #24]
 80087e4:	4619      	mov	r1, r3
 80087e6:	2208      	movs	r2, #8
 80087e8:	305c      	adds	r0, #92	; 0x5c
 80087ea:	f7ff fdef 	bl	80083cc <memset>
 80087ee:	4b05      	ldr	r3, [pc, #20]	; (8008804 <std+0x38>)
 80087f0:	6263      	str	r3, [r4, #36]	; 0x24
 80087f2:	4b05      	ldr	r3, [pc, #20]	; (8008808 <std+0x3c>)
 80087f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80087f6:	4b05      	ldr	r3, [pc, #20]	; (800880c <std+0x40>)
 80087f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80087fa:	4b05      	ldr	r3, [pc, #20]	; (8008810 <std+0x44>)
 80087fc:	6224      	str	r4, [r4, #32]
 80087fe:	6323      	str	r3, [r4, #48]	; 0x30
 8008800:	bd10      	pop	{r4, pc}
 8008802:	bf00      	nop
 8008804:	08008bf9 	.word	0x08008bf9
 8008808:	08008c1b 	.word	0x08008c1b
 800880c:	08008c53 	.word	0x08008c53
 8008810:	08008c77 	.word	0x08008c77

08008814 <_cleanup_r>:
 8008814:	4901      	ldr	r1, [pc, #4]	; (800881c <_cleanup_r+0x8>)
 8008816:	f000 b8af 	b.w	8008978 <_fwalk_reent>
 800881a:	bf00      	nop
 800881c:	08008755 	.word	0x08008755

08008820 <__sfmoreglue>:
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	1e4a      	subs	r2, r1, #1
 8008824:	2568      	movs	r5, #104	; 0x68
 8008826:	4355      	muls	r5, r2
 8008828:	460e      	mov	r6, r1
 800882a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800882e:	f000 f979 	bl	8008b24 <_malloc_r>
 8008832:	4604      	mov	r4, r0
 8008834:	b140      	cbz	r0, 8008848 <__sfmoreglue+0x28>
 8008836:	2100      	movs	r1, #0
 8008838:	e9c0 1600 	strd	r1, r6, [r0]
 800883c:	300c      	adds	r0, #12
 800883e:	60a0      	str	r0, [r4, #8]
 8008840:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008844:	f7ff fdc2 	bl	80083cc <memset>
 8008848:	4620      	mov	r0, r4
 800884a:	bd70      	pop	{r4, r5, r6, pc}

0800884c <__sfp_lock_acquire>:
 800884c:	4801      	ldr	r0, [pc, #4]	; (8008854 <__sfp_lock_acquire+0x8>)
 800884e:	f000 b8b3 	b.w	80089b8 <__retarget_lock_acquire_recursive>
 8008852:	bf00      	nop
 8008854:	200045d0 	.word	0x200045d0

08008858 <__sfp_lock_release>:
 8008858:	4801      	ldr	r0, [pc, #4]	; (8008860 <__sfp_lock_release+0x8>)
 800885a:	f000 b8ae 	b.w	80089ba <__retarget_lock_release_recursive>
 800885e:	bf00      	nop
 8008860:	200045d0 	.word	0x200045d0

08008864 <__sinit_lock_acquire>:
 8008864:	4801      	ldr	r0, [pc, #4]	; (800886c <__sinit_lock_acquire+0x8>)
 8008866:	f000 b8a7 	b.w	80089b8 <__retarget_lock_acquire_recursive>
 800886a:	bf00      	nop
 800886c:	200045cb 	.word	0x200045cb

08008870 <__sinit_lock_release>:
 8008870:	4801      	ldr	r0, [pc, #4]	; (8008878 <__sinit_lock_release+0x8>)
 8008872:	f000 b8a2 	b.w	80089ba <__retarget_lock_release_recursive>
 8008876:	bf00      	nop
 8008878:	200045cb 	.word	0x200045cb

0800887c <__sinit>:
 800887c:	b510      	push	{r4, lr}
 800887e:	4604      	mov	r4, r0
 8008880:	f7ff fff0 	bl	8008864 <__sinit_lock_acquire>
 8008884:	69a3      	ldr	r3, [r4, #24]
 8008886:	b11b      	cbz	r3, 8008890 <__sinit+0x14>
 8008888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800888c:	f7ff bff0 	b.w	8008870 <__sinit_lock_release>
 8008890:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008894:	6523      	str	r3, [r4, #80]	; 0x50
 8008896:	4b13      	ldr	r3, [pc, #76]	; (80088e4 <__sinit+0x68>)
 8008898:	4a13      	ldr	r2, [pc, #76]	; (80088e8 <__sinit+0x6c>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	62a2      	str	r2, [r4, #40]	; 0x28
 800889e:	42a3      	cmp	r3, r4
 80088a0:	bf04      	itt	eq
 80088a2:	2301      	moveq	r3, #1
 80088a4:	61a3      	streq	r3, [r4, #24]
 80088a6:	4620      	mov	r0, r4
 80088a8:	f000 f820 	bl	80088ec <__sfp>
 80088ac:	6060      	str	r0, [r4, #4]
 80088ae:	4620      	mov	r0, r4
 80088b0:	f000 f81c 	bl	80088ec <__sfp>
 80088b4:	60a0      	str	r0, [r4, #8]
 80088b6:	4620      	mov	r0, r4
 80088b8:	f000 f818 	bl	80088ec <__sfp>
 80088bc:	2200      	movs	r2, #0
 80088be:	60e0      	str	r0, [r4, #12]
 80088c0:	2104      	movs	r1, #4
 80088c2:	6860      	ldr	r0, [r4, #4]
 80088c4:	f7ff ff82 	bl	80087cc <std>
 80088c8:	68a0      	ldr	r0, [r4, #8]
 80088ca:	2201      	movs	r2, #1
 80088cc:	2109      	movs	r1, #9
 80088ce:	f7ff ff7d 	bl	80087cc <std>
 80088d2:	68e0      	ldr	r0, [r4, #12]
 80088d4:	2202      	movs	r2, #2
 80088d6:	2112      	movs	r1, #18
 80088d8:	f7ff ff78 	bl	80087cc <std>
 80088dc:	2301      	movs	r3, #1
 80088de:	61a3      	str	r3, [r4, #24]
 80088e0:	e7d2      	b.n	8008888 <__sinit+0xc>
 80088e2:	bf00      	nop
 80088e4:	08009dec 	.word	0x08009dec
 80088e8:	08008815 	.word	0x08008815

080088ec <__sfp>:
 80088ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ee:	4607      	mov	r7, r0
 80088f0:	f7ff ffac 	bl	800884c <__sfp_lock_acquire>
 80088f4:	4b1e      	ldr	r3, [pc, #120]	; (8008970 <__sfp+0x84>)
 80088f6:	681e      	ldr	r6, [r3, #0]
 80088f8:	69b3      	ldr	r3, [r6, #24]
 80088fa:	b913      	cbnz	r3, 8008902 <__sfp+0x16>
 80088fc:	4630      	mov	r0, r6
 80088fe:	f7ff ffbd 	bl	800887c <__sinit>
 8008902:	3648      	adds	r6, #72	; 0x48
 8008904:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008908:	3b01      	subs	r3, #1
 800890a:	d503      	bpl.n	8008914 <__sfp+0x28>
 800890c:	6833      	ldr	r3, [r6, #0]
 800890e:	b30b      	cbz	r3, 8008954 <__sfp+0x68>
 8008910:	6836      	ldr	r6, [r6, #0]
 8008912:	e7f7      	b.n	8008904 <__sfp+0x18>
 8008914:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008918:	b9d5      	cbnz	r5, 8008950 <__sfp+0x64>
 800891a:	4b16      	ldr	r3, [pc, #88]	; (8008974 <__sfp+0x88>)
 800891c:	60e3      	str	r3, [r4, #12]
 800891e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008922:	6665      	str	r5, [r4, #100]	; 0x64
 8008924:	f000 f847 	bl	80089b6 <__retarget_lock_init_recursive>
 8008928:	f7ff ff96 	bl	8008858 <__sfp_lock_release>
 800892c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008930:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008934:	6025      	str	r5, [r4, #0]
 8008936:	61a5      	str	r5, [r4, #24]
 8008938:	2208      	movs	r2, #8
 800893a:	4629      	mov	r1, r5
 800893c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008940:	f7ff fd44 	bl	80083cc <memset>
 8008944:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008948:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800894c:	4620      	mov	r0, r4
 800894e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008950:	3468      	adds	r4, #104	; 0x68
 8008952:	e7d9      	b.n	8008908 <__sfp+0x1c>
 8008954:	2104      	movs	r1, #4
 8008956:	4638      	mov	r0, r7
 8008958:	f7ff ff62 	bl	8008820 <__sfmoreglue>
 800895c:	4604      	mov	r4, r0
 800895e:	6030      	str	r0, [r6, #0]
 8008960:	2800      	cmp	r0, #0
 8008962:	d1d5      	bne.n	8008910 <__sfp+0x24>
 8008964:	f7ff ff78 	bl	8008858 <__sfp_lock_release>
 8008968:	230c      	movs	r3, #12
 800896a:	603b      	str	r3, [r7, #0]
 800896c:	e7ee      	b.n	800894c <__sfp+0x60>
 800896e:	bf00      	nop
 8008970:	08009dec 	.word	0x08009dec
 8008974:	ffff0001 	.word	0xffff0001

08008978 <_fwalk_reent>:
 8008978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800897c:	4606      	mov	r6, r0
 800897e:	4688      	mov	r8, r1
 8008980:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008984:	2700      	movs	r7, #0
 8008986:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800898a:	f1b9 0901 	subs.w	r9, r9, #1
 800898e:	d505      	bpl.n	800899c <_fwalk_reent+0x24>
 8008990:	6824      	ldr	r4, [r4, #0]
 8008992:	2c00      	cmp	r4, #0
 8008994:	d1f7      	bne.n	8008986 <_fwalk_reent+0xe>
 8008996:	4638      	mov	r0, r7
 8008998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800899c:	89ab      	ldrh	r3, [r5, #12]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d907      	bls.n	80089b2 <_fwalk_reent+0x3a>
 80089a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089a6:	3301      	adds	r3, #1
 80089a8:	d003      	beq.n	80089b2 <_fwalk_reent+0x3a>
 80089aa:	4629      	mov	r1, r5
 80089ac:	4630      	mov	r0, r6
 80089ae:	47c0      	blx	r8
 80089b0:	4307      	orrs	r7, r0
 80089b2:	3568      	adds	r5, #104	; 0x68
 80089b4:	e7e9      	b.n	800898a <_fwalk_reent+0x12>

080089b6 <__retarget_lock_init_recursive>:
 80089b6:	4770      	bx	lr

080089b8 <__retarget_lock_acquire_recursive>:
 80089b8:	4770      	bx	lr

080089ba <__retarget_lock_release_recursive>:
 80089ba:	4770      	bx	lr

080089bc <__swhatbuf_r>:
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	460e      	mov	r6, r1
 80089c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089c4:	2900      	cmp	r1, #0
 80089c6:	b096      	sub	sp, #88	; 0x58
 80089c8:	4614      	mov	r4, r2
 80089ca:	461d      	mov	r5, r3
 80089cc:	da07      	bge.n	80089de <__swhatbuf_r+0x22>
 80089ce:	2300      	movs	r3, #0
 80089d0:	602b      	str	r3, [r5, #0]
 80089d2:	89b3      	ldrh	r3, [r6, #12]
 80089d4:	061a      	lsls	r2, r3, #24
 80089d6:	d410      	bmi.n	80089fa <__swhatbuf_r+0x3e>
 80089d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089dc:	e00e      	b.n	80089fc <__swhatbuf_r+0x40>
 80089de:	466a      	mov	r2, sp
 80089e0:	f000 f970 	bl	8008cc4 <_fstat_r>
 80089e4:	2800      	cmp	r0, #0
 80089e6:	dbf2      	blt.n	80089ce <__swhatbuf_r+0x12>
 80089e8:	9a01      	ldr	r2, [sp, #4]
 80089ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80089ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80089f2:	425a      	negs	r2, r3
 80089f4:	415a      	adcs	r2, r3
 80089f6:	602a      	str	r2, [r5, #0]
 80089f8:	e7ee      	b.n	80089d8 <__swhatbuf_r+0x1c>
 80089fa:	2340      	movs	r3, #64	; 0x40
 80089fc:	2000      	movs	r0, #0
 80089fe:	6023      	str	r3, [r4, #0]
 8008a00:	b016      	add	sp, #88	; 0x58
 8008a02:	bd70      	pop	{r4, r5, r6, pc}

08008a04 <__smakebuf_r>:
 8008a04:	898b      	ldrh	r3, [r1, #12]
 8008a06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a08:	079d      	lsls	r5, r3, #30
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	d507      	bpl.n	8008a20 <__smakebuf_r+0x1c>
 8008a10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a14:	6023      	str	r3, [r4, #0]
 8008a16:	6123      	str	r3, [r4, #16]
 8008a18:	2301      	movs	r3, #1
 8008a1a:	6163      	str	r3, [r4, #20]
 8008a1c:	b002      	add	sp, #8
 8008a1e:	bd70      	pop	{r4, r5, r6, pc}
 8008a20:	ab01      	add	r3, sp, #4
 8008a22:	466a      	mov	r2, sp
 8008a24:	f7ff ffca 	bl	80089bc <__swhatbuf_r>
 8008a28:	9900      	ldr	r1, [sp, #0]
 8008a2a:	4605      	mov	r5, r0
 8008a2c:	4630      	mov	r0, r6
 8008a2e:	f000 f879 	bl	8008b24 <_malloc_r>
 8008a32:	b948      	cbnz	r0, 8008a48 <__smakebuf_r+0x44>
 8008a34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a38:	059a      	lsls	r2, r3, #22
 8008a3a:	d4ef      	bmi.n	8008a1c <__smakebuf_r+0x18>
 8008a3c:	f023 0303 	bic.w	r3, r3, #3
 8008a40:	f043 0302 	orr.w	r3, r3, #2
 8008a44:	81a3      	strh	r3, [r4, #12]
 8008a46:	e7e3      	b.n	8008a10 <__smakebuf_r+0xc>
 8008a48:	4b0d      	ldr	r3, [pc, #52]	; (8008a80 <__smakebuf_r+0x7c>)
 8008a4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	6020      	str	r0, [r4, #0]
 8008a50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a54:	81a3      	strh	r3, [r4, #12]
 8008a56:	9b00      	ldr	r3, [sp, #0]
 8008a58:	6163      	str	r3, [r4, #20]
 8008a5a:	9b01      	ldr	r3, [sp, #4]
 8008a5c:	6120      	str	r0, [r4, #16]
 8008a5e:	b15b      	cbz	r3, 8008a78 <__smakebuf_r+0x74>
 8008a60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a64:	4630      	mov	r0, r6
 8008a66:	f000 f93f 	bl	8008ce8 <_isatty_r>
 8008a6a:	b128      	cbz	r0, 8008a78 <__smakebuf_r+0x74>
 8008a6c:	89a3      	ldrh	r3, [r4, #12]
 8008a6e:	f023 0303 	bic.w	r3, r3, #3
 8008a72:	f043 0301 	orr.w	r3, r3, #1
 8008a76:	81a3      	strh	r3, [r4, #12]
 8008a78:	89a0      	ldrh	r0, [r4, #12]
 8008a7a:	4305      	orrs	r5, r0
 8008a7c:	81a5      	strh	r5, [r4, #12]
 8008a7e:	e7cd      	b.n	8008a1c <__smakebuf_r+0x18>
 8008a80:	08008815 	.word	0x08008815

08008a84 <_free_r>:
 8008a84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a86:	2900      	cmp	r1, #0
 8008a88:	d048      	beq.n	8008b1c <_free_r+0x98>
 8008a8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a8e:	9001      	str	r0, [sp, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f1a1 0404 	sub.w	r4, r1, #4
 8008a96:	bfb8      	it	lt
 8008a98:	18e4      	addlt	r4, r4, r3
 8008a9a:	f000 f947 	bl	8008d2c <__malloc_lock>
 8008a9e:	4a20      	ldr	r2, [pc, #128]	; (8008b20 <_free_r+0x9c>)
 8008aa0:	9801      	ldr	r0, [sp, #4]
 8008aa2:	6813      	ldr	r3, [r2, #0]
 8008aa4:	4615      	mov	r5, r2
 8008aa6:	b933      	cbnz	r3, 8008ab6 <_free_r+0x32>
 8008aa8:	6063      	str	r3, [r4, #4]
 8008aaa:	6014      	str	r4, [r2, #0]
 8008aac:	b003      	add	sp, #12
 8008aae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ab2:	f000 b941 	b.w	8008d38 <__malloc_unlock>
 8008ab6:	42a3      	cmp	r3, r4
 8008ab8:	d90b      	bls.n	8008ad2 <_free_r+0x4e>
 8008aba:	6821      	ldr	r1, [r4, #0]
 8008abc:	1862      	adds	r2, r4, r1
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	bf04      	itt	eq
 8008ac2:	681a      	ldreq	r2, [r3, #0]
 8008ac4:	685b      	ldreq	r3, [r3, #4]
 8008ac6:	6063      	str	r3, [r4, #4]
 8008ac8:	bf04      	itt	eq
 8008aca:	1852      	addeq	r2, r2, r1
 8008acc:	6022      	streq	r2, [r4, #0]
 8008ace:	602c      	str	r4, [r5, #0]
 8008ad0:	e7ec      	b.n	8008aac <_free_r+0x28>
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	b10b      	cbz	r3, 8008adc <_free_r+0x58>
 8008ad8:	42a3      	cmp	r3, r4
 8008ada:	d9fa      	bls.n	8008ad2 <_free_r+0x4e>
 8008adc:	6811      	ldr	r1, [r2, #0]
 8008ade:	1855      	adds	r5, r2, r1
 8008ae0:	42a5      	cmp	r5, r4
 8008ae2:	d10b      	bne.n	8008afc <_free_r+0x78>
 8008ae4:	6824      	ldr	r4, [r4, #0]
 8008ae6:	4421      	add	r1, r4
 8008ae8:	1854      	adds	r4, r2, r1
 8008aea:	42a3      	cmp	r3, r4
 8008aec:	6011      	str	r1, [r2, #0]
 8008aee:	d1dd      	bne.n	8008aac <_free_r+0x28>
 8008af0:	681c      	ldr	r4, [r3, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	6053      	str	r3, [r2, #4]
 8008af6:	4421      	add	r1, r4
 8008af8:	6011      	str	r1, [r2, #0]
 8008afa:	e7d7      	b.n	8008aac <_free_r+0x28>
 8008afc:	d902      	bls.n	8008b04 <_free_r+0x80>
 8008afe:	230c      	movs	r3, #12
 8008b00:	6003      	str	r3, [r0, #0]
 8008b02:	e7d3      	b.n	8008aac <_free_r+0x28>
 8008b04:	6825      	ldr	r5, [r4, #0]
 8008b06:	1961      	adds	r1, r4, r5
 8008b08:	428b      	cmp	r3, r1
 8008b0a:	bf04      	itt	eq
 8008b0c:	6819      	ldreq	r1, [r3, #0]
 8008b0e:	685b      	ldreq	r3, [r3, #4]
 8008b10:	6063      	str	r3, [r4, #4]
 8008b12:	bf04      	itt	eq
 8008b14:	1949      	addeq	r1, r1, r5
 8008b16:	6021      	streq	r1, [r4, #0]
 8008b18:	6054      	str	r4, [r2, #4]
 8008b1a:	e7c7      	b.n	8008aac <_free_r+0x28>
 8008b1c:	b003      	add	sp, #12
 8008b1e:	bd30      	pop	{r4, r5, pc}
 8008b20:	20004040 	.word	0x20004040

08008b24 <_malloc_r>:
 8008b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b26:	1ccd      	adds	r5, r1, #3
 8008b28:	f025 0503 	bic.w	r5, r5, #3
 8008b2c:	3508      	adds	r5, #8
 8008b2e:	2d0c      	cmp	r5, #12
 8008b30:	bf38      	it	cc
 8008b32:	250c      	movcc	r5, #12
 8008b34:	2d00      	cmp	r5, #0
 8008b36:	4606      	mov	r6, r0
 8008b38:	db01      	blt.n	8008b3e <_malloc_r+0x1a>
 8008b3a:	42a9      	cmp	r1, r5
 8008b3c:	d903      	bls.n	8008b46 <_malloc_r+0x22>
 8008b3e:	230c      	movs	r3, #12
 8008b40:	6033      	str	r3, [r6, #0]
 8008b42:	2000      	movs	r0, #0
 8008b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b46:	f000 f8f1 	bl	8008d2c <__malloc_lock>
 8008b4a:	4921      	ldr	r1, [pc, #132]	; (8008bd0 <_malloc_r+0xac>)
 8008b4c:	680a      	ldr	r2, [r1, #0]
 8008b4e:	4614      	mov	r4, r2
 8008b50:	b99c      	cbnz	r4, 8008b7a <_malloc_r+0x56>
 8008b52:	4f20      	ldr	r7, [pc, #128]	; (8008bd4 <_malloc_r+0xb0>)
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	b923      	cbnz	r3, 8008b62 <_malloc_r+0x3e>
 8008b58:	4621      	mov	r1, r4
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f000 f83c 	bl	8008bd8 <_sbrk_r>
 8008b60:	6038      	str	r0, [r7, #0]
 8008b62:	4629      	mov	r1, r5
 8008b64:	4630      	mov	r0, r6
 8008b66:	f000 f837 	bl	8008bd8 <_sbrk_r>
 8008b6a:	1c43      	adds	r3, r0, #1
 8008b6c:	d123      	bne.n	8008bb6 <_malloc_r+0x92>
 8008b6e:	230c      	movs	r3, #12
 8008b70:	6033      	str	r3, [r6, #0]
 8008b72:	4630      	mov	r0, r6
 8008b74:	f000 f8e0 	bl	8008d38 <__malloc_unlock>
 8008b78:	e7e3      	b.n	8008b42 <_malloc_r+0x1e>
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	1b5b      	subs	r3, r3, r5
 8008b7e:	d417      	bmi.n	8008bb0 <_malloc_r+0x8c>
 8008b80:	2b0b      	cmp	r3, #11
 8008b82:	d903      	bls.n	8008b8c <_malloc_r+0x68>
 8008b84:	6023      	str	r3, [r4, #0]
 8008b86:	441c      	add	r4, r3
 8008b88:	6025      	str	r5, [r4, #0]
 8008b8a:	e004      	b.n	8008b96 <_malloc_r+0x72>
 8008b8c:	6863      	ldr	r3, [r4, #4]
 8008b8e:	42a2      	cmp	r2, r4
 8008b90:	bf0c      	ite	eq
 8008b92:	600b      	streq	r3, [r1, #0]
 8008b94:	6053      	strne	r3, [r2, #4]
 8008b96:	4630      	mov	r0, r6
 8008b98:	f000 f8ce 	bl	8008d38 <__malloc_unlock>
 8008b9c:	f104 000b 	add.w	r0, r4, #11
 8008ba0:	1d23      	adds	r3, r4, #4
 8008ba2:	f020 0007 	bic.w	r0, r0, #7
 8008ba6:	1ac2      	subs	r2, r0, r3
 8008ba8:	d0cc      	beq.n	8008b44 <_malloc_r+0x20>
 8008baa:	1a1b      	subs	r3, r3, r0
 8008bac:	50a3      	str	r3, [r4, r2]
 8008bae:	e7c9      	b.n	8008b44 <_malloc_r+0x20>
 8008bb0:	4622      	mov	r2, r4
 8008bb2:	6864      	ldr	r4, [r4, #4]
 8008bb4:	e7cc      	b.n	8008b50 <_malloc_r+0x2c>
 8008bb6:	1cc4      	adds	r4, r0, #3
 8008bb8:	f024 0403 	bic.w	r4, r4, #3
 8008bbc:	42a0      	cmp	r0, r4
 8008bbe:	d0e3      	beq.n	8008b88 <_malloc_r+0x64>
 8008bc0:	1a21      	subs	r1, r4, r0
 8008bc2:	4630      	mov	r0, r6
 8008bc4:	f000 f808 	bl	8008bd8 <_sbrk_r>
 8008bc8:	3001      	adds	r0, #1
 8008bca:	d1dd      	bne.n	8008b88 <_malloc_r+0x64>
 8008bcc:	e7cf      	b.n	8008b6e <_malloc_r+0x4a>
 8008bce:	bf00      	nop
 8008bd0:	20004040 	.word	0x20004040
 8008bd4:	20004044 	.word	0x20004044

08008bd8 <_sbrk_r>:
 8008bd8:	b538      	push	{r3, r4, r5, lr}
 8008bda:	4d06      	ldr	r5, [pc, #24]	; (8008bf4 <_sbrk_r+0x1c>)
 8008bdc:	2300      	movs	r3, #0
 8008bde:	4604      	mov	r4, r0
 8008be0:	4608      	mov	r0, r1
 8008be2:	602b      	str	r3, [r5, #0]
 8008be4:	f7f9 fb16 	bl	8002214 <_sbrk>
 8008be8:	1c43      	adds	r3, r0, #1
 8008bea:	d102      	bne.n	8008bf2 <_sbrk_r+0x1a>
 8008bec:	682b      	ldr	r3, [r5, #0]
 8008bee:	b103      	cbz	r3, 8008bf2 <_sbrk_r+0x1a>
 8008bf0:	6023      	str	r3, [r4, #0]
 8008bf2:	bd38      	pop	{r3, r4, r5, pc}
 8008bf4:	200045d4 	.word	0x200045d4

08008bf8 <__sread>:
 8008bf8:	b510      	push	{r4, lr}
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c00:	f000 f8a0 	bl	8008d44 <_read_r>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	bfab      	itete	ge
 8008c08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8008c0c:	181b      	addge	r3, r3, r0
 8008c0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c12:	bfac      	ite	ge
 8008c14:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c16:	81a3      	strhlt	r3, [r4, #12]
 8008c18:	bd10      	pop	{r4, pc}

08008c1a <__swrite>:
 8008c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1e:	461f      	mov	r7, r3
 8008c20:	898b      	ldrh	r3, [r1, #12]
 8008c22:	05db      	lsls	r3, r3, #23
 8008c24:	4605      	mov	r5, r0
 8008c26:	460c      	mov	r4, r1
 8008c28:	4616      	mov	r6, r2
 8008c2a:	d505      	bpl.n	8008c38 <__swrite+0x1e>
 8008c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c30:	2302      	movs	r3, #2
 8008c32:	2200      	movs	r2, #0
 8008c34:	f000 f868 	bl	8008d08 <_lseek_r>
 8008c38:	89a3      	ldrh	r3, [r4, #12]
 8008c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c42:	81a3      	strh	r3, [r4, #12]
 8008c44:	4632      	mov	r2, r6
 8008c46:	463b      	mov	r3, r7
 8008c48:	4628      	mov	r0, r5
 8008c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c4e:	f000 b817 	b.w	8008c80 <_write_r>

08008c52 <__sseek>:
 8008c52:	b510      	push	{r4, lr}
 8008c54:	460c      	mov	r4, r1
 8008c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c5a:	f000 f855 	bl	8008d08 <_lseek_r>
 8008c5e:	1c43      	adds	r3, r0, #1
 8008c60:	89a3      	ldrh	r3, [r4, #12]
 8008c62:	bf15      	itete	ne
 8008c64:	6560      	strne	r0, [r4, #84]	; 0x54
 8008c66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008c6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008c6e:	81a3      	strheq	r3, [r4, #12]
 8008c70:	bf18      	it	ne
 8008c72:	81a3      	strhne	r3, [r4, #12]
 8008c74:	bd10      	pop	{r4, pc}

08008c76 <__sclose>:
 8008c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c7a:	f000 b813 	b.w	8008ca4 <_close_r>
	...

08008c80 <_write_r>:
 8008c80:	b538      	push	{r3, r4, r5, lr}
 8008c82:	4d07      	ldr	r5, [pc, #28]	; (8008ca0 <_write_r+0x20>)
 8008c84:	4604      	mov	r4, r0
 8008c86:	4608      	mov	r0, r1
 8008c88:	4611      	mov	r1, r2
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	602a      	str	r2, [r5, #0]
 8008c8e:	461a      	mov	r2, r3
 8008c90:	f7f9 fa6f 	bl	8002172 <_write>
 8008c94:	1c43      	adds	r3, r0, #1
 8008c96:	d102      	bne.n	8008c9e <_write_r+0x1e>
 8008c98:	682b      	ldr	r3, [r5, #0]
 8008c9a:	b103      	cbz	r3, 8008c9e <_write_r+0x1e>
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	bd38      	pop	{r3, r4, r5, pc}
 8008ca0:	200045d4 	.word	0x200045d4

08008ca4 <_close_r>:
 8008ca4:	b538      	push	{r3, r4, r5, lr}
 8008ca6:	4d06      	ldr	r5, [pc, #24]	; (8008cc0 <_close_r+0x1c>)
 8008ca8:	2300      	movs	r3, #0
 8008caa:	4604      	mov	r4, r0
 8008cac:	4608      	mov	r0, r1
 8008cae:	602b      	str	r3, [r5, #0]
 8008cb0:	f7f9 fa7b 	bl	80021aa <_close>
 8008cb4:	1c43      	adds	r3, r0, #1
 8008cb6:	d102      	bne.n	8008cbe <_close_r+0x1a>
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	b103      	cbz	r3, 8008cbe <_close_r+0x1a>
 8008cbc:	6023      	str	r3, [r4, #0]
 8008cbe:	bd38      	pop	{r3, r4, r5, pc}
 8008cc0:	200045d4 	.word	0x200045d4

08008cc4 <_fstat_r>:
 8008cc4:	b538      	push	{r3, r4, r5, lr}
 8008cc6:	4d07      	ldr	r5, [pc, #28]	; (8008ce4 <_fstat_r+0x20>)
 8008cc8:	2300      	movs	r3, #0
 8008cca:	4604      	mov	r4, r0
 8008ccc:	4608      	mov	r0, r1
 8008cce:	4611      	mov	r1, r2
 8008cd0:	602b      	str	r3, [r5, #0]
 8008cd2:	f7f9 fa76 	bl	80021c2 <_fstat>
 8008cd6:	1c43      	adds	r3, r0, #1
 8008cd8:	d102      	bne.n	8008ce0 <_fstat_r+0x1c>
 8008cda:	682b      	ldr	r3, [r5, #0]
 8008cdc:	b103      	cbz	r3, 8008ce0 <_fstat_r+0x1c>
 8008cde:	6023      	str	r3, [r4, #0]
 8008ce0:	bd38      	pop	{r3, r4, r5, pc}
 8008ce2:	bf00      	nop
 8008ce4:	200045d4 	.word	0x200045d4

08008ce8 <_isatty_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	4d06      	ldr	r5, [pc, #24]	; (8008d04 <_isatty_r+0x1c>)
 8008cec:	2300      	movs	r3, #0
 8008cee:	4604      	mov	r4, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	602b      	str	r3, [r5, #0]
 8008cf4:	f7f9 fa75 	bl	80021e2 <_isatty>
 8008cf8:	1c43      	adds	r3, r0, #1
 8008cfa:	d102      	bne.n	8008d02 <_isatty_r+0x1a>
 8008cfc:	682b      	ldr	r3, [r5, #0]
 8008cfe:	b103      	cbz	r3, 8008d02 <_isatty_r+0x1a>
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	bd38      	pop	{r3, r4, r5, pc}
 8008d04:	200045d4 	.word	0x200045d4

08008d08 <_lseek_r>:
 8008d08:	b538      	push	{r3, r4, r5, lr}
 8008d0a:	4d07      	ldr	r5, [pc, #28]	; (8008d28 <_lseek_r+0x20>)
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	4608      	mov	r0, r1
 8008d10:	4611      	mov	r1, r2
 8008d12:	2200      	movs	r2, #0
 8008d14:	602a      	str	r2, [r5, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	f7f9 fa6e 	bl	80021f8 <_lseek>
 8008d1c:	1c43      	adds	r3, r0, #1
 8008d1e:	d102      	bne.n	8008d26 <_lseek_r+0x1e>
 8008d20:	682b      	ldr	r3, [r5, #0]
 8008d22:	b103      	cbz	r3, 8008d26 <_lseek_r+0x1e>
 8008d24:	6023      	str	r3, [r4, #0]
 8008d26:	bd38      	pop	{r3, r4, r5, pc}
 8008d28:	200045d4 	.word	0x200045d4

08008d2c <__malloc_lock>:
 8008d2c:	4801      	ldr	r0, [pc, #4]	; (8008d34 <__malloc_lock+0x8>)
 8008d2e:	f7ff be43 	b.w	80089b8 <__retarget_lock_acquire_recursive>
 8008d32:	bf00      	nop
 8008d34:	200045cc 	.word	0x200045cc

08008d38 <__malloc_unlock>:
 8008d38:	4801      	ldr	r0, [pc, #4]	; (8008d40 <__malloc_unlock+0x8>)
 8008d3a:	f7ff be3e 	b.w	80089ba <__retarget_lock_release_recursive>
 8008d3e:	bf00      	nop
 8008d40:	200045cc 	.word	0x200045cc

08008d44 <_read_r>:
 8008d44:	b538      	push	{r3, r4, r5, lr}
 8008d46:	4d07      	ldr	r5, [pc, #28]	; (8008d64 <_read_r+0x20>)
 8008d48:	4604      	mov	r4, r0
 8008d4a:	4608      	mov	r0, r1
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	2200      	movs	r2, #0
 8008d50:	602a      	str	r2, [r5, #0]
 8008d52:	461a      	mov	r2, r3
 8008d54:	f7f9 f9f0 	bl	8002138 <_read>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_read_r+0x1e>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_read_r+0x1e>
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	200045d4 	.word	0x200045d4

08008d68 <pow>:
 8008d68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d6c:	ec59 8b10 	vmov	r8, r9, d0
 8008d70:	ec57 6b11 	vmov	r6, r7, d1
 8008d74:	f000 f8a8 	bl	8008ec8 <__ieee754_pow>
 8008d78:	4b4e      	ldr	r3, [pc, #312]	; (8008eb4 <pow+0x14c>)
 8008d7a:	f993 3000 	ldrsb.w	r3, [r3]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	ec55 4b10 	vmov	r4, r5, d0
 8008d84:	d015      	beq.n	8008db2 <pow+0x4a>
 8008d86:	4632      	mov	r2, r6
 8008d88:	463b      	mov	r3, r7
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	4639      	mov	r1, r7
 8008d8e:	f7f7 fe75 	bl	8000a7c <__aeabi_dcmpun>
 8008d92:	b970      	cbnz	r0, 8008db2 <pow+0x4a>
 8008d94:	4642      	mov	r2, r8
 8008d96:	464b      	mov	r3, r9
 8008d98:	4640      	mov	r0, r8
 8008d9a:	4649      	mov	r1, r9
 8008d9c:	f7f7 fe6e 	bl	8000a7c <__aeabi_dcmpun>
 8008da0:	2200      	movs	r2, #0
 8008da2:	2300      	movs	r3, #0
 8008da4:	b148      	cbz	r0, 8008dba <pow+0x52>
 8008da6:	4630      	mov	r0, r6
 8008da8:	4639      	mov	r1, r7
 8008daa:	f7f7 fe35 	bl	8000a18 <__aeabi_dcmpeq>
 8008dae:	2800      	cmp	r0, #0
 8008db0:	d17d      	bne.n	8008eae <pow+0x146>
 8008db2:	ec45 4b10 	vmov	d0, r4, r5
 8008db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008dba:	4640      	mov	r0, r8
 8008dbc:	4649      	mov	r1, r9
 8008dbe:	f7f7 fe2b 	bl	8000a18 <__aeabi_dcmpeq>
 8008dc2:	b1e0      	cbz	r0, 8008dfe <pow+0x96>
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	4630      	mov	r0, r6
 8008dca:	4639      	mov	r1, r7
 8008dcc:	f7f7 fe24 	bl	8000a18 <__aeabi_dcmpeq>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d16c      	bne.n	8008eae <pow+0x146>
 8008dd4:	ec47 6b10 	vmov	d0, r6, r7
 8008dd8:	f000 fe55 	bl	8009a86 <finite>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d0e8      	beq.n	8008db2 <pow+0x4a>
 8008de0:	2200      	movs	r2, #0
 8008de2:	2300      	movs	r3, #0
 8008de4:	4630      	mov	r0, r6
 8008de6:	4639      	mov	r1, r7
 8008de8:	f7f7 fe20 	bl	8000a2c <__aeabi_dcmplt>
 8008dec:	2800      	cmp	r0, #0
 8008dee:	d0e0      	beq.n	8008db2 <pow+0x4a>
 8008df0:	f7ff fab4 	bl	800835c <__errno>
 8008df4:	2321      	movs	r3, #33	; 0x21
 8008df6:	6003      	str	r3, [r0, #0]
 8008df8:	2400      	movs	r4, #0
 8008dfa:	4d2f      	ldr	r5, [pc, #188]	; (8008eb8 <pow+0x150>)
 8008dfc:	e7d9      	b.n	8008db2 <pow+0x4a>
 8008dfe:	ec45 4b10 	vmov	d0, r4, r5
 8008e02:	f000 fe40 	bl	8009a86 <finite>
 8008e06:	bbb8      	cbnz	r0, 8008e78 <pow+0x110>
 8008e08:	ec49 8b10 	vmov	d0, r8, r9
 8008e0c:	f000 fe3b 	bl	8009a86 <finite>
 8008e10:	b390      	cbz	r0, 8008e78 <pow+0x110>
 8008e12:	ec47 6b10 	vmov	d0, r6, r7
 8008e16:	f000 fe36 	bl	8009a86 <finite>
 8008e1a:	b368      	cbz	r0, 8008e78 <pow+0x110>
 8008e1c:	4622      	mov	r2, r4
 8008e1e:	462b      	mov	r3, r5
 8008e20:	4620      	mov	r0, r4
 8008e22:	4629      	mov	r1, r5
 8008e24:	f7f7 fe2a 	bl	8000a7c <__aeabi_dcmpun>
 8008e28:	b160      	cbz	r0, 8008e44 <pow+0xdc>
 8008e2a:	f7ff fa97 	bl	800835c <__errno>
 8008e2e:	2321      	movs	r3, #33	; 0x21
 8008e30:	6003      	str	r3, [r0, #0]
 8008e32:	2200      	movs	r2, #0
 8008e34:	2300      	movs	r3, #0
 8008e36:	4610      	mov	r0, r2
 8008e38:	4619      	mov	r1, r3
 8008e3a:	f7f7 fcaf 	bl	800079c <__aeabi_ddiv>
 8008e3e:	4604      	mov	r4, r0
 8008e40:	460d      	mov	r5, r1
 8008e42:	e7b6      	b.n	8008db2 <pow+0x4a>
 8008e44:	f7ff fa8a 	bl	800835c <__errno>
 8008e48:	2322      	movs	r3, #34	; 0x22
 8008e4a:	6003      	str	r3, [r0, #0]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	2300      	movs	r3, #0
 8008e50:	4640      	mov	r0, r8
 8008e52:	4649      	mov	r1, r9
 8008e54:	f7f7 fdea 	bl	8000a2c <__aeabi_dcmplt>
 8008e58:	2400      	movs	r4, #0
 8008e5a:	b158      	cbz	r0, 8008e74 <pow+0x10c>
 8008e5c:	ec47 6b10 	vmov	d0, r6, r7
 8008e60:	f000 fe26 	bl	8009ab0 <rint>
 8008e64:	4632      	mov	r2, r6
 8008e66:	ec51 0b10 	vmov	r0, r1, d0
 8008e6a:	463b      	mov	r3, r7
 8008e6c:	f7f7 fdd4 	bl	8000a18 <__aeabi_dcmpeq>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d0c2      	beq.n	8008dfa <pow+0x92>
 8008e74:	4d11      	ldr	r5, [pc, #68]	; (8008ebc <pow+0x154>)
 8008e76:	e79c      	b.n	8008db2 <pow+0x4a>
 8008e78:	2200      	movs	r2, #0
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	4629      	mov	r1, r5
 8008e80:	f7f7 fdca 	bl	8000a18 <__aeabi_dcmpeq>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	d094      	beq.n	8008db2 <pow+0x4a>
 8008e88:	ec49 8b10 	vmov	d0, r8, r9
 8008e8c:	f000 fdfb 	bl	8009a86 <finite>
 8008e90:	2800      	cmp	r0, #0
 8008e92:	d08e      	beq.n	8008db2 <pow+0x4a>
 8008e94:	ec47 6b10 	vmov	d0, r6, r7
 8008e98:	f000 fdf5 	bl	8009a86 <finite>
 8008e9c:	2800      	cmp	r0, #0
 8008e9e:	d088      	beq.n	8008db2 <pow+0x4a>
 8008ea0:	f7ff fa5c 	bl	800835c <__errno>
 8008ea4:	2322      	movs	r3, #34	; 0x22
 8008ea6:	6003      	str	r3, [r0, #0]
 8008ea8:	2400      	movs	r4, #0
 8008eaa:	2500      	movs	r5, #0
 8008eac:	e781      	b.n	8008db2 <pow+0x4a>
 8008eae:	4d04      	ldr	r5, [pc, #16]	; (8008ec0 <pow+0x158>)
 8008eb0:	2400      	movs	r4, #0
 8008eb2:	e77e      	b.n	8008db2 <pow+0x4a>
 8008eb4:	20000074 	.word	0x20000074
 8008eb8:	fff00000 	.word	0xfff00000
 8008ebc:	7ff00000 	.word	0x7ff00000
 8008ec0:	3ff00000 	.word	0x3ff00000
 8008ec4:	00000000 	.word	0x00000000

08008ec8 <__ieee754_pow>:
 8008ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	ed2d 8b06 	vpush	{d8-d10}
 8008ed0:	b08d      	sub	sp, #52	; 0x34
 8008ed2:	ed8d 1b02 	vstr	d1, [sp, #8]
 8008ed6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8008eda:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8008ede:	ea56 0100 	orrs.w	r1, r6, r0
 8008ee2:	ec53 2b10 	vmov	r2, r3, d0
 8008ee6:	f000 84d1 	beq.w	800988c <__ieee754_pow+0x9c4>
 8008eea:	497f      	ldr	r1, [pc, #508]	; (80090e8 <__ieee754_pow+0x220>)
 8008eec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8008ef0:	428c      	cmp	r4, r1
 8008ef2:	ee10 8a10 	vmov	r8, s0
 8008ef6:	4699      	mov	r9, r3
 8008ef8:	dc09      	bgt.n	8008f0e <__ieee754_pow+0x46>
 8008efa:	d103      	bne.n	8008f04 <__ieee754_pow+0x3c>
 8008efc:	b97a      	cbnz	r2, 8008f1e <__ieee754_pow+0x56>
 8008efe:	42a6      	cmp	r6, r4
 8008f00:	dd02      	ble.n	8008f08 <__ieee754_pow+0x40>
 8008f02:	e00c      	b.n	8008f1e <__ieee754_pow+0x56>
 8008f04:	428e      	cmp	r6, r1
 8008f06:	dc02      	bgt.n	8008f0e <__ieee754_pow+0x46>
 8008f08:	428e      	cmp	r6, r1
 8008f0a:	d110      	bne.n	8008f2e <__ieee754_pow+0x66>
 8008f0c:	b178      	cbz	r0, 8008f2e <__ieee754_pow+0x66>
 8008f0e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008f12:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008f16:	ea54 0308 	orrs.w	r3, r4, r8
 8008f1a:	f000 84b7 	beq.w	800988c <__ieee754_pow+0x9c4>
 8008f1e:	4873      	ldr	r0, [pc, #460]	; (80090ec <__ieee754_pow+0x224>)
 8008f20:	b00d      	add	sp, #52	; 0x34
 8008f22:	ecbd 8b06 	vpop	{d8-d10}
 8008f26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2a:	f000 bdb9 	b.w	8009aa0 <nan>
 8008f2e:	f1b9 0f00 	cmp.w	r9, #0
 8008f32:	da36      	bge.n	8008fa2 <__ieee754_pow+0xda>
 8008f34:	496e      	ldr	r1, [pc, #440]	; (80090f0 <__ieee754_pow+0x228>)
 8008f36:	428e      	cmp	r6, r1
 8008f38:	dc51      	bgt.n	8008fde <__ieee754_pow+0x116>
 8008f3a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8008f3e:	428e      	cmp	r6, r1
 8008f40:	f340 84af 	ble.w	80098a2 <__ieee754_pow+0x9da>
 8008f44:	1531      	asrs	r1, r6, #20
 8008f46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008f4a:	2914      	cmp	r1, #20
 8008f4c:	dd0f      	ble.n	8008f6e <__ieee754_pow+0xa6>
 8008f4e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8008f52:	fa20 fc01 	lsr.w	ip, r0, r1
 8008f56:	fa0c f101 	lsl.w	r1, ip, r1
 8008f5a:	4281      	cmp	r1, r0
 8008f5c:	f040 84a1 	bne.w	80098a2 <__ieee754_pow+0x9da>
 8008f60:	f00c 0c01 	and.w	ip, ip, #1
 8008f64:	f1cc 0102 	rsb	r1, ip, #2
 8008f68:	9100      	str	r1, [sp, #0]
 8008f6a:	b180      	cbz	r0, 8008f8e <__ieee754_pow+0xc6>
 8008f6c:	e059      	b.n	8009022 <__ieee754_pow+0x15a>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d155      	bne.n	800901e <__ieee754_pow+0x156>
 8008f72:	f1c1 0114 	rsb	r1, r1, #20
 8008f76:	fa46 fc01 	asr.w	ip, r6, r1
 8008f7a:	fa0c f101 	lsl.w	r1, ip, r1
 8008f7e:	42b1      	cmp	r1, r6
 8008f80:	f040 848c 	bne.w	800989c <__ieee754_pow+0x9d4>
 8008f84:	f00c 0c01 	and.w	ip, ip, #1
 8008f88:	f1cc 0102 	rsb	r1, ip, #2
 8008f8c:	9100      	str	r1, [sp, #0]
 8008f8e:	4959      	ldr	r1, [pc, #356]	; (80090f4 <__ieee754_pow+0x22c>)
 8008f90:	428e      	cmp	r6, r1
 8008f92:	d12d      	bne.n	8008ff0 <__ieee754_pow+0x128>
 8008f94:	2f00      	cmp	r7, #0
 8008f96:	da79      	bge.n	800908c <__ieee754_pow+0x1c4>
 8008f98:	4956      	ldr	r1, [pc, #344]	; (80090f4 <__ieee754_pow+0x22c>)
 8008f9a:	2000      	movs	r0, #0
 8008f9c:	f7f7 fbfe 	bl	800079c <__aeabi_ddiv>
 8008fa0:	e016      	b.n	8008fd0 <__ieee754_pow+0x108>
 8008fa2:	2100      	movs	r1, #0
 8008fa4:	9100      	str	r1, [sp, #0]
 8008fa6:	2800      	cmp	r0, #0
 8008fa8:	d13b      	bne.n	8009022 <__ieee754_pow+0x15a>
 8008faa:	494f      	ldr	r1, [pc, #316]	; (80090e8 <__ieee754_pow+0x220>)
 8008fac:	428e      	cmp	r6, r1
 8008fae:	d1ee      	bne.n	8008f8e <__ieee754_pow+0xc6>
 8008fb0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008fb4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008fb8:	ea53 0308 	orrs.w	r3, r3, r8
 8008fbc:	f000 8466 	beq.w	800988c <__ieee754_pow+0x9c4>
 8008fc0:	4b4d      	ldr	r3, [pc, #308]	; (80090f8 <__ieee754_pow+0x230>)
 8008fc2:	429c      	cmp	r4, r3
 8008fc4:	dd0d      	ble.n	8008fe2 <__ieee754_pow+0x11a>
 8008fc6:	2f00      	cmp	r7, #0
 8008fc8:	f280 8464 	bge.w	8009894 <__ieee754_pow+0x9cc>
 8008fcc:	2000      	movs	r0, #0
 8008fce:	2100      	movs	r1, #0
 8008fd0:	ec41 0b10 	vmov	d0, r0, r1
 8008fd4:	b00d      	add	sp, #52	; 0x34
 8008fd6:	ecbd 8b06 	vpop	{d8-d10}
 8008fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fde:	2102      	movs	r1, #2
 8008fe0:	e7e0      	b.n	8008fa4 <__ieee754_pow+0xdc>
 8008fe2:	2f00      	cmp	r7, #0
 8008fe4:	daf2      	bge.n	8008fcc <__ieee754_pow+0x104>
 8008fe6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8008fea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008fee:	e7ef      	b.n	8008fd0 <__ieee754_pow+0x108>
 8008ff0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008ff4:	d104      	bne.n	8009000 <__ieee754_pow+0x138>
 8008ff6:	4610      	mov	r0, r2
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	f7f7 faa5 	bl	8000548 <__aeabi_dmul>
 8008ffe:	e7e7      	b.n	8008fd0 <__ieee754_pow+0x108>
 8009000:	493e      	ldr	r1, [pc, #248]	; (80090fc <__ieee754_pow+0x234>)
 8009002:	428f      	cmp	r7, r1
 8009004:	d10d      	bne.n	8009022 <__ieee754_pow+0x15a>
 8009006:	f1b9 0f00 	cmp.w	r9, #0
 800900a:	db0a      	blt.n	8009022 <__ieee754_pow+0x15a>
 800900c:	ec43 2b10 	vmov	d0, r2, r3
 8009010:	b00d      	add	sp, #52	; 0x34
 8009012:	ecbd 8b06 	vpop	{d8-d10}
 8009016:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800901a:	f000 bc77 	b.w	800990c <__ieee754_sqrt>
 800901e:	2100      	movs	r1, #0
 8009020:	9100      	str	r1, [sp, #0]
 8009022:	ec43 2b10 	vmov	d0, r2, r3
 8009026:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800902a:	f000 fd23 	bl	8009a74 <fabs>
 800902e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009032:	ec51 0b10 	vmov	r0, r1, d0
 8009036:	f1b8 0f00 	cmp.w	r8, #0
 800903a:	d12a      	bne.n	8009092 <__ieee754_pow+0x1ca>
 800903c:	b12c      	cbz	r4, 800904a <__ieee754_pow+0x182>
 800903e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80090f4 <__ieee754_pow+0x22c>
 8009042:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8009046:	45e6      	cmp	lr, ip
 8009048:	d123      	bne.n	8009092 <__ieee754_pow+0x1ca>
 800904a:	2f00      	cmp	r7, #0
 800904c:	da05      	bge.n	800905a <__ieee754_pow+0x192>
 800904e:	4602      	mov	r2, r0
 8009050:	460b      	mov	r3, r1
 8009052:	2000      	movs	r0, #0
 8009054:	4927      	ldr	r1, [pc, #156]	; (80090f4 <__ieee754_pow+0x22c>)
 8009056:	f7f7 fba1 	bl	800079c <__aeabi_ddiv>
 800905a:	f1b9 0f00 	cmp.w	r9, #0
 800905e:	dab7      	bge.n	8008fd0 <__ieee754_pow+0x108>
 8009060:	9b00      	ldr	r3, [sp, #0]
 8009062:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009066:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800906a:	4323      	orrs	r3, r4
 800906c:	d108      	bne.n	8009080 <__ieee754_pow+0x1b8>
 800906e:	4602      	mov	r2, r0
 8009070:	460b      	mov	r3, r1
 8009072:	4610      	mov	r0, r2
 8009074:	4619      	mov	r1, r3
 8009076:	f7f7 f8af 	bl	80001d8 <__aeabi_dsub>
 800907a:	4602      	mov	r2, r0
 800907c:	460b      	mov	r3, r1
 800907e:	e78d      	b.n	8008f9c <__ieee754_pow+0xd4>
 8009080:	9b00      	ldr	r3, [sp, #0]
 8009082:	2b01      	cmp	r3, #1
 8009084:	d1a4      	bne.n	8008fd0 <__ieee754_pow+0x108>
 8009086:	4602      	mov	r2, r0
 8009088:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800908c:	4610      	mov	r0, r2
 800908e:	4619      	mov	r1, r3
 8009090:	e79e      	b.n	8008fd0 <__ieee754_pow+0x108>
 8009092:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8009096:	f10c 35ff 	add.w	r5, ip, #4294967295
 800909a:	950a      	str	r5, [sp, #40]	; 0x28
 800909c:	9d00      	ldr	r5, [sp, #0]
 800909e:	46ac      	mov	ip, r5
 80090a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80090a2:	ea5c 0505 	orrs.w	r5, ip, r5
 80090a6:	d0e4      	beq.n	8009072 <__ieee754_pow+0x1aa>
 80090a8:	4b15      	ldr	r3, [pc, #84]	; (8009100 <__ieee754_pow+0x238>)
 80090aa:	429e      	cmp	r6, r3
 80090ac:	f340 80fc 	ble.w	80092a8 <__ieee754_pow+0x3e0>
 80090b0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80090b4:	429e      	cmp	r6, r3
 80090b6:	4b10      	ldr	r3, [pc, #64]	; (80090f8 <__ieee754_pow+0x230>)
 80090b8:	dd07      	ble.n	80090ca <__ieee754_pow+0x202>
 80090ba:	429c      	cmp	r4, r3
 80090bc:	dc0a      	bgt.n	80090d4 <__ieee754_pow+0x20c>
 80090be:	2f00      	cmp	r7, #0
 80090c0:	da84      	bge.n	8008fcc <__ieee754_pow+0x104>
 80090c2:	a307      	add	r3, pc, #28	; (adr r3, 80090e0 <__ieee754_pow+0x218>)
 80090c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c8:	e795      	b.n	8008ff6 <__ieee754_pow+0x12e>
 80090ca:	429c      	cmp	r4, r3
 80090cc:	dbf7      	blt.n	80090be <__ieee754_pow+0x1f6>
 80090ce:	4b09      	ldr	r3, [pc, #36]	; (80090f4 <__ieee754_pow+0x22c>)
 80090d0:	429c      	cmp	r4, r3
 80090d2:	dd17      	ble.n	8009104 <__ieee754_pow+0x23c>
 80090d4:	2f00      	cmp	r7, #0
 80090d6:	dcf4      	bgt.n	80090c2 <__ieee754_pow+0x1fa>
 80090d8:	e778      	b.n	8008fcc <__ieee754_pow+0x104>
 80090da:	bf00      	nop
 80090dc:	f3af 8000 	nop.w
 80090e0:	8800759c 	.word	0x8800759c
 80090e4:	7e37e43c 	.word	0x7e37e43c
 80090e8:	7ff00000 	.word	0x7ff00000
 80090ec:	08009e50 	.word	0x08009e50
 80090f0:	433fffff 	.word	0x433fffff
 80090f4:	3ff00000 	.word	0x3ff00000
 80090f8:	3fefffff 	.word	0x3fefffff
 80090fc:	3fe00000 	.word	0x3fe00000
 8009100:	41e00000 	.word	0x41e00000
 8009104:	4b64      	ldr	r3, [pc, #400]	; (8009298 <__ieee754_pow+0x3d0>)
 8009106:	2200      	movs	r2, #0
 8009108:	f7f7 f866 	bl	80001d8 <__aeabi_dsub>
 800910c:	a356      	add	r3, pc, #344	; (adr r3, 8009268 <__ieee754_pow+0x3a0>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	4604      	mov	r4, r0
 8009114:	460d      	mov	r5, r1
 8009116:	f7f7 fa17 	bl	8000548 <__aeabi_dmul>
 800911a:	a355      	add	r3, pc, #340	; (adr r3, 8009270 <__ieee754_pow+0x3a8>)
 800911c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009120:	4606      	mov	r6, r0
 8009122:	460f      	mov	r7, r1
 8009124:	4620      	mov	r0, r4
 8009126:	4629      	mov	r1, r5
 8009128:	f7f7 fa0e 	bl	8000548 <__aeabi_dmul>
 800912c:	4b5b      	ldr	r3, [pc, #364]	; (800929c <__ieee754_pow+0x3d4>)
 800912e:	4682      	mov	sl, r0
 8009130:	468b      	mov	fp, r1
 8009132:	2200      	movs	r2, #0
 8009134:	4620      	mov	r0, r4
 8009136:	4629      	mov	r1, r5
 8009138:	f7f7 fa06 	bl	8000548 <__aeabi_dmul>
 800913c:	4602      	mov	r2, r0
 800913e:	460b      	mov	r3, r1
 8009140:	a14d      	add	r1, pc, #308	; (adr r1, 8009278 <__ieee754_pow+0x3b0>)
 8009142:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009146:	f7f7 f847 	bl	80001d8 <__aeabi_dsub>
 800914a:	4622      	mov	r2, r4
 800914c:	462b      	mov	r3, r5
 800914e:	f7f7 f9fb 	bl	8000548 <__aeabi_dmul>
 8009152:	4602      	mov	r2, r0
 8009154:	460b      	mov	r3, r1
 8009156:	2000      	movs	r0, #0
 8009158:	4951      	ldr	r1, [pc, #324]	; (80092a0 <__ieee754_pow+0x3d8>)
 800915a:	f7f7 f83d 	bl	80001d8 <__aeabi_dsub>
 800915e:	4622      	mov	r2, r4
 8009160:	4680      	mov	r8, r0
 8009162:	4689      	mov	r9, r1
 8009164:	462b      	mov	r3, r5
 8009166:	4620      	mov	r0, r4
 8009168:	4629      	mov	r1, r5
 800916a:	f7f7 f9ed 	bl	8000548 <__aeabi_dmul>
 800916e:	4602      	mov	r2, r0
 8009170:	460b      	mov	r3, r1
 8009172:	4640      	mov	r0, r8
 8009174:	4649      	mov	r1, r9
 8009176:	f7f7 f9e7 	bl	8000548 <__aeabi_dmul>
 800917a:	a341      	add	r3, pc, #260	; (adr r3, 8009280 <__ieee754_pow+0x3b8>)
 800917c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009180:	f7f7 f9e2 	bl	8000548 <__aeabi_dmul>
 8009184:	4602      	mov	r2, r0
 8009186:	460b      	mov	r3, r1
 8009188:	4650      	mov	r0, sl
 800918a:	4659      	mov	r1, fp
 800918c:	f7f7 f824 	bl	80001d8 <__aeabi_dsub>
 8009190:	4602      	mov	r2, r0
 8009192:	460b      	mov	r3, r1
 8009194:	4680      	mov	r8, r0
 8009196:	4689      	mov	r9, r1
 8009198:	4630      	mov	r0, r6
 800919a:	4639      	mov	r1, r7
 800919c:	f7f7 f81e 	bl	80001dc <__adddf3>
 80091a0:	2400      	movs	r4, #0
 80091a2:	4632      	mov	r2, r6
 80091a4:	463b      	mov	r3, r7
 80091a6:	4620      	mov	r0, r4
 80091a8:	460d      	mov	r5, r1
 80091aa:	f7f7 f815 	bl	80001d8 <__aeabi_dsub>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	4640      	mov	r0, r8
 80091b4:	4649      	mov	r1, r9
 80091b6:	f7f7 f80f 	bl	80001d8 <__aeabi_dsub>
 80091ba:	9b00      	ldr	r3, [sp, #0]
 80091bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091be:	3b01      	subs	r3, #1
 80091c0:	4313      	orrs	r3, r2
 80091c2:	4682      	mov	sl, r0
 80091c4:	468b      	mov	fp, r1
 80091c6:	f040 81f1 	bne.w	80095ac <__ieee754_pow+0x6e4>
 80091ca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009288 <__ieee754_pow+0x3c0>
 80091ce:	eeb0 8a47 	vmov.f32	s16, s14
 80091d2:	eef0 8a67 	vmov.f32	s17, s15
 80091d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091da:	2600      	movs	r6, #0
 80091dc:	4632      	mov	r2, r6
 80091de:	463b      	mov	r3, r7
 80091e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091e4:	f7f6 fff8 	bl	80001d8 <__aeabi_dsub>
 80091e8:	4622      	mov	r2, r4
 80091ea:	462b      	mov	r3, r5
 80091ec:	f7f7 f9ac 	bl	8000548 <__aeabi_dmul>
 80091f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80091f4:	4680      	mov	r8, r0
 80091f6:	4689      	mov	r9, r1
 80091f8:	4650      	mov	r0, sl
 80091fa:	4659      	mov	r1, fp
 80091fc:	f7f7 f9a4 	bl	8000548 <__aeabi_dmul>
 8009200:	4602      	mov	r2, r0
 8009202:	460b      	mov	r3, r1
 8009204:	4640      	mov	r0, r8
 8009206:	4649      	mov	r1, r9
 8009208:	f7f6 ffe8 	bl	80001dc <__adddf3>
 800920c:	4632      	mov	r2, r6
 800920e:	463b      	mov	r3, r7
 8009210:	4680      	mov	r8, r0
 8009212:	4689      	mov	r9, r1
 8009214:	4620      	mov	r0, r4
 8009216:	4629      	mov	r1, r5
 8009218:	f7f7 f996 	bl	8000548 <__aeabi_dmul>
 800921c:	460b      	mov	r3, r1
 800921e:	4604      	mov	r4, r0
 8009220:	460d      	mov	r5, r1
 8009222:	4602      	mov	r2, r0
 8009224:	4649      	mov	r1, r9
 8009226:	4640      	mov	r0, r8
 8009228:	f7f6 ffd8 	bl	80001dc <__adddf3>
 800922c:	4b1d      	ldr	r3, [pc, #116]	; (80092a4 <__ieee754_pow+0x3dc>)
 800922e:	4299      	cmp	r1, r3
 8009230:	ec45 4b19 	vmov	d9, r4, r5
 8009234:	4606      	mov	r6, r0
 8009236:	460f      	mov	r7, r1
 8009238:	468b      	mov	fp, r1
 800923a:	f340 82fe 	ble.w	800983a <__ieee754_pow+0x972>
 800923e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009242:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009246:	4303      	orrs	r3, r0
 8009248:	f000 81f0 	beq.w	800962c <__ieee754_pow+0x764>
 800924c:	a310      	add	r3, pc, #64	; (adr r3, 8009290 <__ieee754_pow+0x3c8>)
 800924e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009252:	ec51 0b18 	vmov	r0, r1, d8
 8009256:	f7f7 f977 	bl	8000548 <__aeabi_dmul>
 800925a:	a30d      	add	r3, pc, #52	; (adr r3, 8009290 <__ieee754_pow+0x3c8>)
 800925c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009260:	e6cb      	b.n	8008ffa <__ieee754_pow+0x132>
 8009262:	bf00      	nop
 8009264:	f3af 8000 	nop.w
 8009268:	60000000 	.word	0x60000000
 800926c:	3ff71547 	.word	0x3ff71547
 8009270:	f85ddf44 	.word	0xf85ddf44
 8009274:	3e54ae0b 	.word	0x3e54ae0b
 8009278:	55555555 	.word	0x55555555
 800927c:	3fd55555 	.word	0x3fd55555
 8009280:	652b82fe 	.word	0x652b82fe
 8009284:	3ff71547 	.word	0x3ff71547
 8009288:	00000000 	.word	0x00000000
 800928c:	bff00000 	.word	0xbff00000
 8009290:	8800759c 	.word	0x8800759c
 8009294:	7e37e43c 	.word	0x7e37e43c
 8009298:	3ff00000 	.word	0x3ff00000
 800929c:	3fd00000 	.word	0x3fd00000
 80092a0:	3fe00000 	.word	0x3fe00000
 80092a4:	408fffff 	.word	0x408fffff
 80092a8:	4bd7      	ldr	r3, [pc, #860]	; (8009608 <__ieee754_pow+0x740>)
 80092aa:	ea03 0309 	and.w	r3, r3, r9
 80092ae:	2200      	movs	r2, #0
 80092b0:	b92b      	cbnz	r3, 80092be <__ieee754_pow+0x3f6>
 80092b2:	4bd6      	ldr	r3, [pc, #856]	; (800960c <__ieee754_pow+0x744>)
 80092b4:	f7f7 f948 	bl	8000548 <__aeabi_dmul>
 80092b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80092bc:	460c      	mov	r4, r1
 80092be:	1523      	asrs	r3, r4, #20
 80092c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80092c4:	4413      	add	r3, r2
 80092c6:	9309      	str	r3, [sp, #36]	; 0x24
 80092c8:	4bd1      	ldr	r3, [pc, #836]	; (8009610 <__ieee754_pow+0x748>)
 80092ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80092ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80092d2:	429c      	cmp	r4, r3
 80092d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80092d8:	dd08      	ble.n	80092ec <__ieee754_pow+0x424>
 80092da:	4bce      	ldr	r3, [pc, #824]	; (8009614 <__ieee754_pow+0x74c>)
 80092dc:	429c      	cmp	r4, r3
 80092de:	f340 8163 	ble.w	80095a8 <__ieee754_pow+0x6e0>
 80092e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e4:	3301      	adds	r3, #1
 80092e6:	9309      	str	r3, [sp, #36]	; 0x24
 80092e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80092ec:	2400      	movs	r4, #0
 80092ee:	00e3      	lsls	r3, r4, #3
 80092f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80092f2:	4bc9      	ldr	r3, [pc, #804]	; (8009618 <__ieee754_pow+0x750>)
 80092f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80092f8:	ed93 7b00 	vldr	d7, [r3]
 80092fc:	4629      	mov	r1, r5
 80092fe:	ec53 2b17 	vmov	r2, r3, d7
 8009302:	eeb0 8a47 	vmov.f32	s16, s14
 8009306:	eef0 8a67 	vmov.f32	s17, s15
 800930a:	4682      	mov	sl, r0
 800930c:	f7f6 ff64 	bl	80001d8 <__aeabi_dsub>
 8009310:	4652      	mov	r2, sl
 8009312:	4606      	mov	r6, r0
 8009314:	460f      	mov	r7, r1
 8009316:	462b      	mov	r3, r5
 8009318:	ec51 0b18 	vmov	r0, r1, d8
 800931c:	f7f6 ff5e 	bl	80001dc <__adddf3>
 8009320:	4602      	mov	r2, r0
 8009322:	460b      	mov	r3, r1
 8009324:	2000      	movs	r0, #0
 8009326:	49bd      	ldr	r1, [pc, #756]	; (800961c <__ieee754_pow+0x754>)
 8009328:	f7f7 fa38 	bl	800079c <__aeabi_ddiv>
 800932c:	ec41 0b19 	vmov	d9, r0, r1
 8009330:	4602      	mov	r2, r0
 8009332:	460b      	mov	r3, r1
 8009334:	4630      	mov	r0, r6
 8009336:	4639      	mov	r1, r7
 8009338:	f7f7 f906 	bl	8000548 <__aeabi_dmul>
 800933c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009340:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009344:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009348:	2300      	movs	r3, #0
 800934a:	9304      	str	r3, [sp, #16]
 800934c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009350:	46ab      	mov	fp, r5
 8009352:	106d      	asrs	r5, r5, #1
 8009354:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009358:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800935c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009360:	2200      	movs	r2, #0
 8009362:	4640      	mov	r0, r8
 8009364:	4649      	mov	r1, r9
 8009366:	4614      	mov	r4, r2
 8009368:	461d      	mov	r5, r3
 800936a:	f7f7 f8ed 	bl	8000548 <__aeabi_dmul>
 800936e:	4602      	mov	r2, r0
 8009370:	460b      	mov	r3, r1
 8009372:	4630      	mov	r0, r6
 8009374:	4639      	mov	r1, r7
 8009376:	f7f6 ff2f 	bl	80001d8 <__aeabi_dsub>
 800937a:	ec53 2b18 	vmov	r2, r3, d8
 800937e:	4606      	mov	r6, r0
 8009380:	460f      	mov	r7, r1
 8009382:	4620      	mov	r0, r4
 8009384:	4629      	mov	r1, r5
 8009386:	f7f6 ff27 	bl	80001d8 <__aeabi_dsub>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	4650      	mov	r0, sl
 8009390:	4659      	mov	r1, fp
 8009392:	f7f6 ff21 	bl	80001d8 <__aeabi_dsub>
 8009396:	4642      	mov	r2, r8
 8009398:	464b      	mov	r3, r9
 800939a:	f7f7 f8d5 	bl	8000548 <__aeabi_dmul>
 800939e:	4602      	mov	r2, r0
 80093a0:	460b      	mov	r3, r1
 80093a2:	4630      	mov	r0, r6
 80093a4:	4639      	mov	r1, r7
 80093a6:	f7f6 ff17 	bl	80001d8 <__aeabi_dsub>
 80093aa:	ec53 2b19 	vmov	r2, r3, d9
 80093ae:	f7f7 f8cb 	bl	8000548 <__aeabi_dmul>
 80093b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093b6:	ec41 0b18 	vmov	d8, r0, r1
 80093ba:	4610      	mov	r0, r2
 80093bc:	4619      	mov	r1, r3
 80093be:	f7f7 f8c3 	bl	8000548 <__aeabi_dmul>
 80093c2:	a37d      	add	r3, pc, #500	; (adr r3, 80095b8 <__ieee754_pow+0x6f0>)
 80093c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c8:	4604      	mov	r4, r0
 80093ca:	460d      	mov	r5, r1
 80093cc:	f7f7 f8bc 	bl	8000548 <__aeabi_dmul>
 80093d0:	a37b      	add	r3, pc, #492	; (adr r3, 80095c0 <__ieee754_pow+0x6f8>)
 80093d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d6:	f7f6 ff01 	bl	80001dc <__adddf3>
 80093da:	4622      	mov	r2, r4
 80093dc:	462b      	mov	r3, r5
 80093de:	f7f7 f8b3 	bl	8000548 <__aeabi_dmul>
 80093e2:	a379      	add	r3, pc, #484	; (adr r3, 80095c8 <__ieee754_pow+0x700>)
 80093e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093e8:	f7f6 fef8 	bl	80001dc <__adddf3>
 80093ec:	4622      	mov	r2, r4
 80093ee:	462b      	mov	r3, r5
 80093f0:	f7f7 f8aa 	bl	8000548 <__aeabi_dmul>
 80093f4:	a376      	add	r3, pc, #472	; (adr r3, 80095d0 <__ieee754_pow+0x708>)
 80093f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093fa:	f7f6 feef 	bl	80001dc <__adddf3>
 80093fe:	4622      	mov	r2, r4
 8009400:	462b      	mov	r3, r5
 8009402:	f7f7 f8a1 	bl	8000548 <__aeabi_dmul>
 8009406:	a374      	add	r3, pc, #464	; (adr r3, 80095d8 <__ieee754_pow+0x710>)
 8009408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800940c:	f7f6 fee6 	bl	80001dc <__adddf3>
 8009410:	4622      	mov	r2, r4
 8009412:	462b      	mov	r3, r5
 8009414:	f7f7 f898 	bl	8000548 <__aeabi_dmul>
 8009418:	a371      	add	r3, pc, #452	; (adr r3, 80095e0 <__ieee754_pow+0x718>)
 800941a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800941e:	f7f6 fedd 	bl	80001dc <__adddf3>
 8009422:	4622      	mov	r2, r4
 8009424:	4606      	mov	r6, r0
 8009426:	460f      	mov	r7, r1
 8009428:	462b      	mov	r3, r5
 800942a:	4620      	mov	r0, r4
 800942c:	4629      	mov	r1, r5
 800942e:	f7f7 f88b 	bl	8000548 <__aeabi_dmul>
 8009432:	4602      	mov	r2, r0
 8009434:	460b      	mov	r3, r1
 8009436:	4630      	mov	r0, r6
 8009438:	4639      	mov	r1, r7
 800943a:	f7f7 f885 	bl	8000548 <__aeabi_dmul>
 800943e:	4642      	mov	r2, r8
 8009440:	4604      	mov	r4, r0
 8009442:	460d      	mov	r5, r1
 8009444:	464b      	mov	r3, r9
 8009446:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800944a:	f7f6 fec7 	bl	80001dc <__adddf3>
 800944e:	ec53 2b18 	vmov	r2, r3, d8
 8009452:	f7f7 f879 	bl	8000548 <__aeabi_dmul>
 8009456:	4622      	mov	r2, r4
 8009458:	462b      	mov	r3, r5
 800945a:	f7f6 febf 	bl	80001dc <__adddf3>
 800945e:	4642      	mov	r2, r8
 8009460:	4682      	mov	sl, r0
 8009462:	468b      	mov	fp, r1
 8009464:	464b      	mov	r3, r9
 8009466:	4640      	mov	r0, r8
 8009468:	4649      	mov	r1, r9
 800946a:	f7f7 f86d 	bl	8000548 <__aeabi_dmul>
 800946e:	4b6c      	ldr	r3, [pc, #432]	; (8009620 <__ieee754_pow+0x758>)
 8009470:	2200      	movs	r2, #0
 8009472:	4606      	mov	r6, r0
 8009474:	460f      	mov	r7, r1
 8009476:	f7f6 feb1 	bl	80001dc <__adddf3>
 800947a:	4652      	mov	r2, sl
 800947c:	465b      	mov	r3, fp
 800947e:	f7f6 fead 	bl	80001dc <__adddf3>
 8009482:	9c04      	ldr	r4, [sp, #16]
 8009484:	460d      	mov	r5, r1
 8009486:	4622      	mov	r2, r4
 8009488:	460b      	mov	r3, r1
 800948a:	4640      	mov	r0, r8
 800948c:	4649      	mov	r1, r9
 800948e:	f7f7 f85b 	bl	8000548 <__aeabi_dmul>
 8009492:	4b63      	ldr	r3, [pc, #396]	; (8009620 <__ieee754_pow+0x758>)
 8009494:	4680      	mov	r8, r0
 8009496:	4689      	mov	r9, r1
 8009498:	2200      	movs	r2, #0
 800949a:	4620      	mov	r0, r4
 800949c:	4629      	mov	r1, r5
 800949e:	f7f6 fe9b 	bl	80001d8 <__aeabi_dsub>
 80094a2:	4632      	mov	r2, r6
 80094a4:	463b      	mov	r3, r7
 80094a6:	f7f6 fe97 	bl	80001d8 <__aeabi_dsub>
 80094aa:	4602      	mov	r2, r0
 80094ac:	460b      	mov	r3, r1
 80094ae:	4650      	mov	r0, sl
 80094b0:	4659      	mov	r1, fp
 80094b2:	f7f6 fe91 	bl	80001d8 <__aeabi_dsub>
 80094b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094ba:	f7f7 f845 	bl	8000548 <__aeabi_dmul>
 80094be:	4622      	mov	r2, r4
 80094c0:	4606      	mov	r6, r0
 80094c2:	460f      	mov	r7, r1
 80094c4:	462b      	mov	r3, r5
 80094c6:	ec51 0b18 	vmov	r0, r1, d8
 80094ca:	f7f7 f83d 	bl	8000548 <__aeabi_dmul>
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4630      	mov	r0, r6
 80094d4:	4639      	mov	r1, r7
 80094d6:	f7f6 fe81 	bl	80001dc <__adddf3>
 80094da:	4606      	mov	r6, r0
 80094dc:	460f      	mov	r7, r1
 80094de:	4602      	mov	r2, r0
 80094e0:	460b      	mov	r3, r1
 80094e2:	4640      	mov	r0, r8
 80094e4:	4649      	mov	r1, r9
 80094e6:	f7f6 fe79 	bl	80001dc <__adddf3>
 80094ea:	9c04      	ldr	r4, [sp, #16]
 80094ec:	a33e      	add	r3, pc, #248	; (adr r3, 80095e8 <__ieee754_pow+0x720>)
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	4620      	mov	r0, r4
 80094f4:	460d      	mov	r5, r1
 80094f6:	f7f7 f827 	bl	8000548 <__aeabi_dmul>
 80094fa:	4642      	mov	r2, r8
 80094fc:	ec41 0b18 	vmov	d8, r0, r1
 8009500:	464b      	mov	r3, r9
 8009502:	4620      	mov	r0, r4
 8009504:	4629      	mov	r1, r5
 8009506:	f7f6 fe67 	bl	80001d8 <__aeabi_dsub>
 800950a:	4602      	mov	r2, r0
 800950c:	460b      	mov	r3, r1
 800950e:	4630      	mov	r0, r6
 8009510:	4639      	mov	r1, r7
 8009512:	f7f6 fe61 	bl	80001d8 <__aeabi_dsub>
 8009516:	a336      	add	r3, pc, #216	; (adr r3, 80095f0 <__ieee754_pow+0x728>)
 8009518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951c:	f7f7 f814 	bl	8000548 <__aeabi_dmul>
 8009520:	a335      	add	r3, pc, #212	; (adr r3, 80095f8 <__ieee754_pow+0x730>)
 8009522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009526:	4606      	mov	r6, r0
 8009528:	460f      	mov	r7, r1
 800952a:	4620      	mov	r0, r4
 800952c:	4629      	mov	r1, r5
 800952e:	f7f7 f80b 	bl	8000548 <__aeabi_dmul>
 8009532:	4602      	mov	r2, r0
 8009534:	460b      	mov	r3, r1
 8009536:	4630      	mov	r0, r6
 8009538:	4639      	mov	r1, r7
 800953a:	f7f6 fe4f 	bl	80001dc <__adddf3>
 800953e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009540:	4b38      	ldr	r3, [pc, #224]	; (8009624 <__ieee754_pow+0x75c>)
 8009542:	4413      	add	r3, r2
 8009544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009548:	f7f6 fe48 	bl	80001dc <__adddf3>
 800954c:	4682      	mov	sl, r0
 800954e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009550:	468b      	mov	fp, r1
 8009552:	f7f6 ff8f 	bl	8000474 <__aeabi_i2d>
 8009556:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009558:	4b33      	ldr	r3, [pc, #204]	; (8009628 <__ieee754_pow+0x760>)
 800955a:	4413      	add	r3, r2
 800955c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009560:	4606      	mov	r6, r0
 8009562:	460f      	mov	r7, r1
 8009564:	4652      	mov	r2, sl
 8009566:	465b      	mov	r3, fp
 8009568:	ec51 0b18 	vmov	r0, r1, d8
 800956c:	f7f6 fe36 	bl	80001dc <__adddf3>
 8009570:	4642      	mov	r2, r8
 8009572:	464b      	mov	r3, r9
 8009574:	f7f6 fe32 	bl	80001dc <__adddf3>
 8009578:	4632      	mov	r2, r6
 800957a:	463b      	mov	r3, r7
 800957c:	f7f6 fe2e 	bl	80001dc <__adddf3>
 8009580:	9c04      	ldr	r4, [sp, #16]
 8009582:	4632      	mov	r2, r6
 8009584:	463b      	mov	r3, r7
 8009586:	4620      	mov	r0, r4
 8009588:	460d      	mov	r5, r1
 800958a:	f7f6 fe25 	bl	80001d8 <__aeabi_dsub>
 800958e:	4642      	mov	r2, r8
 8009590:	464b      	mov	r3, r9
 8009592:	f7f6 fe21 	bl	80001d8 <__aeabi_dsub>
 8009596:	ec53 2b18 	vmov	r2, r3, d8
 800959a:	f7f6 fe1d 	bl	80001d8 <__aeabi_dsub>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4650      	mov	r0, sl
 80095a4:	4659      	mov	r1, fp
 80095a6:	e606      	b.n	80091b6 <__ieee754_pow+0x2ee>
 80095a8:	2401      	movs	r4, #1
 80095aa:	e6a0      	b.n	80092ee <__ieee754_pow+0x426>
 80095ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009600 <__ieee754_pow+0x738>
 80095b0:	e60d      	b.n	80091ce <__ieee754_pow+0x306>
 80095b2:	bf00      	nop
 80095b4:	f3af 8000 	nop.w
 80095b8:	4a454eef 	.word	0x4a454eef
 80095bc:	3fca7e28 	.word	0x3fca7e28
 80095c0:	93c9db65 	.word	0x93c9db65
 80095c4:	3fcd864a 	.word	0x3fcd864a
 80095c8:	a91d4101 	.word	0xa91d4101
 80095cc:	3fd17460 	.word	0x3fd17460
 80095d0:	518f264d 	.word	0x518f264d
 80095d4:	3fd55555 	.word	0x3fd55555
 80095d8:	db6fabff 	.word	0xdb6fabff
 80095dc:	3fdb6db6 	.word	0x3fdb6db6
 80095e0:	33333303 	.word	0x33333303
 80095e4:	3fe33333 	.word	0x3fe33333
 80095e8:	e0000000 	.word	0xe0000000
 80095ec:	3feec709 	.word	0x3feec709
 80095f0:	dc3a03fd 	.word	0xdc3a03fd
 80095f4:	3feec709 	.word	0x3feec709
 80095f8:	145b01f5 	.word	0x145b01f5
 80095fc:	be3e2fe0 	.word	0xbe3e2fe0
 8009600:	00000000 	.word	0x00000000
 8009604:	3ff00000 	.word	0x3ff00000
 8009608:	7ff00000 	.word	0x7ff00000
 800960c:	43400000 	.word	0x43400000
 8009610:	0003988e 	.word	0x0003988e
 8009614:	000bb679 	.word	0x000bb679
 8009618:	08009e58 	.word	0x08009e58
 800961c:	3ff00000 	.word	0x3ff00000
 8009620:	40080000 	.word	0x40080000
 8009624:	08009e78 	.word	0x08009e78
 8009628:	08009e68 	.word	0x08009e68
 800962c:	a3b5      	add	r3, pc, #724	; (adr r3, 8009904 <__ieee754_pow+0xa3c>)
 800962e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009632:	4640      	mov	r0, r8
 8009634:	4649      	mov	r1, r9
 8009636:	f7f6 fdd1 	bl	80001dc <__adddf3>
 800963a:	4622      	mov	r2, r4
 800963c:	ec41 0b1a 	vmov	d10, r0, r1
 8009640:	462b      	mov	r3, r5
 8009642:	4630      	mov	r0, r6
 8009644:	4639      	mov	r1, r7
 8009646:	f7f6 fdc7 	bl	80001d8 <__aeabi_dsub>
 800964a:	4602      	mov	r2, r0
 800964c:	460b      	mov	r3, r1
 800964e:	ec51 0b1a 	vmov	r0, r1, d10
 8009652:	f7f7 fa09 	bl	8000a68 <__aeabi_dcmpgt>
 8009656:	2800      	cmp	r0, #0
 8009658:	f47f adf8 	bne.w	800924c <__ieee754_pow+0x384>
 800965c:	4aa4      	ldr	r2, [pc, #656]	; (80098f0 <__ieee754_pow+0xa28>)
 800965e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009662:	4293      	cmp	r3, r2
 8009664:	f340 810b 	ble.w	800987e <__ieee754_pow+0x9b6>
 8009668:	151b      	asrs	r3, r3, #20
 800966a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800966e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009672:	fa4a f303 	asr.w	r3, sl, r3
 8009676:	445b      	add	r3, fp
 8009678:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800967c:	4e9d      	ldr	r6, [pc, #628]	; (80098f4 <__ieee754_pow+0xa2c>)
 800967e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009682:	4116      	asrs	r6, r2
 8009684:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009688:	2000      	movs	r0, #0
 800968a:	ea23 0106 	bic.w	r1, r3, r6
 800968e:	f1c2 0214 	rsb	r2, r2, #20
 8009692:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009696:	fa4a fa02 	asr.w	sl, sl, r2
 800969a:	f1bb 0f00 	cmp.w	fp, #0
 800969e:	4602      	mov	r2, r0
 80096a0:	460b      	mov	r3, r1
 80096a2:	4620      	mov	r0, r4
 80096a4:	4629      	mov	r1, r5
 80096a6:	bfb8      	it	lt
 80096a8:	f1ca 0a00 	rsblt	sl, sl, #0
 80096ac:	f7f6 fd94 	bl	80001d8 <__aeabi_dsub>
 80096b0:	ec41 0b19 	vmov	d9, r0, r1
 80096b4:	4642      	mov	r2, r8
 80096b6:	464b      	mov	r3, r9
 80096b8:	ec51 0b19 	vmov	r0, r1, d9
 80096bc:	f7f6 fd8e 	bl	80001dc <__adddf3>
 80096c0:	2400      	movs	r4, #0
 80096c2:	a379      	add	r3, pc, #484	; (adr r3, 80098a8 <__ieee754_pow+0x9e0>)
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	4620      	mov	r0, r4
 80096ca:	460d      	mov	r5, r1
 80096cc:	f7f6 ff3c 	bl	8000548 <__aeabi_dmul>
 80096d0:	ec53 2b19 	vmov	r2, r3, d9
 80096d4:	4606      	mov	r6, r0
 80096d6:	460f      	mov	r7, r1
 80096d8:	4620      	mov	r0, r4
 80096da:	4629      	mov	r1, r5
 80096dc:	f7f6 fd7c 	bl	80001d8 <__aeabi_dsub>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	4640      	mov	r0, r8
 80096e6:	4649      	mov	r1, r9
 80096e8:	f7f6 fd76 	bl	80001d8 <__aeabi_dsub>
 80096ec:	a370      	add	r3, pc, #448	; (adr r3, 80098b0 <__ieee754_pow+0x9e8>)
 80096ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f2:	f7f6 ff29 	bl	8000548 <__aeabi_dmul>
 80096f6:	a370      	add	r3, pc, #448	; (adr r3, 80098b8 <__ieee754_pow+0x9f0>)
 80096f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fc:	4680      	mov	r8, r0
 80096fe:	4689      	mov	r9, r1
 8009700:	4620      	mov	r0, r4
 8009702:	4629      	mov	r1, r5
 8009704:	f7f6 ff20 	bl	8000548 <__aeabi_dmul>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	4640      	mov	r0, r8
 800970e:	4649      	mov	r1, r9
 8009710:	f7f6 fd64 	bl	80001dc <__adddf3>
 8009714:	4604      	mov	r4, r0
 8009716:	460d      	mov	r5, r1
 8009718:	4602      	mov	r2, r0
 800971a:	460b      	mov	r3, r1
 800971c:	4630      	mov	r0, r6
 800971e:	4639      	mov	r1, r7
 8009720:	f7f6 fd5c 	bl	80001dc <__adddf3>
 8009724:	4632      	mov	r2, r6
 8009726:	463b      	mov	r3, r7
 8009728:	4680      	mov	r8, r0
 800972a:	4689      	mov	r9, r1
 800972c:	f7f6 fd54 	bl	80001d8 <__aeabi_dsub>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	4620      	mov	r0, r4
 8009736:	4629      	mov	r1, r5
 8009738:	f7f6 fd4e 	bl	80001d8 <__aeabi_dsub>
 800973c:	4642      	mov	r2, r8
 800973e:	4606      	mov	r6, r0
 8009740:	460f      	mov	r7, r1
 8009742:	464b      	mov	r3, r9
 8009744:	4640      	mov	r0, r8
 8009746:	4649      	mov	r1, r9
 8009748:	f7f6 fefe 	bl	8000548 <__aeabi_dmul>
 800974c:	a35c      	add	r3, pc, #368	; (adr r3, 80098c0 <__ieee754_pow+0x9f8>)
 800974e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009752:	4604      	mov	r4, r0
 8009754:	460d      	mov	r5, r1
 8009756:	f7f6 fef7 	bl	8000548 <__aeabi_dmul>
 800975a:	a35b      	add	r3, pc, #364	; (adr r3, 80098c8 <__ieee754_pow+0xa00>)
 800975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009760:	f7f6 fd3a 	bl	80001d8 <__aeabi_dsub>
 8009764:	4622      	mov	r2, r4
 8009766:	462b      	mov	r3, r5
 8009768:	f7f6 feee 	bl	8000548 <__aeabi_dmul>
 800976c:	a358      	add	r3, pc, #352	; (adr r3, 80098d0 <__ieee754_pow+0xa08>)
 800976e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009772:	f7f6 fd33 	bl	80001dc <__adddf3>
 8009776:	4622      	mov	r2, r4
 8009778:	462b      	mov	r3, r5
 800977a:	f7f6 fee5 	bl	8000548 <__aeabi_dmul>
 800977e:	a356      	add	r3, pc, #344	; (adr r3, 80098d8 <__ieee754_pow+0xa10>)
 8009780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009784:	f7f6 fd28 	bl	80001d8 <__aeabi_dsub>
 8009788:	4622      	mov	r2, r4
 800978a:	462b      	mov	r3, r5
 800978c:	f7f6 fedc 	bl	8000548 <__aeabi_dmul>
 8009790:	a353      	add	r3, pc, #332	; (adr r3, 80098e0 <__ieee754_pow+0xa18>)
 8009792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009796:	f7f6 fd21 	bl	80001dc <__adddf3>
 800979a:	4622      	mov	r2, r4
 800979c:	462b      	mov	r3, r5
 800979e:	f7f6 fed3 	bl	8000548 <__aeabi_dmul>
 80097a2:	4602      	mov	r2, r0
 80097a4:	460b      	mov	r3, r1
 80097a6:	4640      	mov	r0, r8
 80097a8:	4649      	mov	r1, r9
 80097aa:	f7f6 fd15 	bl	80001d8 <__aeabi_dsub>
 80097ae:	4604      	mov	r4, r0
 80097b0:	460d      	mov	r5, r1
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	4640      	mov	r0, r8
 80097b8:	4649      	mov	r1, r9
 80097ba:	f7f6 fec5 	bl	8000548 <__aeabi_dmul>
 80097be:	2200      	movs	r2, #0
 80097c0:	ec41 0b19 	vmov	d9, r0, r1
 80097c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80097c8:	4620      	mov	r0, r4
 80097ca:	4629      	mov	r1, r5
 80097cc:	f7f6 fd04 	bl	80001d8 <__aeabi_dsub>
 80097d0:	4602      	mov	r2, r0
 80097d2:	460b      	mov	r3, r1
 80097d4:	ec51 0b19 	vmov	r0, r1, d9
 80097d8:	f7f6 ffe0 	bl	800079c <__aeabi_ddiv>
 80097dc:	4632      	mov	r2, r6
 80097de:	4604      	mov	r4, r0
 80097e0:	460d      	mov	r5, r1
 80097e2:	463b      	mov	r3, r7
 80097e4:	4640      	mov	r0, r8
 80097e6:	4649      	mov	r1, r9
 80097e8:	f7f6 feae 	bl	8000548 <__aeabi_dmul>
 80097ec:	4632      	mov	r2, r6
 80097ee:	463b      	mov	r3, r7
 80097f0:	f7f6 fcf4 	bl	80001dc <__adddf3>
 80097f4:	4602      	mov	r2, r0
 80097f6:	460b      	mov	r3, r1
 80097f8:	4620      	mov	r0, r4
 80097fa:	4629      	mov	r1, r5
 80097fc:	f7f6 fcec 	bl	80001d8 <__aeabi_dsub>
 8009800:	4642      	mov	r2, r8
 8009802:	464b      	mov	r3, r9
 8009804:	f7f6 fce8 	bl	80001d8 <__aeabi_dsub>
 8009808:	460b      	mov	r3, r1
 800980a:	4602      	mov	r2, r0
 800980c:	493a      	ldr	r1, [pc, #232]	; (80098f8 <__ieee754_pow+0xa30>)
 800980e:	2000      	movs	r0, #0
 8009810:	f7f6 fce2 	bl	80001d8 <__aeabi_dsub>
 8009814:	e9cd 0100 	strd	r0, r1, [sp]
 8009818:	9b01      	ldr	r3, [sp, #4]
 800981a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800981e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009822:	da2f      	bge.n	8009884 <__ieee754_pow+0x9bc>
 8009824:	4650      	mov	r0, sl
 8009826:	ed9d 0b00 	vldr	d0, [sp]
 800982a:	f000 f9cd 	bl	8009bc8 <scalbn>
 800982e:	ec51 0b10 	vmov	r0, r1, d0
 8009832:	ec53 2b18 	vmov	r2, r3, d8
 8009836:	f7ff bbe0 	b.w	8008ffa <__ieee754_pow+0x132>
 800983a:	4b30      	ldr	r3, [pc, #192]	; (80098fc <__ieee754_pow+0xa34>)
 800983c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009840:	429e      	cmp	r6, r3
 8009842:	f77f af0b 	ble.w	800965c <__ieee754_pow+0x794>
 8009846:	4b2e      	ldr	r3, [pc, #184]	; (8009900 <__ieee754_pow+0xa38>)
 8009848:	440b      	add	r3, r1
 800984a:	4303      	orrs	r3, r0
 800984c:	d00b      	beq.n	8009866 <__ieee754_pow+0x99e>
 800984e:	a326      	add	r3, pc, #152	; (adr r3, 80098e8 <__ieee754_pow+0xa20>)
 8009850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009854:	ec51 0b18 	vmov	r0, r1, d8
 8009858:	f7f6 fe76 	bl	8000548 <__aeabi_dmul>
 800985c:	a322      	add	r3, pc, #136	; (adr r3, 80098e8 <__ieee754_pow+0xa20>)
 800985e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009862:	f7ff bbca 	b.w	8008ffa <__ieee754_pow+0x132>
 8009866:	4622      	mov	r2, r4
 8009868:	462b      	mov	r3, r5
 800986a:	f7f6 fcb5 	bl	80001d8 <__aeabi_dsub>
 800986e:	4642      	mov	r2, r8
 8009870:	464b      	mov	r3, r9
 8009872:	f7f7 f8ef 	bl	8000a54 <__aeabi_dcmpge>
 8009876:	2800      	cmp	r0, #0
 8009878:	f43f aef0 	beq.w	800965c <__ieee754_pow+0x794>
 800987c:	e7e7      	b.n	800984e <__ieee754_pow+0x986>
 800987e:	f04f 0a00 	mov.w	sl, #0
 8009882:	e717      	b.n	80096b4 <__ieee754_pow+0x7ec>
 8009884:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009888:	4619      	mov	r1, r3
 800988a:	e7d2      	b.n	8009832 <__ieee754_pow+0x96a>
 800988c:	491a      	ldr	r1, [pc, #104]	; (80098f8 <__ieee754_pow+0xa30>)
 800988e:	2000      	movs	r0, #0
 8009890:	f7ff bb9e 	b.w	8008fd0 <__ieee754_pow+0x108>
 8009894:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009898:	f7ff bb9a 	b.w	8008fd0 <__ieee754_pow+0x108>
 800989c:	9000      	str	r0, [sp, #0]
 800989e:	f7ff bb76 	b.w	8008f8e <__ieee754_pow+0xc6>
 80098a2:	2100      	movs	r1, #0
 80098a4:	f7ff bb60 	b.w	8008f68 <__ieee754_pow+0xa0>
 80098a8:	00000000 	.word	0x00000000
 80098ac:	3fe62e43 	.word	0x3fe62e43
 80098b0:	fefa39ef 	.word	0xfefa39ef
 80098b4:	3fe62e42 	.word	0x3fe62e42
 80098b8:	0ca86c39 	.word	0x0ca86c39
 80098bc:	be205c61 	.word	0xbe205c61
 80098c0:	72bea4d0 	.word	0x72bea4d0
 80098c4:	3e663769 	.word	0x3e663769
 80098c8:	c5d26bf1 	.word	0xc5d26bf1
 80098cc:	3ebbbd41 	.word	0x3ebbbd41
 80098d0:	af25de2c 	.word	0xaf25de2c
 80098d4:	3f11566a 	.word	0x3f11566a
 80098d8:	16bebd93 	.word	0x16bebd93
 80098dc:	3f66c16c 	.word	0x3f66c16c
 80098e0:	5555553e 	.word	0x5555553e
 80098e4:	3fc55555 	.word	0x3fc55555
 80098e8:	c2f8f359 	.word	0xc2f8f359
 80098ec:	01a56e1f 	.word	0x01a56e1f
 80098f0:	3fe00000 	.word	0x3fe00000
 80098f4:	000fffff 	.word	0x000fffff
 80098f8:	3ff00000 	.word	0x3ff00000
 80098fc:	4090cbff 	.word	0x4090cbff
 8009900:	3f6f3400 	.word	0x3f6f3400
 8009904:	652b82fe 	.word	0x652b82fe
 8009908:	3c971547 	.word	0x3c971547

0800990c <__ieee754_sqrt>:
 800990c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009910:	ec55 4b10 	vmov	r4, r5, d0
 8009914:	4e56      	ldr	r6, [pc, #344]	; (8009a70 <__ieee754_sqrt+0x164>)
 8009916:	43ae      	bics	r6, r5
 8009918:	ee10 0a10 	vmov	r0, s0
 800991c:	ee10 3a10 	vmov	r3, s0
 8009920:	4629      	mov	r1, r5
 8009922:	462a      	mov	r2, r5
 8009924:	d110      	bne.n	8009948 <__ieee754_sqrt+0x3c>
 8009926:	ee10 2a10 	vmov	r2, s0
 800992a:	462b      	mov	r3, r5
 800992c:	f7f6 fe0c 	bl	8000548 <__aeabi_dmul>
 8009930:	4602      	mov	r2, r0
 8009932:	460b      	mov	r3, r1
 8009934:	4620      	mov	r0, r4
 8009936:	4629      	mov	r1, r5
 8009938:	f7f6 fc50 	bl	80001dc <__adddf3>
 800993c:	4604      	mov	r4, r0
 800993e:	460d      	mov	r5, r1
 8009940:	ec45 4b10 	vmov	d0, r4, r5
 8009944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009948:	2d00      	cmp	r5, #0
 800994a:	dc10      	bgt.n	800996e <__ieee754_sqrt+0x62>
 800994c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009950:	4330      	orrs	r0, r6
 8009952:	d0f5      	beq.n	8009940 <__ieee754_sqrt+0x34>
 8009954:	b15d      	cbz	r5, 800996e <__ieee754_sqrt+0x62>
 8009956:	ee10 2a10 	vmov	r2, s0
 800995a:	462b      	mov	r3, r5
 800995c:	ee10 0a10 	vmov	r0, s0
 8009960:	f7f6 fc3a 	bl	80001d8 <__aeabi_dsub>
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	f7f6 ff18 	bl	800079c <__aeabi_ddiv>
 800996c:	e7e6      	b.n	800993c <__ieee754_sqrt+0x30>
 800996e:	1509      	asrs	r1, r1, #20
 8009970:	d076      	beq.n	8009a60 <__ieee754_sqrt+0x154>
 8009972:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009976:	07ce      	lsls	r6, r1, #31
 8009978:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800997c:	bf5e      	ittt	pl
 800997e:	0fda      	lsrpl	r2, r3, #31
 8009980:	005b      	lslpl	r3, r3, #1
 8009982:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009986:	0fda      	lsrs	r2, r3, #31
 8009988:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800998c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009990:	2000      	movs	r0, #0
 8009992:	106d      	asrs	r5, r5, #1
 8009994:	005b      	lsls	r3, r3, #1
 8009996:	f04f 0e16 	mov.w	lr, #22
 800999a:	4684      	mov	ip, r0
 800999c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099a0:	eb0c 0401 	add.w	r4, ip, r1
 80099a4:	4294      	cmp	r4, r2
 80099a6:	bfde      	ittt	le
 80099a8:	1b12      	suble	r2, r2, r4
 80099aa:	eb04 0c01 	addle.w	ip, r4, r1
 80099ae:	1840      	addle	r0, r0, r1
 80099b0:	0052      	lsls	r2, r2, #1
 80099b2:	f1be 0e01 	subs.w	lr, lr, #1
 80099b6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80099ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80099be:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80099c2:	d1ed      	bne.n	80099a0 <__ieee754_sqrt+0x94>
 80099c4:	4671      	mov	r1, lr
 80099c6:	2720      	movs	r7, #32
 80099c8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80099cc:	4562      	cmp	r2, ip
 80099ce:	eb04 060e 	add.w	r6, r4, lr
 80099d2:	dc02      	bgt.n	80099da <__ieee754_sqrt+0xce>
 80099d4:	d113      	bne.n	80099fe <__ieee754_sqrt+0xf2>
 80099d6:	429e      	cmp	r6, r3
 80099d8:	d811      	bhi.n	80099fe <__ieee754_sqrt+0xf2>
 80099da:	2e00      	cmp	r6, #0
 80099dc:	eb06 0e04 	add.w	lr, r6, r4
 80099e0:	da43      	bge.n	8009a6a <__ieee754_sqrt+0x15e>
 80099e2:	f1be 0f00 	cmp.w	lr, #0
 80099e6:	db40      	blt.n	8009a6a <__ieee754_sqrt+0x15e>
 80099e8:	f10c 0801 	add.w	r8, ip, #1
 80099ec:	eba2 020c 	sub.w	r2, r2, ip
 80099f0:	429e      	cmp	r6, r3
 80099f2:	bf88      	it	hi
 80099f4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80099f8:	1b9b      	subs	r3, r3, r6
 80099fa:	4421      	add	r1, r4
 80099fc:	46c4      	mov	ip, r8
 80099fe:	0052      	lsls	r2, r2, #1
 8009a00:	3f01      	subs	r7, #1
 8009a02:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009a06:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009a0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009a0e:	d1dd      	bne.n	80099cc <__ieee754_sqrt+0xc0>
 8009a10:	4313      	orrs	r3, r2
 8009a12:	d006      	beq.n	8009a22 <__ieee754_sqrt+0x116>
 8009a14:	1c4c      	adds	r4, r1, #1
 8009a16:	bf13      	iteet	ne
 8009a18:	3101      	addne	r1, #1
 8009a1a:	3001      	addeq	r0, #1
 8009a1c:	4639      	moveq	r1, r7
 8009a1e:	f021 0101 	bicne.w	r1, r1, #1
 8009a22:	1043      	asrs	r3, r0, #1
 8009a24:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009a28:	0849      	lsrs	r1, r1, #1
 8009a2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009a2e:	07c2      	lsls	r2, r0, #31
 8009a30:	bf48      	it	mi
 8009a32:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009a36:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009a3a:	460c      	mov	r4, r1
 8009a3c:	463d      	mov	r5, r7
 8009a3e:	e77f      	b.n	8009940 <__ieee754_sqrt+0x34>
 8009a40:	0ada      	lsrs	r2, r3, #11
 8009a42:	3815      	subs	r0, #21
 8009a44:	055b      	lsls	r3, r3, #21
 8009a46:	2a00      	cmp	r2, #0
 8009a48:	d0fa      	beq.n	8009a40 <__ieee754_sqrt+0x134>
 8009a4a:	02d7      	lsls	r7, r2, #11
 8009a4c:	d50a      	bpl.n	8009a64 <__ieee754_sqrt+0x158>
 8009a4e:	f1c1 0420 	rsb	r4, r1, #32
 8009a52:	fa23 f404 	lsr.w	r4, r3, r4
 8009a56:	1e4d      	subs	r5, r1, #1
 8009a58:	408b      	lsls	r3, r1
 8009a5a:	4322      	orrs	r2, r4
 8009a5c:	1b41      	subs	r1, r0, r5
 8009a5e:	e788      	b.n	8009972 <__ieee754_sqrt+0x66>
 8009a60:	4608      	mov	r0, r1
 8009a62:	e7f0      	b.n	8009a46 <__ieee754_sqrt+0x13a>
 8009a64:	0052      	lsls	r2, r2, #1
 8009a66:	3101      	adds	r1, #1
 8009a68:	e7ef      	b.n	8009a4a <__ieee754_sqrt+0x13e>
 8009a6a:	46e0      	mov	r8, ip
 8009a6c:	e7be      	b.n	80099ec <__ieee754_sqrt+0xe0>
 8009a6e:	bf00      	nop
 8009a70:	7ff00000 	.word	0x7ff00000

08009a74 <fabs>:
 8009a74:	ec51 0b10 	vmov	r0, r1, d0
 8009a78:	ee10 2a10 	vmov	r2, s0
 8009a7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a80:	ec43 2b10 	vmov	d0, r2, r3
 8009a84:	4770      	bx	lr

08009a86 <finite>:
 8009a86:	b082      	sub	sp, #8
 8009a88:	ed8d 0b00 	vstr	d0, [sp]
 8009a8c:	9801      	ldr	r0, [sp, #4]
 8009a8e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009a92:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009a96:	0fc0      	lsrs	r0, r0, #31
 8009a98:	b002      	add	sp, #8
 8009a9a:	4770      	bx	lr
 8009a9c:	0000      	movs	r0, r0
	...

08009aa0 <nan>:
 8009aa0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009aa8 <nan+0x8>
 8009aa4:	4770      	bx	lr
 8009aa6:	bf00      	nop
 8009aa8:	00000000 	.word	0x00000000
 8009aac:	7ff80000 	.word	0x7ff80000

08009ab0 <rint>:
 8009ab0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ab2:	ec51 0b10 	vmov	r0, r1, d0
 8009ab6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009aba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009abe:	2e13      	cmp	r6, #19
 8009ac0:	ee10 4a10 	vmov	r4, s0
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009aca:	dc58      	bgt.n	8009b7e <rint+0xce>
 8009acc:	2e00      	cmp	r6, #0
 8009ace:	da2b      	bge.n	8009b28 <rint+0x78>
 8009ad0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009ad4:	4302      	orrs	r2, r0
 8009ad6:	d023      	beq.n	8009b20 <rint+0x70>
 8009ad8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009adc:	4302      	orrs	r2, r0
 8009ade:	4254      	negs	r4, r2
 8009ae0:	4314      	orrs	r4, r2
 8009ae2:	0c4b      	lsrs	r3, r1, #17
 8009ae4:	0b24      	lsrs	r4, r4, #12
 8009ae6:	045b      	lsls	r3, r3, #17
 8009ae8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009aec:	ea44 0103 	orr.w	r1, r4, r3
 8009af0:	4b32      	ldr	r3, [pc, #200]	; (8009bbc <rint+0x10c>)
 8009af2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009af6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009afa:	4602      	mov	r2, r0
 8009afc:	460b      	mov	r3, r1
 8009afe:	4630      	mov	r0, r6
 8009b00:	4639      	mov	r1, r7
 8009b02:	f7f6 fb6b 	bl	80001dc <__adddf3>
 8009b06:	e9cd 0100 	strd	r0, r1, [sp]
 8009b0a:	463b      	mov	r3, r7
 8009b0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b10:	4632      	mov	r2, r6
 8009b12:	f7f6 fb61 	bl	80001d8 <__aeabi_dsub>
 8009b16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009b1a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8009b1e:	4639      	mov	r1, r7
 8009b20:	ec41 0b10 	vmov	d0, r0, r1
 8009b24:	b003      	add	sp, #12
 8009b26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b28:	4a25      	ldr	r2, [pc, #148]	; (8009bc0 <rint+0x110>)
 8009b2a:	4132      	asrs	r2, r6
 8009b2c:	ea01 0702 	and.w	r7, r1, r2
 8009b30:	4307      	orrs	r7, r0
 8009b32:	d0f5      	beq.n	8009b20 <rint+0x70>
 8009b34:	0851      	lsrs	r1, r2, #1
 8009b36:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8009b3a:	4314      	orrs	r4, r2
 8009b3c:	d00c      	beq.n	8009b58 <rint+0xa8>
 8009b3e:	ea23 0201 	bic.w	r2, r3, r1
 8009b42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009b46:	2e13      	cmp	r6, #19
 8009b48:	fa43 f606 	asr.w	r6, r3, r6
 8009b4c:	bf0c      	ite	eq
 8009b4e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009b52:	2400      	movne	r4, #0
 8009b54:	ea42 0306 	orr.w	r3, r2, r6
 8009b58:	4918      	ldr	r1, [pc, #96]	; (8009bbc <rint+0x10c>)
 8009b5a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8009b5e:	4622      	mov	r2, r4
 8009b60:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009b64:	4620      	mov	r0, r4
 8009b66:	4629      	mov	r1, r5
 8009b68:	f7f6 fb38 	bl	80001dc <__adddf3>
 8009b6c:	e9cd 0100 	strd	r0, r1, [sp]
 8009b70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b74:	4622      	mov	r2, r4
 8009b76:	462b      	mov	r3, r5
 8009b78:	f7f6 fb2e 	bl	80001d8 <__aeabi_dsub>
 8009b7c:	e7d0      	b.n	8009b20 <rint+0x70>
 8009b7e:	2e33      	cmp	r6, #51	; 0x33
 8009b80:	dd07      	ble.n	8009b92 <rint+0xe2>
 8009b82:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009b86:	d1cb      	bne.n	8009b20 <rint+0x70>
 8009b88:	ee10 2a10 	vmov	r2, s0
 8009b8c:	f7f6 fb26 	bl	80001dc <__adddf3>
 8009b90:	e7c6      	b.n	8009b20 <rint+0x70>
 8009b92:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8009b96:	f04f 36ff 	mov.w	r6, #4294967295
 8009b9a:	40d6      	lsrs	r6, r2
 8009b9c:	4230      	tst	r0, r6
 8009b9e:	d0bf      	beq.n	8009b20 <rint+0x70>
 8009ba0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8009ba4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8009ba8:	bf1f      	itttt	ne
 8009baa:	ea24 0101 	bicne.w	r1, r4, r1
 8009bae:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009bb2:	fa44 f202 	asrne.w	r2, r4, r2
 8009bb6:	ea41 0402 	orrne.w	r4, r1, r2
 8009bba:	e7cd      	b.n	8009b58 <rint+0xa8>
 8009bbc:	08009e88 	.word	0x08009e88
 8009bc0:	000fffff 	.word	0x000fffff
 8009bc4:	00000000 	.word	0x00000000

08009bc8 <scalbn>:
 8009bc8:	b570      	push	{r4, r5, r6, lr}
 8009bca:	ec55 4b10 	vmov	r4, r5, d0
 8009bce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	462b      	mov	r3, r5
 8009bd6:	b99a      	cbnz	r2, 8009c00 <scalbn+0x38>
 8009bd8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009bdc:	4323      	orrs	r3, r4
 8009bde:	d036      	beq.n	8009c4e <scalbn+0x86>
 8009be0:	4b39      	ldr	r3, [pc, #228]	; (8009cc8 <scalbn+0x100>)
 8009be2:	4629      	mov	r1, r5
 8009be4:	ee10 0a10 	vmov	r0, s0
 8009be8:	2200      	movs	r2, #0
 8009bea:	f7f6 fcad 	bl	8000548 <__aeabi_dmul>
 8009bee:	4b37      	ldr	r3, [pc, #220]	; (8009ccc <scalbn+0x104>)
 8009bf0:	429e      	cmp	r6, r3
 8009bf2:	4604      	mov	r4, r0
 8009bf4:	460d      	mov	r5, r1
 8009bf6:	da10      	bge.n	8009c1a <scalbn+0x52>
 8009bf8:	a32b      	add	r3, pc, #172	; (adr r3, 8009ca8 <scalbn+0xe0>)
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	e03a      	b.n	8009c76 <scalbn+0xae>
 8009c00:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009c04:	428a      	cmp	r2, r1
 8009c06:	d10c      	bne.n	8009c22 <scalbn+0x5a>
 8009c08:	ee10 2a10 	vmov	r2, s0
 8009c0c:	4620      	mov	r0, r4
 8009c0e:	4629      	mov	r1, r5
 8009c10:	f7f6 fae4 	bl	80001dc <__adddf3>
 8009c14:	4604      	mov	r4, r0
 8009c16:	460d      	mov	r5, r1
 8009c18:	e019      	b.n	8009c4e <scalbn+0x86>
 8009c1a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009c1e:	460b      	mov	r3, r1
 8009c20:	3a36      	subs	r2, #54	; 0x36
 8009c22:	4432      	add	r2, r6
 8009c24:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009c28:	428a      	cmp	r2, r1
 8009c2a:	dd08      	ble.n	8009c3e <scalbn+0x76>
 8009c2c:	2d00      	cmp	r5, #0
 8009c2e:	a120      	add	r1, pc, #128	; (adr r1, 8009cb0 <scalbn+0xe8>)
 8009c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c34:	da1c      	bge.n	8009c70 <scalbn+0xa8>
 8009c36:	a120      	add	r1, pc, #128	; (adr r1, 8009cb8 <scalbn+0xf0>)
 8009c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c3c:	e018      	b.n	8009c70 <scalbn+0xa8>
 8009c3e:	2a00      	cmp	r2, #0
 8009c40:	dd08      	ble.n	8009c54 <scalbn+0x8c>
 8009c42:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c46:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c4a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009c4e:	ec45 4b10 	vmov	d0, r4, r5
 8009c52:	bd70      	pop	{r4, r5, r6, pc}
 8009c54:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009c58:	da19      	bge.n	8009c8e <scalbn+0xc6>
 8009c5a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009c5e:	429e      	cmp	r6, r3
 8009c60:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009c64:	dd0a      	ble.n	8009c7c <scalbn+0xb4>
 8009c66:	a112      	add	r1, pc, #72	; (adr r1, 8009cb0 <scalbn+0xe8>)
 8009c68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d1e2      	bne.n	8009c36 <scalbn+0x6e>
 8009c70:	a30f      	add	r3, pc, #60	; (adr r3, 8009cb0 <scalbn+0xe8>)
 8009c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c76:	f7f6 fc67 	bl	8000548 <__aeabi_dmul>
 8009c7a:	e7cb      	b.n	8009c14 <scalbn+0x4c>
 8009c7c:	a10a      	add	r1, pc, #40	; (adr r1, 8009ca8 <scalbn+0xe0>)
 8009c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d0b8      	beq.n	8009bf8 <scalbn+0x30>
 8009c86:	a10e      	add	r1, pc, #56	; (adr r1, 8009cc0 <scalbn+0xf8>)
 8009c88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c8c:	e7b4      	b.n	8009bf8 <scalbn+0x30>
 8009c8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c92:	3236      	adds	r2, #54	; 0x36
 8009c94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	4b0c      	ldr	r3, [pc, #48]	; (8009cd0 <scalbn+0x108>)
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	e7e8      	b.n	8009c76 <scalbn+0xae>
 8009ca4:	f3af 8000 	nop.w
 8009ca8:	c2f8f359 	.word	0xc2f8f359
 8009cac:	01a56e1f 	.word	0x01a56e1f
 8009cb0:	8800759c 	.word	0x8800759c
 8009cb4:	7e37e43c 	.word	0x7e37e43c
 8009cb8:	8800759c 	.word	0x8800759c
 8009cbc:	fe37e43c 	.word	0xfe37e43c
 8009cc0:	c2f8f359 	.word	0xc2f8f359
 8009cc4:	81a56e1f 	.word	0x81a56e1f
 8009cc8:	43500000 	.word	0x43500000
 8009ccc:	ffff3cb0 	.word	0xffff3cb0
 8009cd0:	3c900000 	.word	0x3c900000

08009cd4 <_init>:
 8009cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cd6:	bf00      	nop
 8009cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cda:	bc08      	pop	{r3}
 8009cdc:	469e      	mov	lr, r3
 8009cde:	4770      	bx	lr

08009ce0 <_fini>:
 8009ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ce2:	bf00      	nop
 8009ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce6:	bc08      	pop	{r3}
 8009ce8:	469e      	mov	lr, r3
 8009cea:	4770      	bx	lr
