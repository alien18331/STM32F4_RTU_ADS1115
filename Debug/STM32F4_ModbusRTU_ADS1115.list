
STM32F4_ModbusRTU_ADS1115.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  080090f0  080090f0  000190f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009218  08009218  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009218  08009218  00019218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009220  08009220  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009220  08009220  00019220  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009224  08009224  00019224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009228  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004548  20000078  080092a0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200045c0  080092a0  000245c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001911f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a9  00000000  00000000  000391c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001500  00000000  00000000  0003c970  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001398  00000000  00000000  0003de70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000239b2  00000000  00000000  0003f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016dc7  00000000  00000000  00062bba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5ef7  00000000  00000000  00079981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014f878  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c10  00000000  00000000  0014f8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080090d4 	.word	0x080090d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080090d4 	.word	0x080090d4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmpun>:
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	d102      	bne.n	8000a8c <__aeabi_dcmpun+0x10>
 8000a86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8a:	d10a      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x20>
 8000a96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9a:	d102      	bne.n	8000aa2 <__aeabi_dcmpun+0x26>
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	f04f 0001 	mov.w	r0, #1
 8000aa6:	4770      	bx	lr

08000aa8 <__aeabi_d2uiz>:
 8000aa8:	004a      	lsls	r2, r1, #1
 8000aaa:	d211      	bcs.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000aac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab0:	d211      	bcs.n	8000ad6 <__aeabi_d2uiz+0x2e>
 8000ab2:	d50d      	bpl.n	8000ad0 <__aeabi_d2uiz+0x28>
 8000ab4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000abc:	d40e      	bmi.n	8000adc <__aeabi_d2uiz+0x34>
 8000abe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ac6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aca:	fa23 f002 	lsr.w	r0, r3, r2
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d102      	bne.n	8000ae2 <__aeabi_d2uiz+0x3a>
 8000adc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae0:	4770      	bx	lr
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_uldivmod>:
 8000ae8:	b953      	cbnz	r3, 8000b00 <__aeabi_uldivmod+0x18>
 8000aea:	b94a      	cbnz	r2, 8000b00 <__aeabi_uldivmod+0x18>
 8000aec:	2900      	cmp	r1, #0
 8000aee:	bf08      	it	eq
 8000af0:	2800      	cmpeq	r0, #0
 8000af2:	bf1c      	itt	ne
 8000af4:	f04f 31ff 	movne.w	r1, #4294967295
 8000af8:	f04f 30ff 	movne.w	r0, #4294967295
 8000afc:	f000 b96e 	b.w	8000ddc <__aeabi_idiv0>
 8000b00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b08:	f000 f806 	bl	8000b18 <__udivmoddi4>
 8000b0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b14:	b004      	add	sp, #16
 8000b16:	4770      	bx	lr

08000b18 <__udivmoddi4>:
 8000b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b1c:	9d08      	ldr	r5, [sp, #32]
 8000b1e:	4604      	mov	r4, r0
 8000b20:	468c      	mov	ip, r1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f040 8083 	bne.w	8000c2e <__udivmoddi4+0x116>
 8000b28:	428a      	cmp	r2, r1
 8000b2a:	4617      	mov	r7, r2
 8000b2c:	d947      	bls.n	8000bbe <__udivmoddi4+0xa6>
 8000b2e:	fab2 f282 	clz	r2, r2
 8000b32:	b142      	cbz	r2, 8000b46 <__udivmoddi4+0x2e>
 8000b34:	f1c2 0020 	rsb	r0, r2, #32
 8000b38:	fa24 f000 	lsr.w	r0, r4, r0
 8000b3c:	4091      	lsls	r1, r2
 8000b3e:	4097      	lsls	r7, r2
 8000b40:	ea40 0c01 	orr.w	ip, r0, r1
 8000b44:	4094      	lsls	r4, r2
 8000b46:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b4a:	0c23      	lsrs	r3, r4, #16
 8000b4c:	fbbc f6f8 	udiv	r6, ip, r8
 8000b50:	fa1f fe87 	uxth.w	lr, r7
 8000b54:	fb08 c116 	mls	r1, r8, r6, ip
 8000b58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b5c:	fb06 f10e 	mul.w	r1, r6, lr
 8000b60:	4299      	cmp	r1, r3
 8000b62:	d909      	bls.n	8000b78 <__udivmoddi4+0x60>
 8000b64:	18fb      	adds	r3, r7, r3
 8000b66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b6a:	f080 8119 	bcs.w	8000da0 <__udivmoddi4+0x288>
 8000b6e:	4299      	cmp	r1, r3
 8000b70:	f240 8116 	bls.w	8000da0 <__udivmoddi4+0x288>
 8000b74:	3e02      	subs	r6, #2
 8000b76:	443b      	add	r3, r7
 8000b78:	1a5b      	subs	r3, r3, r1
 8000b7a:	b2a4      	uxth	r4, r4
 8000b7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b80:	fb08 3310 	mls	r3, r8, r0, r3
 8000b84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b8c:	45a6      	cmp	lr, r4
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x8c>
 8000b90:	193c      	adds	r4, r7, r4
 8000b92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b96:	f080 8105 	bcs.w	8000da4 <__udivmoddi4+0x28c>
 8000b9a:	45a6      	cmp	lr, r4
 8000b9c:	f240 8102 	bls.w	8000da4 <__udivmoddi4+0x28c>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	443c      	add	r4, r7
 8000ba4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba8:	eba4 040e 	sub.w	r4, r4, lr
 8000bac:	2600      	movs	r6, #0
 8000bae:	b11d      	cbz	r5, 8000bb8 <__udivmoddi4+0xa0>
 8000bb0:	40d4      	lsrs	r4, r2
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb8:	4631      	mov	r1, r6
 8000bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bbe:	b902      	cbnz	r2, 8000bc2 <__udivmoddi4+0xaa>
 8000bc0:	deff      	udf	#255	; 0xff
 8000bc2:	fab2 f282 	clz	r2, r2
 8000bc6:	2a00      	cmp	r2, #0
 8000bc8:	d150      	bne.n	8000c6c <__udivmoddi4+0x154>
 8000bca:	1bcb      	subs	r3, r1, r7
 8000bcc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bd0:	fa1f f887 	uxth.w	r8, r7
 8000bd4:	2601      	movs	r6, #1
 8000bd6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000bda:	0c21      	lsrs	r1, r4, #16
 8000bdc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000be0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be4:	fb08 f30c 	mul.w	r3, r8, ip
 8000be8:	428b      	cmp	r3, r1
 8000bea:	d907      	bls.n	8000bfc <__udivmoddi4+0xe4>
 8000bec:	1879      	adds	r1, r7, r1
 8000bee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bf2:	d202      	bcs.n	8000bfa <__udivmoddi4+0xe2>
 8000bf4:	428b      	cmp	r3, r1
 8000bf6:	f200 80e9 	bhi.w	8000dcc <__udivmoddi4+0x2b4>
 8000bfa:	4684      	mov	ip, r0
 8000bfc:	1ac9      	subs	r1, r1, r3
 8000bfe:	b2a3      	uxth	r3, r4
 8000c00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c04:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c08:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c0c:	fb08 f800 	mul.w	r8, r8, r0
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	d907      	bls.n	8000c24 <__udivmoddi4+0x10c>
 8000c14:	193c      	adds	r4, r7, r4
 8000c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c1a:	d202      	bcs.n	8000c22 <__udivmoddi4+0x10a>
 8000c1c:	45a0      	cmp	r8, r4
 8000c1e:	f200 80d9 	bhi.w	8000dd4 <__udivmoddi4+0x2bc>
 8000c22:	4618      	mov	r0, r3
 8000c24:	eba4 0408 	sub.w	r4, r4, r8
 8000c28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c2c:	e7bf      	b.n	8000bae <__udivmoddi4+0x96>
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0x12e>
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	f000 80b1 	beq.w	8000d9a <__udivmoddi4+0x282>
 8000c38:	2600      	movs	r6, #0
 8000c3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3e:	4630      	mov	r0, r6
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f683 	clz	r6, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d14a      	bne.n	8000ce4 <__udivmoddi4+0x1cc>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0x140>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80b8 	bhi.w	8000dc8 <__udivmoddi4+0x2b0>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0103 	sbc.w	r1, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	468c      	mov	ip, r1
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	d0a8      	beq.n	8000bb8 <__udivmoddi4+0xa0>
 8000c66:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c6a:	e7a5      	b.n	8000bb8 <__udivmoddi4+0xa0>
 8000c6c:	f1c2 0320 	rsb	r3, r2, #32
 8000c70:	fa20 f603 	lsr.w	r6, r0, r3
 8000c74:	4097      	lsls	r7, r2
 8000c76:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c7e:	40d9      	lsrs	r1, r3
 8000c80:	4330      	orrs	r0, r6
 8000c82:	0c03      	lsrs	r3, r0, #16
 8000c84:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c88:	fa1f f887 	uxth.w	r8, r7
 8000c8c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c94:	fb06 f108 	mul.w	r1, r6, r8
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	fa04 f402 	lsl.w	r4, r4, r2
 8000c9e:	d909      	bls.n	8000cb4 <__udivmoddi4+0x19c>
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ca6:	f080 808d 	bcs.w	8000dc4 <__udivmoddi4+0x2ac>
 8000caa:	4299      	cmp	r1, r3
 8000cac:	f240 808a 	bls.w	8000dc4 <__udivmoddi4+0x2ac>
 8000cb0:	3e02      	subs	r6, #2
 8000cb2:	443b      	add	r3, r7
 8000cb4:	1a5b      	subs	r3, r3, r1
 8000cb6:	b281      	uxth	r1, r0
 8000cb8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cbc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc4:	fb00 f308 	mul.w	r3, r0, r8
 8000cc8:	428b      	cmp	r3, r1
 8000cca:	d907      	bls.n	8000cdc <__udivmoddi4+0x1c4>
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd2:	d273      	bcs.n	8000dbc <__udivmoddi4+0x2a4>
 8000cd4:	428b      	cmp	r3, r1
 8000cd6:	d971      	bls.n	8000dbc <__udivmoddi4+0x2a4>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	4439      	add	r1, r7
 8000cdc:	1acb      	subs	r3, r1, r3
 8000cde:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ce2:	e778      	b.n	8000bd6 <__udivmoddi4+0xbe>
 8000ce4:	f1c6 0c20 	rsb	ip, r6, #32
 8000ce8:	fa03 f406 	lsl.w	r4, r3, r6
 8000cec:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cf0:	431c      	orrs	r4, r3
 8000cf2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cfe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d02:	431f      	orrs	r7, r3
 8000d04:	0c3b      	lsrs	r3, r7, #16
 8000d06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d0a:	fa1f f884 	uxth.w	r8, r4
 8000d0e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d12:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d16:	fb09 fa08 	mul.w	sl, r9, r8
 8000d1a:	458a      	cmp	sl, r1
 8000d1c:	fa02 f206 	lsl.w	r2, r2, r6
 8000d20:	fa00 f306 	lsl.w	r3, r0, r6
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x220>
 8000d26:	1861      	adds	r1, r4, r1
 8000d28:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d2c:	d248      	bcs.n	8000dc0 <__udivmoddi4+0x2a8>
 8000d2e:	458a      	cmp	sl, r1
 8000d30:	d946      	bls.n	8000dc0 <__udivmoddi4+0x2a8>
 8000d32:	f1a9 0902 	sub.w	r9, r9, #2
 8000d36:	4421      	add	r1, r4
 8000d38:	eba1 010a 	sub.w	r1, r1, sl
 8000d3c:	b2bf      	uxth	r7, r7
 8000d3e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d42:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d46:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d4a:	fb00 f808 	mul.w	r8, r0, r8
 8000d4e:	45b8      	cmp	r8, r7
 8000d50:	d907      	bls.n	8000d62 <__udivmoddi4+0x24a>
 8000d52:	19e7      	adds	r7, r4, r7
 8000d54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d58:	d22e      	bcs.n	8000db8 <__udivmoddi4+0x2a0>
 8000d5a:	45b8      	cmp	r8, r7
 8000d5c:	d92c      	bls.n	8000db8 <__udivmoddi4+0x2a0>
 8000d5e:	3802      	subs	r0, #2
 8000d60:	4427      	add	r7, r4
 8000d62:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d66:	eba7 0708 	sub.w	r7, r7, r8
 8000d6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d6e:	454f      	cmp	r7, r9
 8000d70:	46c6      	mov	lr, r8
 8000d72:	4649      	mov	r1, r9
 8000d74:	d31a      	bcc.n	8000dac <__udivmoddi4+0x294>
 8000d76:	d017      	beq.n	8000da8 <__udivmoddi4+0x290>
 8000d78:	b15d      	cbz	r5, 8000d92 <__udivmoddi4+0x27a>
 8000d7a:	ebb3 020e 	subs.w	r2, r3, lr
 8000d7e:	eb67 0701 	sbc.w	r7, r7, r1
 8000d82:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d86:	40f2      	lsrs	r2, r6
 8000d88:	ea4c 0202 	orr.w	r2, ip, r2
 8000d8c:	40f7      	lsrs	r7, r6
 8000d8e:	e9c5 2700 	strd	r2, r7, [r5]
 8000d92:	2600      	movs	r6, #0
 8000d94:	4631      	mov	r1, r6
 8000d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9a:	462e      	mov	r6, r5
 8000d9c:	4628      	mov	r0, r5
 8000d9e:	e70b      	b.n	8000bb8 <__udivmoddi4+0xa0>
 8000da0:	4606      	mov	r6, r0
 8000da2:	e6e9      	b.n	8000b78 <__udivmoddi4+0x60>
 8000da4:	4618      	mov	r0, r3
 8000da6:	e6fd      	b.n	8000ba4 <__udivmoddi4+0x8c>
 8000da8:	4543      	cmp	r3, r8
 8000daa:	d2e5      	bcs.n	8000d78 <__udivmoddi4+0x260>
 8000dac:	ebb8 0e02 	subs.w	lr, r8, r2
 8000db0:	eb69 0104 	sbc.w	r1, r9, r4
 8000db4:	3801      	subs	r0, #1
 8000db6:	e7df      	b.n	8000d78 <__udivmoddi4+0x260>
 8000db8:	4608      	mov	r0, r1
 8000dba:	e7d2      	b.n	8000d62 <__udivmoddi4+0x24a>
 8000dbc:	4660      	mov	r0, ip
 8000dbe:	e78d      	b.n	8000cdc <__udivmoddi4+0x1c4>
 8000dc0:	4681      	mov	r9, r0
 8000dc2:	e7b9      	b.n	8000d38 <__udivmoddi4+0x220>
 8000dc4:	4666      	mov	r6, ip
 8000dc6:	e775      	b.n	8000cb4 <__udivmoddi4+0x19c>
 8000dc8:	4630      	mov	r0, r6
 8000dca:	e74a      	b.n	8000c62 <__udivmoddi4+0x14a>
 8000dcc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dd0:	4439      	add	r1, r7
 8000dd2:	e713      	b.n	8000bfc <__udivmoddi4+0xe4>
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	443c      	add	r4, r7
 8000dd8:	e724      	b.n	8000c24 <__udivmoddi4+0x10c>
 8000dda:	bf00      	nop

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <delay_init>:
static uint16_t fac_ms=0;//ms延時倍乘數
//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 8000dea:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <delay_init+0x44>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	4a0d      	ldr	r2, [pc, #52]	; (8000e24 <delay_init+0x44>)
 8000df0:	f023 0304 	bic.w	r3, r3, #4
 8000df4:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	08db      	lsrs	r3, r3, #3
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <delay_init+0x48>)
 8000dfe:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 8000e00:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <delay_init+0x48>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b29b      	uxth	r3, r3
 8000e06:	461a      	mov	r2, r3
 8000e08:	0152      	lsls	r2, r2, #5
 8000e0a:	1ad2      	subs	r2, r2, r3
 8000e0c:	0092      	lsls	r2, r2, #2
 8000e0e:	4413      	add	r3, r2
 8000e10:	00db      	lsls	r3, r3, #3
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <delay_init+0x4c>)
 8000e16:	801a      	strh	r2, [r3, #0]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e010 	.word	0xe000e010
 8000e28:	20000094 	.word	0x20000094
 8000e2c:	20000096 	.word	0x20000096

08000e30 <delay_ms>:

void delay_ms(uint16_t nms)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b085      	sub	sp, #20
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	80fb      	strh	r3, [r7, #6]
	uint32_t temp;
	SysTick->LOAD=(uint32_t)nms*fac_ms;//時間載入(SysTick->LOAD為24bit)
 8000e3a:	88fb      	ldrh	r3, [r7, #6]
 8000e3c:	4a14      	ldr	r2, [pc, #80]	; (8000e90 <delay_ms+0x60>)
 8000e3e:	8812      	ldrh	r2, [r2, #0]
 8000e40:	4611      	mov	r1, r2
 8000e42:	4a14      	ldr	r2, [pc, #80]	; (8000e94 <delay_ms+0x64>)
 8000e44:	fb01 f303 	mul.w	r3, r1, r3
 8000e48:	6053      	str	r3, [r2, #4]
	SysTick->VAL =0x00;           //清空計數器
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <delay_ms+0x64>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL|=SysTick_CTRL_ENABLE_Msk;          //開始倒數
 8000e50:	4b10      	ldr	r3, [pc, #64]	; (8000e94 <delay_ms+0x64>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0f      	ldr	r2, [pc, #60]	; (8000e94 <delay_ms+0x64>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6013      	str	r3, [r2, #0]
	do
	{
		temp=SysTick->CTRL;
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <delay_ms+0x64>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	60fb      	str	r3, [r7, #12]
	}
	while(temp&0x01&&!(temp&(1<<16)));//等待時間到達
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d004      	beq.n	8000e76 <delay_ms+0x46>
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0f2      	beq.n	8000e5c <delay_ms+0x2c>
	SysTick->CTRL=0x00;       //關閉計數器
 8000e76:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <delay_ms+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
	SysTick->VAL =0X00;       //清空計數器
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <delay_ms+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
}
 8000e82:	bf00      	nop
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	20000096 	.word	0x20000096
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <Read_ads1115>:
	HAL_I2C_Master_Receive(&hi2c1, i2c_addr+1, RX_buffer, 1, 100);
	//delay_ms(1);
}

void Read_ads1115(ADS1115_BOARD * ADS1115_BOARD_SELECT,uint8_t ADDRESS)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	70fb      	strb	r3, [r7, #3]
	 * 			01: VDD (8'b1001001 - 49)
	 * 			10: SDA (8'b1001010 - 4A)
	 * 			11: SCL (8'b1001011 - 4B)
	 *
	 */
	for( int i = 0; i < 2; i++) {
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60fb      	str	r3, [r7, #12]
 8000ea8:	e079      	b.n	8000f9e <Read_ads1115+0x106>
		 * --------------------------------------------
		 * ADSwrite[1]	| config MSB
		 * ADSwrite[2]	| config LSB
		 * --------------------------------------------
		 */
		ADSwrite[0] = 0x01;
 8000eaa:	4b41      	ldr	r3, [pc, #260]	; (8000fb0 <Read_ads1115+0x118>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
		switch(i)
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <Read_ads1115+0x26>
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d004      	beq.n	8000ec6 <Read_ads1115+0x2e>
 8000ebc:	e007      	b.n	8000ece <Read_ads1115+0x36>
		{
			case(0): //MSB
				ADSwrite[1] = 0x81; // 1.000.000.1 CH0 + CH1
 8000ebe:	4b3c      	ldr	r3, [pc, #240]	; (8000fb0 <Read_ads1115+0x118>)
 8000ec0:	2281      	movs	r2, #129	; 0x81
 8000ec2:	705a      	strb	r2, [r3, #1]
			break;
 8000ec4:	e003      	b.n	8000ece <Read_ads1115+0x36>
			case(1):
				ADSwrite[1] = 0xB1;// 1.011.000.1 CH2 + CH3
 8000ec6:	4b3a      	ldr	r3, [pc, #232]	; (8000fb0 <Read_ads1115+0x118>)
 8000ec8:	22b1      	movs	r2, #177	; 0xb1
 8000eca:	705a      	strb	r2, [r3, #1]
			break;
 8000ecc:	bf00      	nop
		}
		ADSwrite[2] = 0xE3; // 1.000.0011 LSB 03/23/83/E3
 8000ece:	4b38      	ldr	r3, [pc, #224]	; (8000fb0 <Read_ads1115+0x118>)
 8000ed0:	22e3      	movs	r2, #227	; 0xe3
 8000ed2:	709a      	strb	r2, [r3, #2]
		HAL_I2C_Master_Transmit(&hi2c1, ADDRESS<<1, ADSwrite, 3, 100);
 8000ed4:	78fb      	ldrb	r3, [r7, #3]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	b299      	uxth	r1, r3
 8000edc:	2364      	movs	r3, #100	; 0x64
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	4a33      	ldr	r2, [pc, #204]	; (8000fb0 <Read_ads1115+0x118>)
 8000ee4:	4833      	ldr	r0, [pc, #204]	; (8000fb4 <Read_ads1115+0x11c>)
 8000ee6:	f002 f90d 	bl	8003104 <HAL_I2C_Master_Transmit>

		/* Conversion register
		 * transform to Conversion register
		 * ADSwrite[0]: 00
		 */
		ADSwrite[0] = 0x00;
 8000eea:	4b31      	ldr	r3, [pc, #196]	; (8000fb0 <Read_ads1115+0x118>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit(&hi2c1, ADDRESS<<1, ADSwrite, 1, 100);
 8000ef0:	78fb      	ldrb	r3, [r7, #3]
 8000ef2:	b29b      	uxth	r3, r3
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	b299      	uxth	r1, r3
 8000ef8:	2364      	movs	r3, #100	; 0x64
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2301      	movs	r3, #1
 8000efe:	4a2c      	ldr	r2, [pc, #176]	; (8000fb0 <Read_ads1115+0x118>)
 8000f00:	482c      	ldr	r0, [pc, #176]	; (8000fb4 <Read_ads1115+0x11c>)
 8000f02:	f002 f8ff 	bl	8003104 <HAL_I2C_Master_Transmit>
		//HAL_Delay(20);
		osDelay(2); // millisec, must have delay time for catch new raw data
 8000f06:	2002      	movs	r0, #2
 8000f08:	f004 ff0d 	bl	8005d26 <osDelay>
		/* Read from ADS
		 * 2Byte, FILO
		 * MSB into ADSwrite[0]
		 * LSB into ADSwrite[1]
		 */
		HAL_I2C_Master_Receive(&hi2c1, ADDRESS<<1, ADSwrite, 2, 100);
 8000f0c:	78fb      	ldrb	r3, [r7, #3]
 8000f0e:	b29b      	uxth	r3, r3
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	b299      	uxth	r1, r3
 8000f14:	2364      	movs	r3, #100	; 0x64
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2302      	movs	r3, #2
 8000f1a:	4a25      	ldr	r2, [pc, #148]	; (8000fb0 <Read_ads1115+0x118>)
 8000f1c:	4825      	ldr	r0, [pc, #148]	; (8000fb4 <Read_ads1115+0x11c>)
 8000f1e:	f002 f9ef 	bl	8003300 <HAL_I2C_Master_Receive>
		reading = (ADSwrite[0] << 8 | ADSwrite[1]);
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <Read_ads1115+0x118>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	021b      	lsls	r3, r3, #8
 8000f28:	b21a      	sxth	r2, r3
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <Read_ads1115+0x118>)
 8000f2c:	785b      	ldrb	r3, [r3, #1]
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	4313      	orrs	r3, r2
 8000f32:	b21a      	sxth	r2, r3
 8000f34:	4b20      	ldr	r3, [pc, #128]	; (8000fb8 <Read_ads1115+0x120>)
 8000f36:	801a      	strh	r2, [r3, #0]
		result = (ADSwrite[0] << 8 | ADSwrite[1]);
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <Read_ads1115+0x118>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	b21a      	sxth	r2, r3
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <Read_ads1115+0x118>)
 8000f42:	785b      	ldrb	r3, [r3, #1]
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	4313      	orrs	r3, r2
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	4b1c      	ldr	r3, [pc, #112]	; (8000fbc <Read_ads1115+0x124>)
 8000f4c:	801a      	strh	r2, [r3, #0]
		}



		// update value
		if(i == 0)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10f      	bne.n	8000f74 <Read_ads1115+0xdc>
		{
			// for voltage mode
			ADS1115_BOARD_SELECT->ADS1115_CH1.data = reading * voltageConv;
 8000f54:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <Read_ads1115+0x120>)
 8000f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5a:	ee07 3a90 	vmov	s15, r3
 8000f5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f62:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <Read_ads1115+0x128>)
 8000f64:	edd3 7a00 	vldr	s15, [r3]
 8000f68:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	edc3 7a00 	vstr	s15, [r3]
 8000f72:	e011      	b.n	8000f98 <Read_ads1115+0x100>
			//ADS1115_BOARD_SELECT->ADS1115_CH1.data = result;

			//for current mode
			//ADS1115_BOARD_SELECT->ADS1115_CH1.data = ((reading * currentConv) + 4);
		}
		else if(i == 1)
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d10e      	bne.n	8000f98 <Read_ads1115+0x100>
		{
			// for voltage mode
			ADS1115_BOARD_SELECT->ADS1115_CH2.data = reading * voltageConv;
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <Read_ads1115+0x120>)
 8000f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f80:	ee07 3a90 	vmov	s15, r3
 8000f84:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <Read_ads1115+0x128>)
 8000f8a:	edd3 7a00 	vldr	s15, [r3]
 8000f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	edc3 7a01 	vstr	s15, [r3, #4]
	for( int i = 0; i < 2; i++) {
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	dd82      	ble.n	8000eaa <Read_ads1115+0x12>
			//ADS1115_BOARD_SELECT->ADS1115_CH2.data = ((reading * currentConv) + 4);
			//ADS1115_BOARD_SELECT->ADS1115_CH2.data = result;
		}
	}

}
 8000fa4:	bf00      	nop
 8000fa6:	bf00      	nop
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20004140 	.word	0x20004140
 8000fb4:	200040bc 	.word	0x200040bc
 8000fb8:	2000411c 	.word	0x2000411c
 8000fbc:	20004150 	.word	0x20004150
 8000fc0:	080091b0 	.word	0x080091b0

08000fc4 <Convert2Modbus>:

int Convert2Modbus(float Data)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	ed87 0a01 	vstr	s0, [r7, #4]
	int ConvertData = 0;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]

	ConvertData = ((Data+5)*65535)/10;
 8000fd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fd6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8000fda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fde:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001008 <Convert2Modbus+0x44>
 8000fe2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000fe6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000fea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ff2:	ee17 3a90 	vmov	r3, s15
 8000ff6:	60fb      	str	r3, [r7, #12]

	return ConvertData;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	477fff00 	.word	0x477fff00

0800100c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4a07      	ldr	r2, [pc, #28]	; (8001038 <vApplicationGetIdleTaskMemory+0x2c>)
 800101c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	4a06      	ldr	r2, [pc, #24]	; (800103c <vApplicationGetIdleTaskMemory+0x30>)
 8001022:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2280      	movs	r2, #128	; 0x80
 8001028:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800102a:	bf00      	nop
 800102c:	3714      	adds	r7, #20
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	20000098 	.word	0x20000098
 800103c:	200000ec 	.word	0x200000ec

08001040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b096      	sub	sp, #88	; 0x58
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001046:	f001 f81b 	bl	8002080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800104a:	f000 f911 	bl	8001270 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800104e:	f000 f9f1 	bl	8001434 <MX_GPIO_Init>
  MX_DMA_Init();
 8001052:	f000 f9cf 	bl	80013f4 <MX_DMA_Init>
  MX_USART6_UART_Init();
 8001056:	f000 f9a3 	bl	80013a0 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 800105a:	f000 f973 	bl	8001344 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  delay_init(10);
 800105e:	200a      	movs	r0, #10
 8001060:	f7ff febe 	bl	8000de0 <delay_init>


  //TODO: read DIP switch
  SwitchValue[0] = HAL_GPIO_ReadPin(GPIOE, Switch1_Pin);
 8001064:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001068:	4875      	ldr	r0, [pc, #468]	; (8001240 <main+0x200>)
 800106a:	f001 feef 	bl	8002e4c <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b74      	ldr	r3, [pc, #464]	; (8001244 <main+0x204>)
 8001074:	701a      	strb	r2, [r3, #0]
  SwitchValue[1] = HAL_GPIO_ReadPin(GPIOE, Switch2_Pin);
 8001076:	f44f 7100 	mov.w	r1, #512	; 0x200
 800107a:	4871      	ldr	r0, [pc, #452]	; (8001240 <main+0x200>)
 800107c:	f001 fee6 	bl	8002e4c <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	461a      	mov	r2, r3
 8001084:	4b6f      	ldr	r3, [pc, #444]	; (8001244 <main+0x204>)
 8001086:	705a      	strb	r2, [r3, #1]
  SwitchValue[2] = HAL_GPIO_ReadPin(GPIOE, Switch3_Pin);
 8001088:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800108c:	486c      	ldr	r0, [pc, #432]	; (8001240 <main+0x200>)
 800108e:	f001 fedd 	bl	8002e4c <HAL_GPIO_ReadPin>
 8001092:	4603      	mov	r3, r0
 8001094:	461a      	mov	r2, r3
 8001096:	4b6b      	ldr	r3, [pc, #428]	; (8001244 <main+0x204>)
 8001098:	709a      	strb	r2, [r3, #2]
  SwitchValue[3] = HAL_GPIO_ReadPin(GPIOE, Switch4_Pin);
 800109a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800109e:	4868      	ldr	r0, [pc, #416]	; (8001240 <main+0x200>)
 80010a0:	f001 fed4 	bl	8002e4c <HAL_GPIO_ReadPin>
 80010a4:	4603      	mov	r3, r0
 80010a6:	461a      	mov	r2, r3
 80010a8:	4b66      	ldr	r3, [pc, #408]	; (8001244 <main+0x204>)
 80010aa:	70da      	strb	r2, [r3, #3]
  SwitchValue[4] = HAL_GPIO_ReadPin(GPIOE, Switch5_Pin);
 80010ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010b0:	4863      	ldr	r0, [pc, #396]	; (8001240 <main+0x200>)
 80010b2:	f001 fecb 	bl	8002e4c <HAL_GPIO_ReadPin>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b62      	ldr	r3, [pc, #392]	; (8001244 <main+0x204>)
 80010bc:	711a      	strb	r2, [r3, #4]
  SwitchValue[5] = HAL_GPIO_ReadPin(GPIOE, Switch6_Pin);
 80010be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010c2:	485f      	ldr	r0, [pc, #380]	; (8001240 <main+0x200>)
 80010c4:	f001 fec2 	bl	8002e4c <HAL_GPIO_ReadPin>
 80010c8:	4603      	mov	r3, r0
 80010ca:	461a      	mov	r2, r3
 80010cc:	4b5d      	ldr	r3, [pc, #372]	; (8001244 <main+0x204>)
 80010ce:	715a      	strb	r2, [r3, #5]
  SwitchValue[6] = HAL_GPIO_ReadPin(GPIOE, Switch7_Pin);
 80010d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010d4:	485a      	ldr	r0, [pc, #360]	; (8001240 <main+0x200>)
 80010d6:	f001 feb9 	bl	8002e4c <HAL_GPIO_ReadPin>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	4b59      	ldr	r3, [pc, #356]	; (8001244 <main+0x204>)
 80010e0:	719a      	strb	r2, [r3, #6]
  SwitchValue[7] = HAL_GPIO_ReadPin(GPIOE, Switch8_Pin);
 80010e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010e6:	4856      	ldr	r0, [pc, #344]	; (8001240 <main+0x200>)
 80010e8:	f001 feb0 	bl	8002e4c <HAL_GPIO_ReadPin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b54      	ldr	r3, [pc, #336]	; (8001244 <main+0x204>)
 80010f2:	71da      	strb	r2, [r3, #7]


  //TODO: converter DIP switch to modbus slave using binary
  for(uint8_t i = 0; i <8; i++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80010fa:	e039      	b.n	8001170 <main+0x130>
  {
	  slaveID += SwitchValue[i] * pow(2,i);
 80010fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001100:	4a50      	ldr	r2, [pc, #320]	; (8001244 <main+0x204>)
 8001102:	5cd3      	ldrb	r3, [r2, r3]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff f9b5 	bl	8000474 <__aeabi_i2d>
 800110a:	4604      	mov	r4, r0
 800110c:	460d      	mov	r5, r1
 800110e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff f99e 	bl	8000454 <__aeabi_ui2d>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	ec43 2b11 	vmov	d1, r2, r3
 8001120:	ed9f 0b45 	vldr	d0, [pc, #276]	; 8001238 <main+0x1f8>
 8001124:	f007 f822 	bl	800816c <pow>
 8001128:	ec53 2b10 	vmov	r2, r3, d0
 800112c:	4620      	mov	r0, r4
 800112e:	4629      	mov	r1, r5
 8001130:	f7ff fa0a 	bl	8000548 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4614      	mov	r4, r2
 800113a:	461d      	mov	r5, r3
 800113c:	4b42      	ldr	r3, [pc, #264]	; (8001248 <main+0x208>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff f997 	bl	8000474 <__aeabi_i2d>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4620      	mov	r0, r4
 800114c:	4629      	mov	r1, r5
 800114e:	f7ff f845 	bl	80001dc <__adddf3>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fca5 	bl	8000aa8 <__aeabi_d2uiz>
 800115e:	4603      	mov	r3, r0
 8001160:	b2da      	uxtb	r2, r3
 8001162:	4b39      	ldr	r3, [pc, #228]	; (8001248 <main+0x208>)
 8001164:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i <8; i++)
 8001166:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800116a:	3301      	adds	r3, #1
 800116c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8001170:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001174:	2b07      	cmp	r3, #7
 8001176:	d9c1      	bls.n	80010fc <main+0xbc>
  }

  delay_ms(1);
 8001178:	2001      	movs	r0, #1
 800117a:	f7ff fe59 	bl	8000e30 <delay_ms>

 //ADCstatus =  HAL_ADC_Stop_DMA(&hadc1);

  //HAL_UART_Receive_DMA(&huart6, rxbuffer, 8);
  __HAL_UART_ENABLE_IT(&huart6, UART_IT_IDLE);
 800117e:	4b33      	ldr	r3, [pc, #204]	; (800124c <main+0x20c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	68da      	ldr	r2, [r3, #12]
 8001184:	4b31      	ldr	r3, [pc, #196]	; (800124c <main+0x20c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f042 0210 	orr.w	r2, r2, #16
 800118c:	60da      	str	r2, [r3, #12]
  //set DMA receive, transmit 255 word every time.
  HAL_UART_Receive_DMA(&huart6, (uint8_t*)rxbuffer, 255);
 800118e:	22ff      	movs	r2, #255	; 0xff
 8001190:	492f      	ldr	r1, [pc, #188]	; (8001250 <main+0x210>)
 8001192:	482e      	ldr	r0, [pc, #184]	; (800124c <main+0x20c>)
 8001194:	f003 fd9c 	bl	8004cd0 <HAL_UART_Receive_DMA>

  ADS1115_ADDRES[0] = ADS1115_ADDRESS_ADDR_GND;
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <main+0x214>)
 800119a:	2248      	movs	r2, #72	; 0x48
 800119c:	701a      	strb	r2, [r3, #0]
  ADS1115_ADDRES[1] = ADS1115_ADDRESS_ADDR_VDD;
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <main+0x214>)
 80011a0:	2249      	movs	r2, #73	; 0x49
 80011a2:	705a      	strb	r2, [r3, #1]
  ADS1115_ADDRES[2] = ADS1115_ADDRESS_ADDR_SDA;
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <main+0x214>)
 80011a6:	224a      	movs	r2, #74	; 0x4a
 80011a8:	709a      	strb	r2, [r3, #2]
  ADS1115_ADDRES[3] = ADS1115_ADDRESS_ADDR_SCL;
 80011aa:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <main+0x214>)
 80011ac:	224b      	movs	r2, #75	; 0x4b
 80011ae:	70da      	strb	r2, [r3, #3]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ModbusTransTask */
  osThreadDef(ModbusTransTask, ModbusTransThread, osPriorityAboveNormal, 0, 128);
 80011b0:	4b29      	ldr	r3, [pc, #164]	; (8001258 <main+0x218>)
 80011b2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80011b6:	461d      	mov	r5, r3
 80011b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusTransTaskHandle = osThreadCreate(osThread(ModbusTransTask), NULL);
 80011c4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011c8:	2100      	movs	r1, #0
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 fd5f 	bl	8005c8e <osThreadCreate>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4a22      	ldr	r2, [pc, #136]	; (800125c <main+0x21c>)
 80011d4:	6013      	str	r3, [r2, #0]

  /* definition and creation of ModbusSetTask */
  osThreadDef(ModbusSetTask, ModbusSetThread, osPriorityAboveNormal, 0, 128);
 80011d6:	4b22      	ldr	r3, [pc, #136]	; (8001260 <main+0x220>)
 80011d8:	f107 041c 	add.w	r4, r7, #28
 80011dc:	461d      	mov	r5, r3
 80011de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModbusSetTaskHandle = osThreadCreate(osThread(ModbusSetTask), NULL);
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f004 fd4c 	bl	8005c8e <osThreadCreate>
 80011f6:	4603      	mov	r3, r0
 80011f8:	4a1a      	ldr	r2, [pc, #104]	; (8001264 <main+0x224>)
 80011fa:	6013      	str	r3, [r2, #0]

  /* definition and creation of ADS1115Task */
  osThreadDef(ADS1115Task, ADS1115Thread, osPriorityNormal, 0, 128);
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <main+0x228>)
 80011fe:	463c      	mov	r4, r7
 8001200:	461d      	mov	r5, r3
 8001202:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001204:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001206:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800120a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADS1115TaskHandle = osThreadCreate(osThread(ADS1115Task), NULL);
 800120e:	463b      	mov	r3, r7
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f004 fd3b 	bl	8005c8e <osThreadCreate>
 8001218:	4603      	mov	r3, r0
 800121a:	4a14      	ldr	r2, [pc, #80]	; (800126c <main+0x22c>)
 800121c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  ModBus_Init();
 800121e:	f000 fb1f 	bl	8001860 <ModBus_Init>
  ModBus_SetAddress(slaveID);
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <main+0x208>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	4618      	mov	r0, r3
 8001228:	f000 fb7a 	bl	8001920 <ModBus_SetAddress>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800122c:	f004 fd28 	bl	8005c80 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001230:	e7fe      	b.n	8001230 <main+0x1f0>
 8001232:	bf00      	nop
 8001234:	f3af 8000 	nop.w
 8001238:	00000000 	.word	0x00000000
 800123c:	40000000 	.word	0x40000000
 8001240:	40021000 	.word	0x40021000
 8001244:	20004198 	.word	0x20004198
 8001248:	200002ec 	.word	0x200002ec
 800124c:	20004154 	.word	0x20004154
 8001250:	200041a0 	.word	0x200041a0
 8001254:	20004118 	.word	0x20004118
 8001258:	0800911c 	.word	0x0800911c
 800125c:	20004110 	.word	0x20004110
 8001260:	08009138 	.word	0x08009138
 8001264:	20004114 	.word	0x20004114
 8001268:	08009154 	.word	0x08009154
 800126c:	20004194 	.word	0x20004194

08001270 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b094      	sub	sp, #80	; 0x50
 8001274:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	2230      	movs	r2, #48	; 0x30
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f006 ff6c 	bl	800815c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001284:	f107 030c 	add.w	r3, r7, #12
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <SystemClock_Config+0xcc>)
 800129a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129c:	4a27      	ldr	r2, [pc, #156]	; (800133c <SystemClock_Config+0xcc>)
 800129e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012a2:	6413      	str	r3, [r2, #64]	; 0x40
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <SystemClock_Config+0xcc>)
 80012a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b0:	2300      	movs	r3, #0
 80012b2:	607b      	str	r3, [r7, #4]
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <SystemClock_Config+0xd0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a21      	ldr	r2, [pc, #132]	; (8001340 <SystemClock_Config+0xd0>)
 80012ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012be:	6013      	str	r3, [r2, #0]
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <SystemClock_Config+0xd0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012cc:	2302      	movs	r3, #2
 80012ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d0:	2301      	movs	r3, #1
 80012d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d4:	2310      	movs	r3, #16
 80012d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d8:	2302      	movs	r3, #2
 80012da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012dc:	2300      	movs	r3, #0
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012e0:	2308      	movs	r3, #8
 80012e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012e4:	23a8      	movs	r3, #168	; 0xa8
 80012e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012e8:	2302      	movs	r3, #2
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012ec:	2304      	movs	r3, #4
 80012ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	f107 0320 	add.w	r3, r7, #32
 80012f4:	4618      	mov	r0, r3
 80012f6:	f002 fd55 	bl	8003da4 <HAL_RCC_OscConfig>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001300:	f000 fa6e 	bl	80017e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001304:	230f      	movs	r3, #15
 8001306:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001308:	2302      	movs	r3, #2
 800130a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001310:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001314:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800131c:	f107 030c 	add.w	r3, r7, #12
 8001320:	2105      	movs	r1, #5
 8001322:	4618      	mov	r0, r3
 8001324:	f002 ffae 	bl	8004284 <HAL_RCC_ClockConfig>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800132e:	f000 fa57 	bl	80017e0 <Error_Handler>
  }
}
 8001332:	bf00      	nop
 8001334:	3750      	adds	r7, #80	; 0x50
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800
 8001340:	40007000 	.word	0x40007000

08001344 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_I2C1_Init+0x50>)
 800134a:	4a13      	ldr	r2, [pc, #76]	; (8001398 <MX_I2C1_Init+0x54>)
 800134c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_I2C1_Init+0x50>)
 8001350:	4a12      	ldr	r2, [pc, #72]	; (800139c <MX_I2C1_Init+0x58>)
 8001352:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001354:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_I2C1_Init+0x50>)
 8001356:	2200      	movs	r2, #0
 8001358:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_I2C1_Init+0x50>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_I2C1_Init+0x50>)
 8001362:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001366:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <MX_I2C1_Init+0x50>)
 800136a:	2200      	movs	r2, #0
 800136c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800136e:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_I2C1_Init+0x50>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001374:	4b07      	ldr	r3, [pc, #28]	; (8001394 <MX_I2C1_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800137a:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_I2C1_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001380:	4804      	ldr	r0, [pc, #16]	; (8001394 <MX_I2C1_Init+0x50>)
 8001382:	f001 fd7b 	bl	8002e7c <HAL_I2C_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800138c:	f000 fa28 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001390:	bf00      	nop
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200040bc 	.word	0x200040bc
 8001398:	40005400 	.word	0x40005400
 800139c:	000186a0 	.word	0x000186a0

080013a0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <MX_USART6_UART_Init+0x50>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80013aa:	4b10      	ldr	r3, [pc, #64]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b09      	ldr	r3, [pc, #36]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_USART6_UART_Init+0x4c>)
 80013d8:	f003 fb94 	bl	8004b04 <HAL_UART_Init>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80013e2:	f000 f9fd 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20004154 	.word	0x20004154
 80013f0:	40011400 	.word	0x40011400

080013f4 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_DMA_Init+0x3c>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	4a0b      	ldr	r2, [pc, #44]	; (8001430 <MX_DMA_Init+0x3c>)
 8001404:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001408:	6313      	str	r3, [r2, #48]	; 0x30
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_DMA_Init+0x3c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2105      	movs	r1, #5
 800141a:	2039      	movs	r0, #57	; 0x39
 800141c:	f000 ff4e 	bl	80022bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001420:	2039      	movs	r0, #57	; 0x39
 8001422:	f000 ff67 	bl	80022f4 <HAL_NVIC_EnableIRQ>

}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800

08001434 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <MX_GPIO_Init+0x8c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <MX_GPIO_Init+0x8c>)
 8001454:	f043 0310 	orr.w	r3, r3, #16
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b19      	ldr	r3, [pc, #100]	; (80014c0 <MX_GPIO_Init+0x8c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	60bb      	str	r3, [r7, #8]
 8001464:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
 800146a:	4b15      	ldr	r3, [pc, #84]	; (80014c0 <MX_GPIO_Init+0x8c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a14      	ldr	r2, [pc, #80]	; (80014c0 <MX_GPIO_Init+0x8c>)
 8001470:	f043 0304 	orr.w	r3, r3, #4
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b12      	ldr	r3, [pc, #72]	; (80014c0 <MX_GPIO_Init+0x8c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0304 	and.w	r3, r3, #4
 800147e:	607b      	str	r3, [r7, #4]
 8001480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	603b      	str	r3, [r7, #0]
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_GPIO_Init+0x8c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a0d      	ldr	r2, [pc, #52]	; (80014c0 <MX_GPIO_Init+0x8c>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_GPIO_Init+0x8c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : Switch1_Pin Switch2_Pin Switch3_Pin Switch4_Pin 
                           Switch5_Pin Switch6_Pin Switch7_Pin Switch8_Pin */
  GPIO_InitStruct.Pin = Switch1_Pin|Switch2_Pin|Switch3_Pin|Switch4_Pin 
 800149e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80014a2:	60fb      	str	r3, [r7, #12]
                          |Switch5_Pin|Switch6_Pin|Switch7_Pin|Switch8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4619      	mov	r1, r3
 80014b2:	4804      	ldr	r0, [pc, #16]	; (80014c4 <MX_GPIO_Init+0x90>)
 80014b4:	f001 fb2e 	bl	8002b14 <HAL_GPIO_Init>

}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40021000 	.word	0x40021000

080014c8 <USER_UART_IRQHandler>:

/* USER CODE BEGIN 4 */
void USER_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART6)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <USER_UART_IRQHandler+0x44>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d114      	bne.n	8001504 <USER_UART_IRQHandler+0x3c>
    {
        if(RESET != __HAL_UART_GET_FLAG(&huart6, UART_FLAG_IDLE))   //Idle interrupt case.
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <USER_UART_IRQHandler+0x48>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0310 	and.w	r3, r3, #16
 80014e4:	2b10      	cmp	r3, #16
 80014e6:	d10d      	bne.n	8001504 <USER_UART_IRQHandler+0x3c>
        {
            __HAL_UART_CLEAR_IDLEFLAG(&huart6);                     //clear idle flag, or process will trigger idle interrupt process.
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <USER_UART_IRQHandler+0x48>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <USER_UART_IRQHandler+0x48>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
            //printf("\r\nUART6 Idle IQR Detected\r\n");
            USAR_UART_IDLECallback(huart);                          //Idle interrupt callback
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f808 	bl	8001514 <USAR_UART_IDLECallback>
        }
    }
}
 8001504:	bf00      	nop
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40011400 	.word	0x40011400
 8001510:	20004154 	.word	0x20004154

08001514 <USAR_UART_IDLECallback>:

void USAR_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
	//STOP DMA
    HAL_UART_DMAStop(&huart6);
 800151c:	481c      	ldr	r0, [pc, #112]	; (8001590 <USAR_UART_IDLECallback+0x7c>)
 800151e:	f003 fc57 	bl	8004dd0 <HAL_UART_DMAStop>

    uint8_t data_length  = 255 - __HAL_DMA_GET_COUNTER(&hdma_usart6_rx);   //计算接收到的数据长度
 8001522:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <USAR_UART_IDLECallback+0x80>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	72fb      	strb	r3, [r7, #11]

    if (rxbuffer[0]==slaveID)
 800152e:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <USAR_UART_IDLECallback+0x84>)
 8001530:	781a      	ldrb	r2, [r3, #0]
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <USAR_UART_IDLECallback+0x88>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	429a      	cmp	r2, r3
 8001538:	d115      	bne.n	8001566 <USAR_UART_IDLECallback+0x52>
	{
		// if slaveID match, put rxbuffer to ModBusInHandle
		for(int i=0;i<data_length;i++)
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	e00d      	b.n	800155c <USAR_UART_IDLECallback+0x48>
			osMessagePut(ModBusInHandle,rxbuffer[i], data_length);
 8001540:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <USAR_UART_IDLECallback+0x8c>)
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	4a14      	ldr	r2, [pc, #80]	; (8001598 <USAR_UART_IDLECallback+0x84>)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4413      	add	r3, r2
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4619      	mov	r1, r3
 800154e:	7afb      	ldrb	r3, [r7, #11]
 8001550:	461a      	mov	r2, r3
 8001552:	f004 fc25 	bl	8005da0 <osMessagePut>
		for(int i=0;i<data_length;i++)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3301      	adds	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	7afb      	ldrb	r3, [r7, #11]
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	429a      	cmp	r2, r3
 8001562:	dbed      	blt.n	8001540 <USAR_UART_IDLECallback+0x2c>
 8001564:	e00a      	b.n	800157c <USAR_UART_IDLECallback+0x68>
	}else{
		// if uart RX_ID no match slaveID(switch on board), reset rxbuffer
		memset(rxbuffer,0,data_length);
 8001566:	7afb      	ldrb	r3, [r7, #11]
 8001568:	461a      	mov	r2, r3
 800156a:	2100      	movs	r1, #0
 800156c:	480a      	ldr	r0, [pc, #40]	; (8001598 <USAR_UART_IDLECallback+0x84>)
 800156e:	f006 fdf5 	bl	800815c <memset>
		data_length = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	72fb      	strb	r3, [r7, #11]
		HAL_Delay(10);
 8001576:	200a      	movs	r0, #10
 8001578:	f000 fdc4 	bl	8002104 <HAL_Delay>
	}

    //restart DMA and transmit 255 word per times.
    HAL_UART_Receive_DMA(&huart6, (uint8_t*)rxbuffer, 255);
 800157c:	22ff      	movs	r2, #255	; 0xff
 800157e:	4906      	ldr	r1, [pc, #24]	; (8001598 <USAR_UART_IDLECallback+0x84>)
 8001580:	4803      	ldr	r0, [pc, #12]	; (8001590 <USAR_UART_IDLECallback+0x7c>)
 8001582:	f003 fba5 	bl	8004cd0 <HAL_UART_Receive_DMA>
}
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20004154 	.word	0x20004154
 8001594:	2000405c 	.word	0x2000405c
 8001598:	200041a0 	.word	0x200041a0
 800159c:	200002ec 	.word	0x200002ec
 80015a0:	20004474 	.word	0x20004474

080015a4 <ModbusTransThread>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_ModbusTransThread */
void ModbusTransThread(void const * argument)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b0c6      	sub	sp, #280	; 0x118
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	1d3b      	adds	r3, r7, #4
 80015ac:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	  uint8_t buf[256]; // buffer, where we collect output data
	  uint8_t c = 0; // counter for buffer fill
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	  uint8_t count = 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  /* Infinite loop */
  for(;;)
  {
	 // ModBus_SetRegister(0,5+1);

    osEvent evt = osMessageGet(ModBusOutHandle, 20); // wait here 200 tick
 80015ba:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <ModbusTransThread+0x8c>)
 80015bc:	6819      	ldr	r1, [r3, #0]
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	2214      	movs	r2, #20
 80015c4:	4618      	mov	r0, r3
 80015c6:	f004 fc2b 	bl	8005e20 <osMessageGet>
    if (evt.status == osEventMessage)
 80015ca:	f107 0308 	add.w	r3, r7, #8
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b10      	cmp	r3, #16
 80015d2:	d10c      	bne.n	80015ee <ModbusTransThread+0x4a>
    {
        buf[c++]=(uint8_t) evt.value.v;
 80015d4:	f107 0308 	add.w	r3, r7, #8
 80015d8:	6859      	ldr	r1, [r3, #4]
 80015da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80015de:	1c5a      	adds	r2, r3, #1
 80015e0:	f887 2117 	strb.w	r2, [r7, #279]	; 0x117
 80015e4:	461a      	mov	r2, r3
 80015e6:	b2c9      	uxtb	r1, r1
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	5499      	strb	r1, [r3, r2]
    }
    if (evt.status == osEventTimeout)
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b40      	cmp	r3, #64	; 0x40
 80015f6:	d116      	bne.n	8001626 <ModbusTransThread+0x82>
    {
        if( (c > 0) && (c < 254) ) // ok, something in buffer exist, lets send it
 80015f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00f      	beq.n	8001620 <ModbusTransThread+0x7c>
 8001600:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001604:	2bfd      	cmp	r3, #253	; 0xfd
 8001606:	d80b      	bhi.n	8001620 <ModbusTransThread+0x7c>
        {
        	HAL_StatusTypeDef AA = HAL_UART_Transmit(&huart6, buf, c, 50); // by USB-CDC
 8001608:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800160c:	b29a      	uxth	r2, r3
 800160e:	f107 0114 	add.w	r1, r7, #20
 8001612:	2332      	movs	r3, #50	; 0x32
 8001614:	4807      	ldr	r0, [pc, #28]	; (8001634 <ModbusTransThread+0x90>)
 8001616:	f003 fac2 	bl	8004b9e <HAL_UART_Transmit>
 800161a:	4603      	mov	r3, r0
 800161c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
        }
        c=0;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    }

    osDelay(1);
 8001626:	2001      	movs	r0, #1
 8001628:	f004 fb7d 	bl	8005d26 <osDelay>
  {
 800162c:	e7c5      	b.n	80015ba <ModbusTransThread+0x16>
 800162e:	bf00      	nop
 8001630:	2000446c 	.word	0x2000446c
 8001634:	20004154 	.word	0x20004154

08001638 <ModbusSetThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ModbusSetThread */
void ModbusSetThread(void const * argument)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ModbusSetThread */
  /* Infinite loop */
  for(;;)
  {
	ModBus_SetRegister(0,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_GND_BOARD.ADS1115_CH1.data));
 8001640:	4b35      	ldr	r3, [pc, #212]	; (8001718 <ModbusSetThread+0xe0>)
 8001642:	edd3 7a00 	vldr	s15, [r3]
 8001646:	eeb0 0a67 	vmov.f32	s0, s15
 800164a:	f7ff fcbb 	bl	8000fc4 <Convert2Modbus>
 800164e:	4603      	mov	r3, r0
 8001650:	b29b      	uxth	r3, r3
 8001652:	4619      	mov	r1, r3
 8001654:	2000      	movs	r0, #0
 8001656:	f000 fa6f 	bl	8001b38 <ModBus_SetRegister>
	ModBus_SetRegister(1,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_GND_BOARD.ADS1115_CH2.data));
 800165a:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <ModbusSetThread+0xe0>)
 800165c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001660:	eeb0 0a67 	vmov.f32	s0, s15
 8001664:	f7ff fcae 	bl	8000fc4 <Convert2Modbus>
 8001668:	4603      	mov	r3, r0
 800166a:	b29b      	uxth	r3, r3
 800166c:	4619      	mov	r1, r3
 800166e:	2001      	movs	r0, #1
 8001670:	f000 fa62 	bl	8001b38 <ModBus_SetRegister>
	ModBus_SetRegister(2,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_VDD_BOARD.ADS1115_CH1.data));
 8001674:	4b29      	ldr	r3, [pc, #164]	; (800171c <ModbusSetThread+0xe4>)
 8001676:	edd3 7a00 	vldr	s15, [r3]
 800167a:	eeb0 0a67 	vmov.f32	s0, s15
 800167e:	f7ff fca1 	bl	8000fc4 <Convert2Modbus>
 8001682:	4603      	mov	r3, r0
 8001684:	b29b      	uxth	r3, r3
 8001686:	4619      	mov	r1, r3
 8001688:	2002      	movs	r0, #2
 800168a:	f000 fa55 	bl	8001b38 <ModBus_SetRegister>
	ModBus_SetRegister(3,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_VDD_BOARD.ADS1115_CH2.data));
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <ModbusSetThread+0xe4>)
 8001690:	edd3 7a01 	vldr	s15, [r3, #4]
 8001694:	eeb0 0a67 	vmov.f32	s0, s15
 8001698:	f7ff fc94 	bl	8000fc4 <Convert2Modbus>
 800169c:	4603      	mov	r3, r0
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4619      	mov	r1, r3
 80016a2:	2003      	movs	r0, #3
 80016a4:	f000 fa48 	bl	8001b38 <ModBus_SetRegister>
	ModBus_SetRegister(4,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_SDA_BOARD.ADS1115_CH1.data));
 80016a8:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <ModbusSetThread+0xe8>)
 80016aa:	edd3 7a00 	vldr	s15, [r3]
 80016ae:	eeb0 0a67 	vmov.f32	s0, s15
 80016b2:	f7ff fc87 	bl	8000fc4 <Convert2Modbus>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	4619      	mov	r1, r3
 80016bc:	2004      	movs	r0, #4
 80016be:	f000 fa3b 	bl	8001b38 <ModBus_SetRegister>
	ModBus_SetRegister(5,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_SDA_BOARD.ADS1115_CH2.data));
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <ModbusSetThread+0xe8>)
 80016c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80016c8:	eeb0 0a67 	vmov.f32	s0, s15
 80016cc:	f7ff fc7a 	bl	8000fc4 <Convert2Modbus>
 80016d0:	4603      	mov	r3, r0
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4619      	mov	r1, r3
 80016d6:	2005      	movs	r0, #5
 80016d8:	f000 fa2e 	bl	8001b38 <ModBus_SetRegister>
	ModBus_SetRegister(6,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_SCL_BOARD.ADS1115_CH1.data));
 80016dc:	4b11      	ldr	r3, [pc, #68]	; (8001724 <ModbusSetThread+0xec>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	eeb0 0a67 	vmov.f32	s0, s15
 80016e6:	f7ff fc6d 	bl	8000fc4 <Convert2Modbus>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4619      	mov	r1, r3
 80016f0:	2006      	movs	r0, #6
 80016f2:	f000 fa21 	bl	8001b38 <ModBus_SetRegister>
	ModBus_SetRegister(7,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_SCL_BOARD.ADS1115_CH2.data));
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <ModbusSetThread+0xec>)
 80016f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80016fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001700:	f7ff fc60 	bl	8000fc4 <Convert2Modbus>
 8001704:	4603      	mov	r3, r0
 8001706:	b29b      	uxth	r3, r3
 8001708:	4619      	mov	r1, r3
 800170a:	2007      	movs	r0, #7
 800170c:	f000 fa14 	bl	8001b38 <ModBus_SetRegister>

    osDelay(1);
 8001710:	2001      	movs	r0, #1
 8001712:	f004 fb08 	bl	8005d26 <osDelay>
	ModBus_SetRegister(0,(int)Convert2Modbus(ADS1115_ADDRESS_ADDR_GND_BOARD.ADS1115_CH1.data));
 8001716:	e793      	b.n	8001640 <ModbusSetThread+0x8>
 8001718:	2000404c 	.word	0x2000404c
 800171c:	20004054 	.word	0x20004054
 8001720:	20004044 	.word	0x20004044
 8001724:	2000403c 	.word	0x2000403c

08001728 <ADS1115Thread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ADS1115Thread */
void ADS1115Thread(void const * argument)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADS1115Thread */
  /* Infinite loop */
  for(;;)
  {

	  uint8_t ADS1115_ADDRESS_ADDR = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	72fb      	strb	r3, [r7, #11]
	  for( int j = ADS1115_ADDRESS_ADDR_GND; j <= ADS1115_ADDRESS_ADDR_SCL; j++) {
 8001734:	2348      	movs	r3, #72	; 0x48
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e031      	b.n	800179e <ADS1115Thread+0x76>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	3b48      	subs	r3, #72	; 0x48
 800173e:	2b03      	cmp	r3, #3
 8001740:	d82a      	bhi.n	8001798 <ADS1115Thread+0x70>
 8001742:	a201      	add	r2, pc, #4	; (adr r2, 8001748 <ADS1115Thread+0x20>)
 8001744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001748:	08001759 	.word	0x08001759
 800174c:	08001769 	.word	0x08001769
 8001750:	08001779 	.word	0x08001779
 8001754:	08001789 	.word	0x08001789
		  	  switch(j)
			  {
				  case(ADS1115_ADDRESS_ADDR_GND):
					ADS1115_ADDRESS_ADDR = ADS1115_ADDRESS_ADDR_GND; // 10000001 CH0+ CH1
 8001758:	2348      	movs	r3, #72	; 0x48
 800175a:	72fb      	strb	r3, [r7, #11]
					Read_ads1115(&ADS1115_ADDRESS_ADDR_GND_BOARD, ADS1115_ADDRESS_ADDR);
 800175c:	7afb      	ldrb	r3, [r7, #11]
 800175e:	4619      	mov	r1, r3
 8001760:	4812      	ldr	r0, [pc, #72]	; (80017ac <ADS1115Thread+0x84>)
 8001762:	f7ff fb99 	bl	8000e98 <Read_ads1115>
					break;
 8001766:	e017      	b.n	8001798 <ADS1115Thread+0x70>
				  case(ADS1115_ADDRESS_ADDR_VDD):
					ADS1115_ADDRESS_ADDR = ADS1115_ADDRESS_ADDR_VDD; // 10000001 CH1+ CH2
 8001768:	2349      	movs	r3, #73	; 0x49
 800176a:	72fb      	strb	r3, [r7, #11]
					Read_ads1115(&ADS1115_ADDRESS_ADDR_VDD_BOARD, ADS1115_ADDRESS_ADDR);
 800176c:	7afb      	ldrb	r3, [r7, #11]
 800176e:	4619      	mov	r1, r3
 8001770:	480f      	ldr	r0, [pc, #60]	; (80017b0 <ADS1115Thread+0x88>)
 8001772:	f7ff fb91 	bl	8000e98 <Read_ads1115>
					break;
 8001776:	e00f      	b.n	8001798 <ADS1115Thread+0x70>
				  case(ADS1115_ADDRESS_ADDR_SDA):
					ADS1115_ADDRESS_ADDR = ADS1115_ADDRESS_ADDR_SDA; // 10000001 CH3+ CH4
 8001778:	234a      	movs	r3, #74	; 0x4a
 800177a:	72fb      	strb	r3, [r7, #11]
					Read_ads1115(&ADS1115_ADDRESS_ADDR_SDA_BOARD, ADS1115_ADDRESS_ADDR);
 800177c:	7afb      	ldrb	r3, [r7, #11]
 800177e:	4619      	mov	r1, r3
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <ADS1115Thread+0x8c>)
 8001782:	f7ff fb89 	bl	8000e98 <Read_ads1115>
					break;
 8001786:	e007      	b.n	8001798 <ADS1115Thread+0x70>
				  case(ADS1115_ADDRESS_ADDR_SCL):
					ADS1115_ADDRESS_ADDR = ADS1115_ADDRESS_ADDR_SCL; // 10000001 CH5+ CH6
 8001788:	234b      	movs	r3, #75	; 0x4b
 800178a:	72fb      	strb	r3, [r7, #11]
					Read_ads1115(&ADS1115_ADDRESS_ADDR_SCL_BOARD, ADS1115_ADDRESS_ADDR);
 800178c:	7afb      	ldrb	r3, [r7, #11]
 800178e:	4619      	mov	r1, r3
 8001790:	4809      	ldr	r0, [pc, #36]	; (80017b8 <ADS1115Thread+0x90>)
 8001792:	f7ff fb81 	bl	8000e98 <Read_ads1115>
					break;
 8001796:	bf00      	nop
	  for( int j = ADS1115_ADDRESS_ADDR_GND; j <= ADS1115_ADDRESS_ADDR_SCL; j++) {
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	3301      	adds	r3, #1
 800179c:	60fb      	str	r3, [r7, #12]
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2b4b      	cmp	r3, #75	; 0x4b
 80017a2:	ddca      	ble.n	800173a <ADS1115Thread+0x12>
		  }
	  }
	  osDelay(1);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f004 fabe 	bl	8005d26 <osDelay>
  {
 80017aa:	e7c1      	b.n	8001730 <ADS1115Thread+0x8>
 80017ac:	2000404c 	.word	0x2000404c
 80017b0:	20004054 	.word	0x20004054
 80017b4:	20004044 	.word	0x20004044
 80017b8:	2000403c 	.word	0x2000403c

080017bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a04      	ldr	r2, [pc, #16]	; (80017dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d101      	bne.n	80017d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017ce:	f000 fc79 	bl	80020c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017d2:	bf00      	nop
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40000400 	.word	0x40000400

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <ModBusTask>:
uint8_t mb_buf_out_count;

void ModBusParse(void);

void ModBusTask(void const * argument)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osEvent evt = osMessageGet(ModBusInHandle, ModBus35);
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <ModBusTask+0x64>)
 80017fa:	6819      	ldr	r1, [r3, #0]
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	220a      	movs	r2, #10
 8001802:	4618      	mov	r0, r3
 8001804:	f004 fb0c 	bl	8005e20 <osMessageGet>
    // Frame end?
    if (evt.status == osEventTimeout)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b40      	cmp	r3, #64	; 0x40
 800180c:	d108      	bne.n	8001820 <ModBusTask+0x30>
    {
        if(mb_buf_in_count > 0) // ok, something in buffer exist, lets parse it
 800180e:	4b12      	ldr	r3, [pc, #72]	; (8001858 <ModBusTask+0x68>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <ModBusTask+0x2a>
        {
          ModBusParse();
 8001816:	f000 f893 	bl	8001940 <ModBusParse>
        }  
        mb_buf_in_count=0;
 800181a:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <ModBusTask+0x68>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
    }
    // Wow, something come!
    if (evt.status == osEventMessage)
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b10      	cmp	r3, #16
 8001824:	d1e8      	bne.n	80017f8 <ModBusTask+0x8>
      {
        uint8_t byte = (uint8_t) evt.value.v;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	75fb      	strb	r3, [r7, #23]
        // buffer has space for incoming?
        if(mb_buf_in_count<8) //254
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <ModBusTask+0x68>)
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b07      	cmp	r3, #7
 8001830:	d80c      	bhi.n	800184c <ModBusTask+0x5c>
        {
          mb_buf_in[mb_buf_in_count]=byte;
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <ModBusTask+0x68>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	4619      	mov	r1, r3
 8001838:	4a08      	ldr	r2, [pc, #32]	; (800185c <ModBusTask+0x6c>)
 800183a:	7dfb      	ldrb	r3, [r7, #23]
 800183c:	5453      	strb	r3, [r2, r1]
          mb_buf_in_count=mb_buf_in_count+1; // prevent opt/war on come compilers
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <ModBusTask+0x68>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	3301      	adds	r3, #1
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b04      	ldr	r3, [pc, #16]	; (8001858 <ModBusTask+0x68>)
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	e7d5      	b.n	80017f8 <ModBusTask+0x8>
        }
        else // oops, bad frame, by standard we should drop it and no answer
        {
          mb_buf_in_count=0;
 800184c:	4b02      	ldr	r3, [pc, #8]	; (8001858 <ModBusTask+0x68>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
  {
 8001852:	e7d1      	b.n	80017f8 <ModBusTask+0x8>
 8001854:	20004474 	.word	0x20004474
 8001858:	20004478 	.word	0x20004478
 800185c:	2000447c 	.word	0x2000447c

08001860 <ModBus_Init>:
      }
  }
}

void ModBus_Init(void)
{
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b090      	sub	sp, #64	; 0x40
 8001864:	af00      	add	r7, sp, #0
  osMessageQDef(ModBusIn, 256, uint8_t);
 8001866:	4b25      	ldr	r3, [pc, #148]	; (80018fc <ModBus_Init+0x9c>)
 8001868:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800186c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800186e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ModBusInHandle = osMessageCreate(osMessageQ(ModBusIn), NULL);
 8001872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f004 fa68 	bl	8005d4e <osMessageCreate>
 800187e:	4603      	mov	r3, r0
 8001880:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <ModBus_Init+0xa0>)
 8001882:	6013      	str	r3, [r2, #0]
  osMessageQDef(ModBusOut, 256, uint8_t);
 8001884:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <ModBus_Init+0x9c>)
 8001886:	f107 041c 	add.w	r4, r7, #28
 800188a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800188c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ModBusOutHandle = osMessageCreate(osMessageQ(ModBusOut), NULL);
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	2100      	movs	r1, #0
 8001896:	4618      	mov	r0, r3
 8001898:	f004 fa59 	bl	8005d4e <osMessageCreate>
 800189c:	4603      	mov	r3, r0
 800189e:	4a19      	ldr	r2, [pc, #100]	; (8001904 <ModBus_Init+0xa4>)
 80018a0:	6013      	str	r3, [r2, #0]
  osThreadDef(ModBusTask, ModBusTask, osPriorityNormal, 0, 128);
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <ModBus_Init+0xa8>)
 80018a4:	463c      	mov	r4, r7
 80018a6:	461d      	mov	r5, r3
 80018a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80018b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ModBusTaskHandle = osThreadCreate(osThread(ModBusTask), NULL);
 80018b4:	463b      	mov	r3, r7
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f004 f9e8 	bl	8005c8e <osThreadCreate>
 80018be:	4603      	mov	r3, r0
 80018c0:	4a12      	ldr	r2, [pc, #72]	; (800190c <ModBus_Init+0xac>)
 80018c2:	6013      	str	r3, [r2, #0]
  mb_buf_in_count=0;
 80018c4:	4b12      	ldr	r3, [pc, #72]	; (8001910 <ModBus_Init+0xb0>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	701a      	strb	r2, [r3, #0]
  mb_addr=247; // by default maximum possible adrress
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <ModBus_Init+0xb4>)
 80018cc:	22f7      	movs	r2, #247	; 0xf7
 80018ce:	701a      	strb	r2, [r3, #0]
  mb_buf_out_count=0;
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <ModBus_Init+0xb8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	701a      	strb	r2, [r3, #0]
  for(int i=0;i<ModBusRegisters;i++) 
 80018d6:	2300      	movs	r3, #0
 80018d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018da:	e007      	b.n	80018ec <ModBus_Init+0x8c>
  {
    mb_reg[i]=0;
 80018dc:	4a0f      	ldr	r2, [pc, #60]	; (800191c <ModBus_Init+0xbc>)
 80018de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e0:	2100      	movs	r1, #0
 80018e2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for(int i=0;i<ModBusRegisters;i++) 
 80018e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018e8:	3301      	adds	r3, #1
 80018ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80018ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ee:	2b63      	cmp	r3, #99	; 0x63
 80018f0:	ddf4      	ble.n	80018dc <ModBus_Init+0x7c>
  }
}
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	3740      	adds	r7, #64	; 0x40
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bdb0      	pop	{r4, r5, r7, pc}
 80018fc:	0800917c 	.word	0x0800917c
 8001900:	20004474 	.word	0x20004474
 8001904:	2000446c 	.word	0x2000446c
 8001908:	0800918c 	.word	0x0800918c
 800190c:	200042a0 	.word	0x200042a0
 8001910:	20004478 	.word	0x20004478
 8001914:	20004470 	.word	0x20004470
 8001918:	20004479 	.word	0x20004479
 800191c:	200042a4 	.word	0x200042a4

08001920 <ModBus_SetAddress>:

void ModBus_SetAddress(uint8_t addr)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
  mb_addr = addr;
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <ModBus_SetAddress+0x1c>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	7013      	strb	r3, [r2, #0]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	20004470 	.word	0x20004470

08001940 <ModBusParse>:
void CRC16_OUT(void);
uint8_t CRC16_IN(void);

// parse something in incoming buffer 
void ModBusParse(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
    if(mb_buf_in_count==0) // call as by mistake on empty buffer?
 8001946:	4b75      	ldr	r3, [pc, #468]	; (8001b1c <ModBusParse+0x1dc>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 80e0 	beq.w	8001b10 <ModBusParse+0x1d0>
    {
      return;
    }
    
    if(mb_buf_in[0] != mb_addr) // its not our address!
 8001950:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <ModBusParse+0x1e0>)
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	4b73      	ldr	r3, [pc, #460]	; (8001b24 <ModBusParse+0x1e4>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	f040 80db 	bne.w	8001b14 <ModBusParse+0x1d4>
    {
      return;
    }
    // check CRC
    if(CRC16_IN()==0)
 800195e:	f000 f965 	bl	8001c2c <CRC16_IN>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	f040 80cc 	bne.w	8001b02 <ModBusParse+0x1c2>
    {
      mb_buf_out_count = 0;
 800196a:	4b6f      	ldr	r3, [pc, #444]	; (8001b28 <ModBusParse+0x1e8>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
      uint16_t st,nu;
      uint8_t func = mb_buf_in[1];
 8001970:	4b6b      	ldr	r3, [pc, #428]	; (8001b20 <ModBusParse+0x1e0>)
 8001972:	785b      	ldrb	r3, [r3, #1]
 8001974:	71fb      	strb	r3, [r7, #7]
      uint8_t i;
      switch(func)
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	2b03      	cmp	r3, #3
 800197a:	f040 8088 	bne.w	8001a8e <ModBusParse+0x14e>
      {
        case 3:
          // read holding registers. by bytes addr func starth startl totalh totall
          st = mb_buf_in[2]*256 + mb_buf_in[3];
 800197e:	4b68      	ldr	r3, [pc, #416]	; (8001b20 <ModBusParse+0x1e0>)
 8001980:	789b      	ldrb	r3, [r3, #2]
 8001982:	b29b      	uxth	r3, r3
 8001984:	021b      	lsls	r3, r3, #8
 8001986:	b29a      	uxth	r2, r3
 8001988:	4b65      	ldr	r3, [pc, #404]	; (8001b20 <ModBusParse+0x1e0>)
 800198a:	78db      	ldrb	r3, [r3, #3]
 800198c:	b29b      	uxth	r3, r3
 800198e:	4413      	add	r3, r2
 8001990:	80bb      	strh	r3, [r7, #4]
          nu = mb_buf_in[4]*256 + mb_buf_in[5];
 8001992:	4b63      	ldr	r3, [pc, #396]	; (8001b20 <ModBusParse+0x1e0>)
 8001994:	791b      	ldrb	r3, [r3, #4]
 8001996:	b29b      	uxth	r3, r3
 8001998:	021b      	lsls	r3, r3, #8
 800199a:	b29a      	uxth	r2, r3
 800199c:	4b60      	ldr	r3, [pc, #384]	; (8001b20 <ModBusParse+0x1e0>)
 800199e:	795b      	ldrb	r3, [r3, #5]
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	807b      	strh	r3, [r7, #2]
          if( (st+nu) > ModBusRegisters) // dont ask more, that we has!
 80019a6:	88ba      	ldrh	r2, [r7, #4]
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	4413      	add	r3, r2
 80019ac:	2b64      	cmp	r3, #100	; 0x64
 80019ae:	dd21      	ble.n	80019f4 <ModBusParse+0xb4>
            { //non-use
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 80019b0:	4b5d      	ldr	r3, [pc, #372]	; (8001b28 <ModBusParse+0x1e8>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	b2d1      	uxtb	r1, r2
 80019b8:	4a5b      	ldr	r2, [pc, #364]	; (8001b28 <ModBusParse+0x1e8>)
 80019ba:	7011      	strb	r1, [r2, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <ModBusParse+0x1e4>)
 80019c0:	7819      	ldrb	r1, [r3, #0]
 80019c2:	4b5a      	ldr	r3, [pc, #360]	; (8001b2c <ModBusParse+0x1ec>)
 80019c4:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func+0x80;
 80019c6:	4b58      	ldr	r3, [pc, #352]	; (8001b28 <ModBusParse+0x1e8>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	1c5a      	adds	r2, r3, #1
 80019cc:	b2d1      	uxtb	r1, r2
 80019ce:	4a56      	ldr	r2, [pc, #344]	; (8001b28 <ModBusParse+0x1e8>)
 80019d0:	7011      	strb	r1, [r2, #0]
 80019d2:	461a      	mov	r2, r3
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	3b80      	subs	r3, #128	; 0x80
 80019d8:	b2d9      	uxtb	r1, r3
 80019da:	4b54      	ldr	r3, [pc, #336]	; (8001b2c <ModBusParse+0x1ec>)
 80019dc:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=2;
 80019de:	4b52      	ldr	r3, [pc, #328]	; (8001b28 <ModBusParse+0x1e8>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	1c5a      	adds	r2, r3, #1
 80019e4:	b2d1      	uxtb	r1, r2
 80019e6:	4a50      	ldr	r2, [pc, #320]	; (8001b28 <ModBusParse+0x1e8>)
 80019e8:	7011      	strb	r1, [r2, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	4b4f      	ldr	r3, [pc, #316]	; (8001b2c <ModBusParse+0x1ec>)
 80019ee:	2102      	movs	r1, #2
 80019f0:	5499      	strb	r1, [r3, r2]
                {
                  mb_buf_out[mb_buf_out_count++]=( mb_reg[i] >> 8 ) & 0xFF; // hi part
                  mb_buf_out[mb_buf_out_count++]=mb_reg[i] & 0xFF; // lo part
                }
            }
          break;
 80019f2:	e06e      	b.n	8001ad2 <ModBusParse+0x192>
              mb_buf_out[mb_buf_out_count++]=mb_addr;
 80019f4:	4b4c      	ldr	r3, [pc, #304]	; (8001b28 <ModBusParse+0x1e8>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	1c5a      	adds	r2, r3, #1
 80019fa:	b2d1      	uxtb	r1, r2
 80019fc:	4a4a      	ldr	r2, [pc, #296]	; (8001b28 <ModBusParse+0x1e8>)
 80019fe:	7011      	strb	r1, [r2, #0]
 8001a00:	461a      	mov	r2, r3
 8001a02:	4b48      	ldr	r3, [pc, #288]	; (8001b24 <ModBusParse+0x1e4>)
 8001a04:	7819      	ldrb	r1, [r3, #0]
 8001a06:	4b49      	ldr	r3, [pc, #292]	; (8001b2c <ModBusParse+0x1ec>)
 8001a08:	5499      	strb	r1, [r3, r2]
              mb_buf_out[mb_buf_out_count++]=func;
 8001a0a:	4b47      	ldr	r3, [pc, #284]	; (8001b28 <ModBusParse+0x1e8>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	b2d1      	uxtb	r1, r2
 8001a12:	4a45      	ldr	r2, [pc, #276]	; (8001b28 <ModBusParse+0x1e8>)
 8001a14:	7011      	strb	r1, [r2, #0]
 8001a16:	4619      	mov	r1, r3
 8001a18:	4a44      	ldr	r2, [pc, #272]	; (8001b2c <ModBusParse+0x1ec>)
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	5453      	strb	r3, [r2, r1]
              mb_buf_out[mb_buf_out_count++]=nu*2; // how many bytes we will send?
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4b41      	ldr	r3, [pc, #260]	; (8001b28 <ModBusParse+0x1e8>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	1c59      	adds	r1, r3, #1
 8001a28:	b2c8      	uxtb	r0, r1
 8001a2a:	493f      	ldr	r1, [pc, #252]	; (8001b28 <ModBusParse+0x1e8>)
 8001a2c:	7008      	strb	r0, [r1, #0]
 8001a2e:	4619      	mov	r1, r3
 8001a30:	0053      	lsls	r3, r2, #1
 8001a32:	b2da      	uxtb	r2, r3
 8001a34:	4b3d      	ldr	r3, [pc, #244]	; (8001b2c <ModBusParse+0x1ec>)
 8001a36:	545a      	strb	r2, [r3, r1]
              for(i=st;i<(st+nu);i++)
 8001a38:	88bb      	ldrh	r3, [r7, #4]
 8001a3a:	73fb      	strb	r3, [r7, #15]
 8001a3c:	e020      	b.n	8001a80 <ModBusParse+0x140>
                  mb_buf_out[mb_buf_out_count++]=( mb_reg[i] >> 8 ) & 0xFF; // hi part
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
 8001a40:	4a3b      	ldr	r2, [pc, #236]	; (8001b30 <ModBusParse+0x1f0>)
 8001a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a46:	0a1b      	lsrs	r3, r3, #8
 8001a48:	b299      	uxth	r1, r3
 8001a4a:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <ModBusParse+0x1e8>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	1c5a      	adds	r2, r3, #1
 8001a50:	b2d0      	uxtb	r0, r2
 8001a52:	4a35      	ldr	r2, [pc, #212]	; (8001b28 <ModBusParse+0x1e8>)
 8001a54:	7010      	strb	r0, [r2, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	b2c9      	uxtb	r1, r1
 8001a5a:	4b34      	ldr	r3, [pc, #208]	; (8001b2c <ModBusParse+0x1ec>)
 8001a5c:	5499      	strb	r1, [r3, r2]
                  mb_buf_out[mb_buf_out_count++]=mb_reg[i] & 0xFF; // lo part
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	4a33      	ldr	r2, [pc, #204]	; (8001b30 <ModBusParse+0x1f0>)
 8001a62:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001a66:	4b30      	ldr	r3, [pc, #192]	; (8001b28 <ModBusParse+0x1e8>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	1c5a      	adds	r2, r3, #1
 8001a6c:	b2d0      	uxtb	r0, r2
 8001a6e:	4a2e      	ldr	r2, [pc, #184]	; (8001b28 <ModBusParse+0x1e8>)
 8001a70:	7010      	strb	r0, [r2, #0]
 8001a72:	461a      	mov	r2, r3
 8001a74:	b2c9      	uxtb	r1, r1
 8001a76:	4b2d      	ldr	r3, [pc, #180]	; (8001b2c <ModBusParse+0x1ec>)
 8001a78:	5499      	strb	r1, [r3, r2]
              for(i=st;i<(st+nu);i++)
 8001a7a:	7bfb      	ldrb	r3, [r7, #15]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	88b9      	ldrh	r1, [r7, #4]
 8001a84:	887b      	ldrh	r3, [r7, #2]
 8001a86:	440b      	add	r3, r1
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	dbd8      	blt.n	8001a3e <ModBusParse+0xfe>
          break;
 8001a8c:	e021      	b.n	8001ad2 <ModBusParse+0x192>
            }
          break;
        */
        default:  
          // Exception as we does not provide this function
          mb_buf_out[mb_buf_out_count++]=mb_addr;
 8001a8e:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <ModBusParse+0x1e8>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	b2d1      	uxtb	r1, r2
 8001a96:	4a24      	ldr	r2, [pc, #144]	; (8001b28 <ModBusParse+0x1e8>)
 8001a98:	7011      	strb	r1, [r2, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	4b21      	ldr	r3, [pc, #132]	; (8001b24 <ModBusParse+0x1e4>)
 8001a9e:	7819      	ldrb	r1, [r3, #0]
 8001aa0:	4b22      	ldr	r3, [pc, #136]	; (8001b2c <ModBusParse+0x1ec>)
 8001aa2:	5499      	strb	r1, [r3, r2]
          mb_buf_out[mb_buf_out_count++]=func+0x80;
 8001aa4:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <ModBusParse+0x1e8>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	b2d1      	uxtb	r1, r2
 8001aac:	4a1e      	ldr	r2, [pc, #120]	; (8001b28 <ModBusParse+0x1e8>)
 8001aae:	7011      	strb	r1, [r2, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	3b80      	subs	r3, #128	; 0x80
 8001ab6:	b2d9      	uxtb	r1, r3
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	; (8001b2c <ModBusParse+0x1ec>)
 8001aba:	5499      	strb	r1, [r3, r2]
          mb_buf_out[mb_buf_out_count++]=1;
 8001abc:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <ModBusParse+0x1e8>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	b2d1      	uxtb	r1, r2
 8001ac4:	4a18      	ldr	r2, [pc, #96]	; (8001b28 <ModBusParse+0x1e8>)
 8001ac6:	7011      	strb	r1, [r2, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <ModBusParse+0x1ec>)
 8001acc:	2101      	movs	r1, #1
 8001ace:	5499      	strb	r1, [r3, r2]
          break;
 8001ad0:	bf00      	nop
      }
      
      CRC16_OUT();
 8001ad2:	f000 f849 	bl	8001b68 <CRC16_OUT>
      
     // If you want directly to USB-CDC 
     //CDC_Transmit_FS(&mb_buf_out[0], mb_buf_out_count);
     for(int i=0;i<mb_buf_out_count;i++)
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	e00c      	b.n	8001af6 <ModBusParse+0x1b6>
        {
          osMessagePut(ModBusOutHandle,mb_buf_out[i],0);
 8001adc:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <ModBusParse+0x1f4>)
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <ModBusParse+0x1ec>)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	4619      	mov	r1, r3
 8001aec:	f004 f958 	bl	8005da0 <osMessagePut>
     for(int i=0;i<mb_buf_out_count;i++)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	3301      	adds	r3, #1
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <ModBusParse+0x1e8>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	461a      	mov	r2, r3
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	4293      	cmp	r3, r2
 8001b00:	dbec      	blt.n	8001adc <ModBusParse+0x19c>
        }
    }
    // Ok, we parsed buffer, clean up
    mb_buf_in_count=0;
 8001b02:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <ModBusParse+0x1dc>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	701a      	strb	r2, [r3, #0]
    mb_buf_out_count=0;
 8001b08:	4b07      	ldr	r3, [pc, #28]	; (8001b28 <ModBusParse+0x1e8>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
 8001b0e:	e002      	b.n	8001b16 <ModBusParse+0x1d6>
      return;
 8001b10:	bf00      	nop
 8001b12:	e000      	b.n	8001b16 <ModBusParse+0x1d6>
      return;
 8001b14:	bf00      	nop
}
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20004478 	.word	0x20004478
 8001b20:	2000447c 	.word	0x2000447c
 8001b24:	20004470 	.word	0x20004470
 8001b28:	20004479 	.word	0x20004479
 8001b2c:	2000436c 	.word	0x2000436c
 8001b30:	200042a4 	.word	0x200042a4
 8001b34:	2000446c 	.word	0x2000446c

08001b38 <ModBus_SetRegister>:

// set value of register
void ModBus_SetRegister(uint8_t reg,uint16_t value)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	460a      	mov	r2, r1
 8001b42:	71fb      	strb	r3, [r7, #7]
 8001b44:	4613      	mov	r3, r2
 8001b46:	80bb      	strh	r3, [r7, #4]
  if(reg<ModBusRegisters)
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	2b63      	cmp	r3, #99	; 0x63
 8001b4c:	d804      	bhi.n	8001b58 <ModBus_SetRegister+0x20>
  {
    mb_reg[reg]=value;
 8001b4e:	79fb      	ldrb	r3, [r7, #7]
 8001b50:	4904      	ldr	r1, [pc, #16]	; (8001b64 <ModBus_SetRegister+0x2c>)
 8001b52:	88ba      	ldrh	r2, [r7, #4]
 8001b54:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
  }
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	200042a4 	.word	0x200042a4

08001b68 <CRC16_OUT>:


// Calculate CRC for outcoming buffer
// and place it to end.
void CRC16_OUT(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
  uint16_t crc = 0xFFFF;
 8001b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b72:	80fb      	strh	r3, [r7, #6]
  uint16_t pos = 0;
 8001b74:	2300      	movs	r3, #0
 8001b76:	80bb      	strh	r3, [r7, #4]
  uint8_t i =0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	70fb      	strb	r3, [r7, #3]
  uint8_t lo =0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	70bb      	strb	r3, [r7, #2]
  uint8_t hi =0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	707b      	strb	r3, [r7, #1]
  
  for (pos = 0; pos < mb_buf_out_count; pos++)
 8001b84:	2300      	movs	r3, #0
 8001b86:	80bb      	strh	r3, [r7, #4]
 8001b88:	e025      	b.n	8001bd6 <CRC16_OUT+0x6e>
  {
    crc ^= mb_buf_out[pos];
 8001b8a:	88bb      	ldrh	r3, [r7, #4]
 8001b8c:	4a25      	ldr	r2, [pc, #148]	; (8001c24 <CRC16_OUT+0xbc>)
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	4053      	eors	r3, r2
 8001b96:	80fb      	strh	r3, [r7, #6]

  for (i = 8; i != 0; i--)
 8001b98:	2308      	movs	r3, #8
 8001b9a:	70fb      	strb	r3, [r7, #3]
 8001b9c:	e015      	b.n	8001bca <CRC16_OUT+0x62>
    {
    if ((crc & 0x0001) != 0)
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d00a      	beq.n	8001bbe <CRC16_OUT+0x56>
      {
      crc >>= 1;
 8001ba8:	88fb      	ldrh	r3, [r7, #6]
 8001baa:	085b      	lsrs	r3, r3, #1
 8001bac:	80fb      	strh	r3, [r7, #6]
      crc ^= 0xA001;
 8001bae:	88fb      	ldrh	r3, [r7, #6]
 8001bb0:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001bb4:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	80fb      	strh	r3, [r7, #6]
 8001bbc:	e002      	b.n	8001bc4 <CRC16_OUT+0x5c>
      }
    else
      crc >>= 1;
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	085b      	lsrs	r3, r3, #1
 8001bc2:	80fb      	strh	r3, [r7, #6]
  for (i = 8; i != 0; i--)
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	70fb      	strb	r3, [r7, #3]
 8001bca:	78fb      	ldrb	r3, [r7, #3]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1e6      	bne.n	8001b9e <CRC16_OUT+0x36>
  for (pos = 0; pos < mb_buf_out_count; pos++)
 8001bd0:	88bb      	ldrh	r3, [r7, #4]
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	80bb      	strh	r3, [r7, #4]
 8001bd6:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <CRC16_OUT+0xc0>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	88ba      	ldrh	r2, [r7, #4]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d3d3      	bcc.n	8001b8a <CRC16_OUT+0x22>
    }
  }
  lo = crc & 0xFF;
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	70bb      	strb	r3, [r7, #2]
  hi = ( crc >> 8 ) & 0xFF;
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	0a1b      	lsrs	r3, r3, #8
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	707b      	strb	r3, [r7, #1]
  
  mb_buf_out[mb_buf_out_count++] = lo;
 8001bee:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <CRC16_OUT+0xc0>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	b2d1      	uxtb	r1, r2
 8001bf6:	4a0c      	ldr	r2, [pc, #48]	; (8001c28 <CRC16_OUT+0xc0>)
 8001bf8:	7011      	strb	r1, [r2, #0]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4a09      	ldr	r2, [pc, #36]	; (8001c24 <CRC16_OUT+0xbc>)
 8001bfe:	78bb      	ldrb	r3, [r7, #2]
 8001c00:	5453      	strb	r3, [r2, r1]
  mb_buf_out[mb_buf_out_count++] = hi;
 8001c02:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <CRC16_OUT+0xc0>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	1c5a      	adds	r2, r3, #1
 8001c08:	b2d1      	uxtb	r1, r2
 8001c0a:	4a07      	ldr	r2, [pc, #28]	; (8001c28 <CRC16_OUT+0xc0>)
 8001c0c:	7011      	strb	r1, [r2, #0]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <CRC16_OUT+0xbc>)
 8001c12:	787b      	ldrb	r3, [r7, #1]
 8001c14:	5453      	strb	r3, [r2, r1]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	2000436c 	.word	0x2000436c
 8001c28:	20004479 	.word	0x20004479

08001c2c <CRC16_IN>:

// Calculate CRC fro incoming buffer
// Return 0 - if CRC is correct, overwise return 0 
uint8_t CRC16_IN(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
  uint16_t crc = 0xFFFF;
 8001c32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c36:	80fb      	strh	r3, [r7, #6]
  uint16_t pos = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	80bb      	strh	r3, [r7, #4]
  uint8_t i =0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	70fb      	strb	r3, [r7, #3]
  uint8_t lo =0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	70bb      	strb	r3, [r7, #2]
  uint8_t hi =0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	707b      	strb	r3, [r7, #1]
  
  for (pos = 0; pos < mb_buf_in_count-2; pos++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	80bb      	strh	r3, [r7, #4]
 8001c4c:	e025      	b.n	8001c9a <CRC16_IN+0x6e>
  {
    crc ^= mb_buf_in[pos];
 8001c4e:	88bb      	ldrh	r3, [r7, #4]
 8001c50:	4a24      	ldr	r2, [pc, #144]	; (8001ce4 <CRC16_IN+0xb8>)
 8001c52:	5cd3      	ldrb	r3, [r2, r3]
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	88fb      	ldrh	r3, [r7, #6]
 8001c58:	4053      	eors	r3, r2
 8001c5a:	80fb      	strh	r3, [r7, #6]

  for (i = 8; i != 0; i--)
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	70fb      	strb	r3, [r7, #3]
 8001c60:	e015      	b.n	8001c8e <CRC16_IN+0x62>
    {
    if ((crc & 0x0001) != 0)
 8001c62:	88fb      	ldrh	r3, [r7, #6]
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00a      	beq.n	8001c82 <CRC16_IN+0x56>
      {
      crc >>= 1;
 8001c6c:	88fb      	ldrh	r3, [r7, #6]
 8001c6e:	085b      	lsrs	r3, r3, #1
 8001c70:	80fb      	strh	r3, [r7, #6]
      crc ^= 0xA001;
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001c78:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	80fb      	strh	r3, [r7, #6]
 8001c80:	e002      	b.n	8001c88 <CRC16_IN+0x5c>
      }
    else
      crc >>= 1;
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	085b      	lsrs	r3, r3, #1
 8001c86:	80fb      	strh	r3, [r7, #6]
  for (i = 8; i != 0; i--)
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	70fb      	strb	r3, [r7, #3]
 8001c8e:	78fb      	ldrb	r3, [r7, #3]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1e6      	bne.n	8001c62 <CRC16_IN+0x36>
  for (pos = 0; pos < mb_buf_in_count-2; pos++)
 8001c94:	88bb      	ldrh	r3, [r7, #4]
 8001c96:	3301      	adds	r3, #1
 8001c98:	80bb      	strh	r3, [r7, #4]
 8001c9a:	88ba      	ldrh	r2, [r7, #4]
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <CRC16_IN+0xbc>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	3b02      	subs	r3, #2
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	dbd3      	blt.n	8001c4e <CRC16_IN+0x22>
    }
  }
  lo = crc & 0xFF;
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	70bb      	strb	r3, [r7, #2]
  hi = ( crc >> 8 ) & 0xFF;
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	707b      	strb	r3, [r7, #1]
  if( (mb_buf_in[mb_buf_in_count-2] == lo) && 
 8001cb2:	4b0d      	ldr	r3, [pc, #52]	; (8001ce8 <CRC16_IN+0xbc>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	3b02      	subs	r3, #2
 8001cb8:	4a0a      	ldr	r2, [pc, #40]	; (8001ce4 <CRC16_IN+0xb8>)
 8001cba:	5cd3      	ldrb	r3, [r2, r3]
 8001cbc:	78ba      	ldrb	r2, [r7, #2]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d109      	bne.n	8001cd6 <CRC16_IN+0xaa>
       (mb_buf_in[mb_buf_in_count-1] == hi) )
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <CRC16_IN+0xbc>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <CRC16_IN+0xb8>)
 8001cca:	5cd3      	ldrb	r3, [r2, r3]
  if( (mb_buf_in[mb_buf_in_count-2] == lo) && 
 8001ccc:	787a      	ldrb	r2, [r7, #1]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d101      	bne.n	8001cd6 <CRC16_IN+0xaa>
    {
      return 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e000      	b.n	8001cd8 <CRC16_IN+0xac>
    }
  return 1;
 8001cd6:	2301      	movs	r3, #1
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	2000447c 	.word	0x2000447c
 8001ce8:	20004478 	.word	0x20004478

08001cec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_MspInit+0x54>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	4a11      	ldr	r2, [pc, #68]	; (8001d40 <HAL_MspInit+0x54>)
 8001cfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d00:	6453      	str	r3, [r2, #68]	; 0x44
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_MspInit+0x54>)
 8001d04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <HAL_MspInit+0x54>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <HAL_MspInit+0x54>)
 8001d18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1e:	4b08      	ldr	r3, [pc, #32]	; (8001d40 <HAL_MspInit+0x54>)
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d26:	603b      	str	r3, [r7, #0]
 8001d28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	210f      	movs	r1, #15
 8001d2e:	f06f 0001 	mvn.w	r0, #1
 8001d32:	f000 fac3 	bl	80022bc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d36:	bf00      	nop
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800

08001d44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b08a      	sub	sp, #40	; 0x28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d4c:	f107 0314 	add.w	r3, r7, #20
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	609a      	str	r2, [r3, #8]
 8001d58:	60da      	str	r2, [r3, #12]
 8001d5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a19      	ldr	r2, [pc, #100]	; (8001dc8 <HAL_I2C_MspInit+0x84>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d12b      	bne.n	8001dbe <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b18      	ldr	r3, [pc, #96]	; (8001dcc <HAL_I2C_MspInit+0x88>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a17      	ldr	r2, [pc, #92]	; (8001dcc <HAL_I2C_MspInit+0x88>)
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_I2C_MspInit+0x88>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d82:	23c0      	movs	r3, #192	; 0xc0
 8001d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d86:	2312      	movs	r3, #18
 8001d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d92:	2304      	movs	r3, #4
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <HAL_I2C_MspInit+0x8c>)
 8001d9e:	f000 feb9 	bl	8002b14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_I2C_MspInit+0x88>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	4a08      	ldr	r2, [pc, #32]	; (8001dcc <HAL_I2C_MspInit+0x88>)
 8001dac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001db0:	6413      	str	r3, [r2, #64]	; 0x40
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_I2C_MspInit+0x88>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dba:	60fb      	str	r3, [r7, #12]
 8001dbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001dbe:	bf00      	nop
 8001dc0:	3728      	adds	r7, #40	; 0x28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40005400 	.word	0x40005400
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020400 	.word	0x40020400

08001dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a34      	ldr	r2, [pc, #208]	; (8001ec4 <HAL_UART_MspInit+0xf0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d162      	bne.n	8001ebc <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <HAL_UART_MspInit+0xf4>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a32      	ldr	r2, [pc, #200]	; (8001ec8 <HAL_UART_MspInit+0xf4>)
 8001e00:	f043 0320 	orr.w	r3, r3, #32
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b30      	ldr	r3, [pc, #192]	; (8001ec8 <HAL_UART_MspInit+0xf4>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	4b2c      	ldr	r3, [pc, #176]	; (8001ec8 <HAL_UART_MspInit+0xf4>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	4a2b      	ldr	r2, [pc, #172]	; (8001ec8 <HAL_UART_MspInit+0xf4>)
 8001e1c:	f043 0304 	orr.w	r3, r3, #4
 8001e20:	6313      	str	r3, [r2, #48]	; 0x30
 8001e22:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <HAL_UART_MspInit+0xf4>)
 8001e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e26:	f003 0304 	and.w	r3, r3, #4
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e2e:	23c0      	movs	r3, #192	; 0xc0
 8001e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e32:	2302      	movs	r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e36:	2300      	movs	r3, #0
 8001e38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e3e:	2308      	movs	r3, #8
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e42:	f107 0314 	add.w	r3, r7, #20
 8001e46:	4619      	mov	r1, r3
 8001e48:	4820      	ldr	r0, [pc, #128]	; (8001ecc <HAL_UART_MspInit+0xf8>)
 8001e4a:	f000 fe63 	bl	8002b14 <HAL_GPIO_Init>

    /* USART6 DMA Init */
    /* USART6_RX Init */
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8001e4e:	4b20      	ldr	r3, [pc, #128]	; (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e50:	4a20      	ldr	r2, [pc, #128]	; (8001ed4 <HAL_UART_MspInit+0x100>)
 8001e52:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8001e54:	4b1e      	ldr	r3, [pc, #120]	; (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e56:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001e5a:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e5c:	4b1c      	ldr	r3, [pc, #112]	; (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e62:	4b1b      	ldr	r3, [pc, #108]	; (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e68:	4b19      	ldr	r3, [pc, #100]	; (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e6e:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e70:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e76:	4b16      	ldr	r3, [pc, #88]	; (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e82:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e84:	4b12      	ldr	r3, [pc, #72]	; (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e8a:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8001e90:	480f      	ldr	r0, [pc, #60]	; (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001e92:	f000 fa3d 	bl	8002310 <HAL_DMA_Init>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001e9c:	f7ff fca0 	bl	80017e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <HAL_UART_MspInit+0xfc>)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2105      	movs	r1, #5
 8001eb0:	2047      	movs	r0, #71	; 0x47
 8001eb2:	f000 fa03 	bl	80022bc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001eb6:	2047      	movs	r0, #71	; 0x47
 8001eb8:	f000 fa1c 	bl	80022f4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001ebc:	bf00      	nop
 8001ebe:	3728      	adds	r7, #40	; 0x28
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40011400 	.word	0x40011400
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	2000405c 	.word	0x2000405c
 8001ed4:	40026428 	.word	0x40026428

08001ed8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	; 0x30
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 8001ee8:	2200      	movs	r2, #0
 8001eea:	6879      	ldr	r1, [r7, #4]
 8001eec:	201d      	movs	r0, #29
 8001eee:	f000 f9e5 	bl	80022bc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 8001ef2:	201d      	movs	r0, #29
 8001ef4:	f000 f9fe 	bl	80022f4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <HAL_InitTick+0xa4>)
 8001efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f00:	4a1e      	ldr	r2, [pc, #120]	; (8001f7c <HAL_InitTick+0xa4>)
 8001f02:	f043 0302 	orr.w	r3, r3, #2
 8001f06:	6413      	str	r3, [r2, #64]	; 0x40
 8001f08:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <HAL_InitTick+0xa4>)
 8001f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f14:	f107 0210 	add.w	r2, r7, #16
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f002 fb80 	bl	8004624 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f24:	f002 fb56 	bl	80045d4 <HAL_RCC_GetPCLK1Freq>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f30:	4a13      	ldr	r2, [pc, #76]	; (8001f80 <HAL_InitTick+0xa8>)
 8001f32:	fba2 2303 	umull	r2, r3, r2, r3
 8001f36:	0c9b      	lsrs	r3, r3, #18
 8001f38:	3b01      	subs	r3, #1
 8001f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <HAL_InitTick+0xac>)
 8001f3e:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <HAL_InitTick+0xb0>)
 8001f40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <HAL_InitTick+0xac>)
 8001f44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f48:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <HAL_InitTick+0xac>)
 8001f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f4e:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_InitTick+0xac>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f56:	4b0b      	ldr	r3, [pc, #44]	; (8001f84 <HAL_InitTick+0xac>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8001f5c:	4809      	ldr	r0, [pc, #36]	; (8001f84 <HAL_InitTick+0xac>)
 8001f5e:	f002 fb93 	bl	8004688 <HAL_TIM_Base_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d104      	bne.n	8001f72 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8001f68:	4806      	ldr	r0, [pc, #24]	; (8001f84 <HAL_InitTick+0xac>)
 8001f6a:	f002 fbc2 	bl	80046f2 <HAL_TIM_Base_Start_IT>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	e000      	b.n	8001f74 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3730      	adds	r7, #48	; 0x30
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40023800 	.word	0x40023800
 8001f80:	431bde83 	.word	0x431bde83
 8001f84:	2000457c 	.word	0x2000457c
 8001f88:	40000400 	.word	0x40000400

08001f8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fc4:	4802      	ldr	r0, [pc, #8]	; (8001fd0 <TIM3_IRQHandler+0x10>)
 8001fc6:	f002 fbb8 	bl	800473a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000457c 	.word	0x2000457c

08001fd4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001fd8:	4802      	ldr	r0, [pc, #8]	; (8001fe4 <DMA2_Stream1_IRQHandler+0x10>)
 8001fda:	f000 fb31 	bl	8002640 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2000405c 	.word	0x2000405c

08001fe8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001fec:	4803      	ldr	r0, [pc, #12]	; (8001ffc <USART6_IRQHandler+0x14>)
 8001fee:	f002 ff4b 	bl	8004e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */
  USER_UART_IRQHandler(&huart6); //usart6 idle interrupt
 8001ff2:	4802      	ldr	r0, [pc, #8]	; (8001ffc <USART6_IRQHandler+0x14>)
 8001ff4:	f7ff fa68 	bl	80014c8 <USER_UART_IRQHandler>
  /* USER CODE END USART6_IRQn 1 */
}
 8001ff8:	bf00      	nop
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20004154 	.word	0x20004154

08002000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002004:	4b08      	ldr	r3, [pc, #32]	; (8002028 <SystemInit+0x28>)
 8002006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800200a:	4a07      	ldr	r2, [pc, #28]	; (8002028 <SystemInit+0x28>)
 800200c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <SystemInit+0x28>)
 8002016:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800201a:	609a      	str	r2, [r3, #8]
#endif
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800202c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002064 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002030:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002032:	e003      	b.n	800203c <LoopCopyDataInit>

08002034 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002034:	4b0c      	ldr	r3, [pc, #48]	; (8002068 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002036:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002038:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800203a:	3104      	adds	r1, #4

0800203c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800203c:	480b      	ldr	r0, [pc, #44]	; (800206c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800203e:	4b0c      	ldr	r3, [pc, #48]	; (8002070 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002040:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002042:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002044:	d3f6      	bcc.n	8002034 <CopyDataInit>
  ldr  r2, =_sbss
 8002046:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002048:	e002      	b.n	8002050 <LoopFillZerobss>

0800204a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800204a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800204c:	f842 3b04 	str.w	r3, [r2], #4

08002050 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002050:	4b09      	ldr	r3, [pc, #36]	; (8002078 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002052:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002054:	d3f9      	bcc.n	800204a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002056:	f7ff ffd3 	bl	8002000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800205a:	f006 f84d 	bl	80080f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800205e:	f7fe ffef 	bl	8001040 <main>
  bx  lr    
 8002062:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002064:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002068:	08009228 	.word	0x08009228
  ldr  r0, =_sdata
 800206c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002070:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002074:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002078:	200045c0 	.word	0x200045c0

0800207c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800207c:	e7fe      	b.n	800207c <ADC_IRQHandler>
	...

08002080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002084:	4b0e      	ldr	r3, [pc, #56]	; (80020c0 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0d      	ldr	r2, [pc, #52]	; (80020c0 <HAL_Init+0x40>)
 800208a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800208e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0a      	ldr	r2, [pc, #40]	; (80020c0 <HAL_Init+0x40>)
 8002096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800209a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800209c:	4b08      	ldr	r3, [pc, #32]	; (80020c0 <HAL_Init+0x40>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a07      	ldr	r2, [pc, #28]	; (80020c0 <HAL_Init+0x40>)
 80020a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020a8:	2003      	movs	r0, #3
 80020aa:	f000 f8fc 	bl	80022a6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ae:	2000      	movs	r0, #0
 80020b0:	f7ff ff12 	bl	8001ed8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020b4:	f7ff fe1a 	bl	8001cec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020b8:	2300      	movs	r3, #0
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40023c00 	.word	0x40023c00

080020c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_IncTick+0x20>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x24>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <HAL_IncTick+0x24>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000008 	.word	0x20000008
 80020e8:	200045bc 	.word	0x200045bc

080020ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_GetTick+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	200045bc 	.word	0x200045bc

08002104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff ffee 	bl	80020ec <HAL_GetTick>
 8002110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d005      	beq.n	800212a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_Delay+0x44>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800212a:	bf00      	nop
 800212c:	f7ff ffde 	bl	80020ec <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d8f7      	bhi.n	800212c <HAL_Delay+0x28>
  {
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000008 	.word	0x20000008

0800214c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800215c:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800217c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217e:	4a04      	ldr	r2, [pc, #16]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	60d3      	str	r3, [r2, #12]
}
 8002184:	bf00      	nop
 8002186:	3714      	adds	r7, #20
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <__NVIC_GetPriorityGrouping+0x18>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	f003 0307 	and.w	r3, r3, #7
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	db0b      	blt.n	80021da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	4907      	ldr	r1, [pc, #28]	; (80021e8 <__NVIC_EnableIRQ+0x38>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2001      	movs	r0, #1
 80021d2:	fa00 f202 	lsl.w	r2, r0, r2
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000e100 	.word	0xe000e100

080021ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db0a      	blt.n	8002216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	490c      	ldr	r1, [pc, #48]	; (8002238 <__NVIC_SetPriority+0x4c>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	0112      	lsls	r2, r2, #4
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	440b      	add	r3, r1
 8002210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002214:	e00a      	b.n	800222c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4908      	ldr	r1, [pc, #32]	; (800223c <__NVIC_SetPriority+0x50>)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	3b04      	subs	r3, #4
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	440b      	add	r3, r1
 800222a:	761a      	strb	r2, [r3, #24]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000e100 	.word	0xe000e100
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	; 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f1c3 0307 	rsb	r3, r3, #7
 800225a:	2b04      	cmp	r3, #4
 800225c:	bf28      	it	cs
 800225e:	2304      	movcs	r3, #4
 8002260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3304      	adds	r3, #4
 8002266:	2b06      	cmp	r3, #6
 8002268:	d902      	bls.n	8002270 <NVIC_EncodePriority+0x30>
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3b03      	subs	r3, #3
 800226e:	e000      	b.n	8002272 <NVIC_EncodePriority+0x32>
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	f04f 32ff 	mov.w	r2, #4294967295
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	401a      	ands	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002288:	f04f 31ff 	mov.w	r1, #4294967295
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	43d9      	mvns	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	4313      	orrs	r3, r2
         );
}
 800229a:	4618      	mov	r0, r3
 800229c:	3724      	adds	r7, #36	; 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ff4c 	bl	800214c <__NVIC_SetPriorityGrouping>
}
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022ce:	f7ff ff61 	bl	8002194 <__NVIC_GetPriorityGrouping>
 80022d2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68b9      	ldr	r1, [r7, #8]
 80022d8:	6978      	ldr	r0, [r7, #20]
 80022da:	f7ff ffb1 	bl	8002240 <NVIC_EncodePriority>
 80022de:	4602      	mov	r2, r0
 80022e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff ff80 	bl	80021ec <__NVIC_SetPriority>
}
 80022ec:	bf00      	nop
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff ff54 	bl	80021b0 <__NVIC_EnableIRQ>
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800231c:	f7ff fee6 	bl	80020ec <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e099      	b.n	8002460 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2202      	movs	r2, #2
 8002338:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f022 0201 	bic.w	r2, r2, #1
 800234a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800234c:	e00f      	b.n	800236e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800234e:	f7ff fecd 	bl	80020ec <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b05      	cmp	r3, #5
 800235a:	d908      	bls.n	800236e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2220      	movs	r2, #32
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2203      	movs	r2, #3
 8002366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e078      	b.n	8002460 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	2b00      	cmp	r3, #0
 800237a:	d1e8      	bne.n	800234e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4b38      	ldr	r3, [pc, #224]	; (8002468 <HAL_DMA_Init+0x158>)
 8002388:	4013      	ands	r3, r2
 800238a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685a      	ldr	r2, [r3, #4]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800239a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	4313      	orrs	r3, r2
 80023be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d107      	bne.n	80023d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	4313      	orrs	r3, r2
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f023 0307 	bic.w	r3, r3, #7
 80023ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d117      	bne.n	8002432 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	4313      	orrs	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00e      	beq.n	8002432 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 fb01 	bl	8002a1c <DMA_CheckFifoParam>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2240      	movs	r2, #64	; 0x40
 8002424:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800242e:	2301      	movs	r3, #1
 8002430:	e016      	b.n	8002460 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 fab8 	bl	80029b0 <DMA_CalcBaseAndBitshift>
 8002440:	4603      	mov	r3, r0
 8002442:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002448:	223f      	movs	r2, #63	; 0x3f
 800244a:	409a      	lsls	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800245e:	2300      	movs	r3, #0
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	f010803f 	.word	0xf010803f

0800246c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800248a:	2b01      	cmp	r3, #1
 800248c:	d101      	bne.n	8002492 <HAL_DMA_Start_IT+0x26>
 800248e:	2302      	movs	r3, #2
 8002490:	e040      	b.n	8002514 <HAL_DMA_Start_IT+0xa8>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d12f      	bne.n	8002506 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2202      	movs	r2, #2
 80024aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	68b9      	ldr	r1, [r7, #8]
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 fa4a 	bl	8002954 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	223f      	movs	r2, #63	; 0x3f
 80024c6:	409a      	lsls	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0216 	orr.w	r2, r2, #22
 80024da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d007      	beq.n	80024f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0208 	orr.w	r2, r2, #8
 80024f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0201 	orr.w	r2, r2, #1
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e005      	b.n	8002512 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800250e:	2302      	movs	r3, #2
 8002510:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002512:	7dfb      	ldrb	r3, [r7, #23]
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}

0800251c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800252a:	f7ff fddf 	bl	80020ec <HAL_GetTick>
 800252e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d008      	beq.n	800254e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2280      	movs	r2, #128	; 0x80
 8002540:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e052      	b.n	80025f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0216 	bic.w	r2, r2, #22
 800255c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	695a      	ldr	r2, [r3, #20]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800256c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d103      	bne.n	800257e <HAL_DMA_Abort+0x62>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800257a:	2b00      	cmp	r3, #0
 800257c:	d007      	beq.n	800258e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0208 	bic.w	r2, r2, #8
 800258c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0201 	bic.w	r2, r2, #1
 800259c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800259e:	e013      	b.n	80025c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025a0:	f7ff fda4 	bl	80020ec <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b05      	cmp	r3, #5
 80025ac:	d90c      	bls.n	80025c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2220      	movs	r2, #32
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2203      	movs	r2, #3
 80025c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e015      	b.n	80025f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1e4      	bne.n	80025a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025da:	223f      	movs	r2, #63	; 0x3f
 80025dc:	409a      	lsls	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800260a:	b2db      	uxtb	r3, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d004      	beq.n	800261a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2280      	movs	r2, #128	; 0x80
 8002614:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e00c      	b.n	8002634 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2205      	movs	r2, #5
 800261e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0201 	bic.w	r2, r2, #1
 8002630:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002648:	2300      	movs	r3, #0
 800264a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800264c:	4b92      	ldr	r3, [pc, #584]	; (8002898 <HAL_DMA_IRQHandler+0x258>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a92      	ldr	r2, [pc, #584]	; (800289c <HAL_DMA_IRQHandler+0x25c>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0a9b      	lsrs	r3, r3, #10
 8002658:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800266a:	2208      	movs	r2, #8
 800266c:	409a      	lsls	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	4013      	ands	r3, r2
 8002672:	2b00      	cmp	r3, #0
 8002674:	d01a      	beq.n	80026ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0204 	bic.w	r2, r2, #4
 8002692:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002698:	2208      	movs	r2, #8
 800269a:	409a      	lsls	r2, r3
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b0:	2201      	movs	r2, #1
 80026b2:	409a      	lsls	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d012      	beq.n	80026e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	2201      	movs	r2, #1
 80026d0:	409a      	lsls	r2, r3
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	f043 0202 	orr.w	r2, r3, #2
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e6:	2204      	movs	r2, #4
 80026e8:	409a      	lsls	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4013      	ands	r3, r2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d012      	beq.n	8002718 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00b      	beq.n	8002718 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002704:	2204      	movs	r2, #4
 8002706:	409a      	lsls	r2, r3
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	f043 0204 	orr.w	r2, r3, #4
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271c:	2210      	movs	r2, #16
 800271e:	409a      	lsls	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	4013      	ands	r3, r2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d043      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d03c      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800273a:	2210      	movs	r2, #16
 800273c:	409a      	lsls	r2, r3
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d018      	beq.n	8002782 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d108      	bne.n	8002770 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d024      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	4798      	blx	r3
 800276e:	e01f      	b.n	80027b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01b      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	4798      	blx	r3
 8002780:	e016      	b.n	80027b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278c:	2b00      	cmp	r3, #0
 800278e:	d107      	bne.n	80027a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 0208 	bic.w	r2, r2, #8
 800279e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b4:	2220      	movs	r2, #32
 80027b6:	409a      	lsls	r2, r3
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4013      	ands	r3, r2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 808e 	beq.w	80028de <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f000 8086 	beq.w	80028de <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d6:	2220      	movs	r2, #32
 80027d8:	409a      	lsls	r2, r3
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b05      	cmp	r3, #5
 80027e8:	d136      	bne.n	8002858 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0216 	bic.w	r2, r2, #22
 80027f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002808:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <HAL_DMA_IRQHandler+0x1da>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0208 	bic.w	r2, r2, #8
 8002828:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	223f      	movs	r2, #63	; 0x3f
 8002830:	409a      	lsls	r2, r3
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2200      	movs	r2, #0
 800283a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800284a:	2b00      	cmp	r3, #0
 800284c:	d07d      	beq.n	800294a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	4798      	blx	r3
        }
        return;
 8002856:	e078      	b.n	800294a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01c      	beq.n	80028a0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d108      	bne.n	8002886 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002878:	2b00      	cmp	r3, #0
 800287a:	d030      	beq.n	80028de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
 8002884:	e02b      	b.n	80028de <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288a:	2b00      	cmp	r3, #0
 800288c:	d027      	beq.n	80028de <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	4798      	blx	r3
 8002896:	e022      	b.n	80028de <HAL_DMA_IRQHandler+0x29e>
 8002898:	20000000 	.word	0x20000000
 800289c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10f      	bne.n	80028ce <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0210 	bic.w	r2, r2, #16
 80028bc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d032      	beq.n	800294c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d022      	beq.n	8002938 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2205      	movs	r2, #5
 80028f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0201 	bic.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	3301      	adds	r3, #1
 800290e:	60bb      	str	r3, [r7, #8]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	429a      	cmp	r2, r3
 8002914:	d307      	bcc.n	8002926 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f2      	bne.n	800290a <HAL_DMA_IRQHandler+0x2ca>
 8002924:	e000      	b.n	8002928 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002926:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	4798      	blx	r3
 8002948:	e000      	b.n	800294c <HAL_DMA_IRQHandler+0x30c>
        return;
 800294a:	bf00      	nop
    }
  }
}
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop

08002954 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002970:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b40      	cmp	r3, #64	; 0x40
 8002980:	d108      	bne.n	8002994 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002992:	e007      	b.n	80029a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	60da      	str	r2, [r3, #12]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	3b10      	subs	r3, #16
 80029c0:	4a14      	ldr	r2, [pc, #80]	; (8002a14 <DMA_CalcBaseAndBitshift+0x64>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	091b      	lsrs	r3, r3, #4
 80029c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ca:	4a13      	ldr	r2, [pc, #76]	; (8002a18 <DMA_CalcBaseAndBitshift+0x68>)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4413      	add	r3, r2
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	461a      	mov	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d909      	bls.n	80029f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029e6:	f023 0303 	bic.w	r3, r3, #3
 80029ea:	1d1a      	adds	r2, r3, #4
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	659a      	str	r2, [r3, #88]	; 0x58
 80029f0:	e007      	b.n	8002a02 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029fa:	f023 0303 	bic.w	r3, r3, #3
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	aaaaaaab 	.word	0xaaaaaaab
 8002a18:	080091cc 	.word	0x080091cc

08002a1c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a24:	2300      	movs	r3, #0
 8002a26:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d11f      	bne.n	8002a76 <DMA_CheckFifoParam+0x5a>
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b03      	cmp	r3, #3
 8002a3a:	d856      	bhi.n	8002aea <DMA_CheckFifoParam+0xce>
 8002a3c:	a201      	add	r2, pc, #4	; (adr r2, 8002a44 <DMA_CheckFifoParam+0x28>)
 8002a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a42:	bf00      	nop
 8002a44:	08002a55 	.word	0x08002a55
 8002a48:	08002a67 	.word	0x08002a67
 8002a4c:	08002a55 	.word	0x08002a55
 8002a50:	08002aeb 	.word	0x08002aeb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d046      	beq.n	8002aee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a64:	e043      	b.n	8002aee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a6e:	d140      	bne.n	8002af2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a74:	e03d      	b.n	8002af2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a7e:	d121      	bne.n	8002ac4 <DMA_CheckFifoParam+0xa8>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b03      	cmp	r3, #3
 8002a84:	d837      	bhi.n	8002af6 <DMA_CheckFifoParam+0xda>
 8002a86:	a201      	add	r2, pc, #4	; (adr r2, 8002a8c <DMA_CheckFifoParam+0x70>)
 8002a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8c:	08002a9d 	.word	0x08002a9d
 8002a90:	08002aa3 	.word	0x08002aa3
 8002a94:	08002a9d 	.word	0x08002a9d
 8002a98:	08002ab5 	.word	0x08002ab5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa0:	e030      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d025      	beq.n	8002afa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ab2:	e022      	b.n	8002afa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002abc:	d11f      	bne.n	8002afe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ac2:	e01c      	b.n	8002afe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d903      	bls.n	8002ad2 <DMA_CheckFifoParam+0xb6>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d003      	beq.n	8002ad8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ad0:	e018      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad6:	e015      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00e      	beq.n	8002b02 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae8:	e00b      	b.n	8002b02 <DMA_CheckFifoParam+0xe6>
      break;
 8002aea:	bf00      	nop
 8002aec:	e00a      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002aee:	bf00      	nop
 8002af0:	e008      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002af2:	bf00      	nop
 8002af4:	e006      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002af6:	bf00      	nop
 8002af8:	e004      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002afa:	bf00      	nop
 8002afc:	e002      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;   
 8002afe:	bf00      	nop
 8002b00:	e000      	b.n	8002b04 <DMA_CheckFifoParam+0xe8>
      break;
 8002b02:	bf00      	nop
    }
  } 
  
  return status; 
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop

08002b14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b089      	sub	sp, #36	; 0x24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
 8002b2e:	e16b      	b.n	8002e08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b30:	2201      	movs	r2, #1
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	fa02 f303 	lsl.w	r3, r2, r3
 8002b38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b44:	693a      	ldr	r2, [r7, #16]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	f040 815a 	bne.w	8002e02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d00b      	beq.n	8002b6e <HAL_GPIO_Init+0x5a>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d007      	beq.n	8002b6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b62:	2b11      	cmp	r3, #17
 8002b64:	d003      	beq.n	8002b6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b12      	cmp	r3, #18
 8002b6c:	d130      	bne.n	8002bd0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	2203      	movs	r2, #3
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	43db      	mvns	r3, r3
 8002b80:	69ba      	ldr	r2, [r7, #24]
 8002b82:	4013      	ands	r3, r2
 8002b84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	005b      	lsls	r3, r3, #1
 8002b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	69ba      	ldr	r2, [r7, #24]
 8002b9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 0201 	and.w	r2, r3, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	2203      	movs	r2, #3
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	005b      	lsls	r3, r3, #1
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d003      	beq.n	8002c10 <HAL_GPIO_Init+0xfc>
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b12      	cmp	r3, #18
 8002c0e:	d123      	bne.n	8002c58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	08da      	lsrs	r2, r3, #3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	3208      	adds	r2, #8
 8002c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	220f      	movs	r2, #15
 8002c28:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	69ba      	ldr	r2, [r7, #24]
 8002c30:	4013      	ands	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	fa02 f303 	lsl.w	r3, r2, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	08da      	lsrs	r2, r3, #3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	3208      	adds	r2, #8
 8002c52:	69b9      	ldr	r1, [r7, #24]
 8002c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0203 	and.w	r2, r3, #3
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80b4 	beq.w	8002e02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	4b60      	ldr	r3, [pc, #384]	; (8002e20 <HAL_GPIO_Init+0x30c>)
 8002ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ca2:	4a5f      	ldr	r2, [pc, #380]	; (8002e20 <HAL_GPIO_Init+0x30c>)
 8002ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8002caa:	4b5d      	ldr	r3, [pc, #372]	; (8002e20 <HAL_GPIO_Init+0x30c>)
 8002cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb2:	60fb      	str	r3, [r7, #12]
 8002cb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cb6:	4a5b      	ldr	r2, [pc, #364]	; (8002e24 <HAL_GPIO_Init+0x310>)
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	089b      	lsrs	r3, r3, #2
 8002cbc:	3302      	adds	r3, #2
 8002cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0303 	and.w	r3, r3, #3
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	220f      	movs	r2, #15
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <HAL_GPIO_Init+0x314>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d02b      	beq.n	8002d3a <HAL_GPIO_Init+0x226>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a51      	ldr	r2, [pc, #324]	; (8002e2c <HAL_GPIO_Init+0x318>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d025      	beq.n	8002d36 <HAL_GPIO_Init+0x222>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a50      	ldr	r2, [pc, #320]	; (8002e30 <HAL_GPIO_Init+0x31c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01f      	beq.n	8002d32 <HAL_GPIO_Init+0x21e>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a4f      	ldr	r2, [pc, #316]	; (8002e34 <HAL_GPIO_Init+0x320>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d019      	beq.n	8002d2e <HAL_GPIO_Init+0x21a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a4e      	ldr	r2, [pc, #312]	; (8002e38 <HAL_GPIO_Init+0x324>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d013      	beq.n	8002d2a <HAL_GPIO_Init+0x216>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a4d      	ldr	r2, [pc, #308]	; (8002e3c <HAL_GPIO_Init+0x328>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d00d      	beq.n	8002d26 <HAL_GPIO_Init+0x212>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a4c      	ldr	r2, [pc, #304]	; (8002e40 <HAL_GPIO_Init+0x32c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d007      	beq.n	8002d22 <HAL_GPIO_Init+0x20e>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a4b      	ldr	r2, [pc, #300]	; (8002e44 <HAL_GPIO_Init+0x330>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d101      	bne.n	8002d1e <HAL_GPIO_Init+0x20a>
 8002d1a:	2307      	movs	r3, #7
 8002d1c:	e00e      	b.n	8002d3c <HAL_GPIO_Init+0x228>
 8002d1e:	2308      	movs	r3, #8
 8002d20:	e00c      	b.n	8002d3c <HAL_GPIO_Init+0x228>
 8002d22:	2306      	movs	r3, #6
 8002d24:	e00a      	b.n	8002d3c <HAL_GPIO_Init+0x228>
 8002d26:	2305      	movs	r3, #5
 8002d28:	e008      	b.n	8002d3c <HAL_GPIO_Init+0x228>
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	e006      	b.n	8002d3c <HAL_GPIO_Init+0x228>
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e004      	b.n	8002d3c <HAL_GPIO_Init+0x228>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e002      	b.n	8002d3c <HAL_GPIO_Init+0x228>
 8002d36:	2301      	movs	r3, #1
 8002d38:	e000      	b.n	8002d3c <HAL_GPIO_Init+0x228>
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	69fa      	ldr	r2, [r7, #28]
 8002d3e:	f002 0203 	and.w	r2, r2, #3
 8002d42:	0092      	lsls	r2, r2, #2
 8002d44:	4093      	lsls	r3, r2
 8002d46:	69ba      	ldr	r2, [r7, #24]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d4c:	4935      	ldr	r1, [pc, #212]	; (8002e24 <HAL_GPIO_Init+0x310>)
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	089b      	lsrs	r3, r3, #2
 8002d52:	3302      	adds	r3, #2
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d5a:	4b3b      	ldr	r3, [pc, #236]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d7e:	4a32      	ldr	r2, [pc, #200]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d84:	4b30      	ldr	r3, [pc, #192]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4313      	orrs	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002da8:	4a27      	ldr	r2, [pc, #156]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dae:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	43db      	mvns	r3, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002dca:	69ba      	ldr	r2, [r7, #24]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dd2:	4a1d      	ldr	r2, [pc, #116]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	43db      	mvns	r3, r3
 8002de2:	69ba      	ldr	r2, [r7, #24]
 8002de4:	4013      	ands	r3, r2
 8002de6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002dfc:	4a12      	ldr	r2, [pc, #72]	; (8002e48 <HAL_GPIO_Init+0x334>)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e02:	69fb      	ldr	r3, [r7, #28]
 8002e04:	3301      	adds	r3, #1
 8002e06:	61fb      	str	r3, [r7, #28]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2b0f      	cmp	r3, #15
 8002e0c:	f67f ae90 	bls.w	8002b30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e10:	bf00      	nop
 8002e12:	bf00      	nop
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40013800 	.word	0x40013800
 8002e28:	40020000 	.word	0x40020000
 8002e2c:	40020400 	.word	0x40020400
 8002e30:	40020800 	.word	0x40020800
 8002e34:	40020c00 	.word	0x40020c00
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	40021400 	.word	0x40021400
 8002e40:	40021800 	.word	0x40021800
 8002e44:	40021c00 	.word	0x40021c00
 8002e48:	40013c00 	.word	0x40013c00

08002e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	887b      	ldrh	r3, [r7, #2]
 8002e5e:	4013      	ands	r3, r2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d002      	beq.n	8002e6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e64:	2301      	movs	r3, #1
 8002e66:	73fb      	strb	r3, [r7, #15]
 8002e68:	e001      	b.n	8002e6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e12b      	b.n	80030e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d106      	bne.n	8002ea8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f7fe ff4e 	bl	8001d44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2224      	movs	r2, #36	; 0x24
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f022 0201 	bic.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ece:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ede:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ee0:	f001 fb78 	bl	80045d4 <HAL_RCC_GetPCLK1Freq>
 8002ee4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	4a81      	ldr	r2, [pc, #516]	; (80030f0 <HAL_I2C_Init+0x274>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d807      	bhi.n	8002f00 <HAL_I2C_Init+0x84>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	4a80      	ldr	r2, [pc, #512]	; (80030f4 <HAL_I2C_Init+0x278>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	bf94      	ite	ls
 8002ef8:	2301      	movls	r3, #1
 8002efa:	2300      	movhi	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	e006      	b.n	8002f0e <HAL_I2C_Init+0x92>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a7d      	ldr	r2, [pc, #500]	; (80030f8 <HAL_I2C_Init+0x27c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	bf94      	ite	ls
 8002f08:	2301      	movls	r3, #1
 8002f0a:	2300      	movhi	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e0e7      	b.n	80030e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4a78      	ldr	r2, [pc, #480]	; (80030fc <HAL_I2C_Init+0x280>)
 8002f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1e:	0c9b      	lsrs	r3, r3, #18
 8002f20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	4a6a      	ldr	r2, [pc, #424]	; (80030f0 <HAL_I2C_Init+0x274>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d802      	bhi.n	8002f50 <HAL_I2C_Init+0xd4>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	3301      	adds	r3, #1
 8002f4e:	e009      	b.n	8002f64 <HAL_I2C_Init+0xe8>
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	4a69      	ldr	r2, [pc, #420]	; (8003100 <HAL_I2C_Init+0x284>)
 8002f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f60:	099b      	lsrs	r3, r3, #6
 8002f62:	3301      	adds	r3, #1
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	69db      	ldr	r3, [r3, #28]
 8002f72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	495c      	ldr	r1, [pc, #368]	; (80030f0 <HAL_I2C_Init+0x274>)
 8002f80:	428b      	cmp	r3, r1
 8002f82:	d819      	bhi.n	8002fb8 <HAL_I2C_Init+0x13c>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1e59      	subs	r1, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f92:	1c59      	adds	r1, r3, #1
 8002f94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f98:	400b      	ands	r3, r1
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_I2C_Init+0x138>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1e59      	subs	r1, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb2:	e051      	b.n	8003058 <HAL_I2C_Init+0x1dc>
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	e04f      	b.n	8003058 <HAL_I2C_Init+0x1dc>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d111      	bne.n	8002fe4 <HAL_I2C_Init+0x168>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1e58      	subs	r0, r3, #1
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6859      	ldr	r1, [r3, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	005b      	lsls	r3, r3, #1
 8002fcc:	440b      	add	r3, r1
 8002fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e012      	b.n	800300a <HAL_I2C_Init+0x18e>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1e58      	subs	r0, r3, #1
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6859      	ldr	r1, [r3, #4]
 8002fec:	460b      	mov	r3, r1
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	440b      	add	r3, r1
 8002ff2:	0099      	lsls	r1, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003000:	2b00      	cmp	r3, #0
 8003002:	bf0c      	ite	eq
 8003004:	2301      	moveq	r3, #1
 8003006:	2300      	movne	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_I2C_Init+0x196>
 800300e:	2301      	movs	r3, #1
 8003010:	e022      	b.n	8003058 <HAL_I2C_Init+0x1dc>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10e      	bne.n	8003038 <HAL_I2C_Init+0x1bc>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1e58      	subs	r0, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6859      	ldr	r1, [r3, #4]
 8003022:	460b      	mov	r3, r1
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	440b      	add	r3, r1
 8003028:	fbb0 f3f3 	udiv	r3, r0, r3
 800302c:	3301      	adds	r3, #1
 800302e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003032:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003036:	e00f      	b.n	8003058 <HAL_I2C_Init+0x1dc>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	1e58      	subs	r0, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6859      	ldr	r1, [r3, #4]
 8003040:	460b      	mov	r3, r1
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	440b      	add	r3, r1
 8003046:	0099      	lsls	r1, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	fbb0 f3f3 	udiv	r3, r0, r3
 800304e:	3301      	adds	r3, #1
 8003050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003054:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	6809      	ldr	r1, [r1, #0]
 800305c:	4313      	orrs	r3, r2
 800305e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003086:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6911      	ldr	r1, [r2, #16]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68d2      	ldr	r2, [r2, #12]
 8003092:	4311      	orrs	r1, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	430b      	orrs	r3, r1
 800309a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	695a      	ldr	r2, [r3, #20]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0201 	orr.w	r2, r2, #1
 80030c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2220      	movs	r2, #32
 80030d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	000186a0 	.word	0x000186a0
 80030f4:	001e847f 	.word	0x001e847f
 80030f8:	003d08ff 	.word	0x003d08ff
 80030fc:	431bde83 	.word	0x431bde83
 8003100:	10624dd3 	.word	0x10624dd3

08003104 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af02      	add	r7, sp, #8
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	607a      	str	r2, [r7, #4]
 800310e:	461a      	mov	r2, r3
 8003110:	460b      	mov	r3, r1
 8003112:	817b      	strh	r3, [r7, #10]
 8003114:	4613      	mov	r3, r2
 8003116:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003118:	f7fe ffe8 	bl	80020ec <HAL_GetTick>
 800311c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b20      	cmp	r3, #32
 8003128:	f040 80e0 	bne.w	80032ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	2319      	movs	r3, #25
 8003132:	2201      	movs	r2, #1
 8003134:	4970      	ldr	r1, [pc, #448]	; (80032f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 fc56 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d001      	beq.n	8003146 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003142:	2302      	movs	r3, #2
 8003144:	e0d3      	b.n	80032ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_I2C_Master_Transmit+0x50>
 8003150:	2302      	movs	r3, #2
 8003152:	e0cc      	b.n	80032ee <HAL_I2C_Master_Transmit+0x1ea>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b01      	cmp	r3, #1
 8003168:	d007      	beq.n	800317a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0201 	orr.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003188:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2221      	movs	r2, #33	; 0x21
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2210      	movs	r2, #16
 8003196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	893a      	ldrh	r2, [r7, #8]
 80031aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	4a50      	ldr	r2, [pc, #320]	; (80032fc <HAL_I2C_Master_Transmit+0x1f8>)
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80031bc:	8979      	ldrh	r1, [r7, #10]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f000 fac2 	bl	800374c <I2C_MasterRequestWrite>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d001      	beq.n	80031d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e08d      	b.n	80032ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031d2:	2300      	movs	r3, #0
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695b      	ldr	r3, [r3, #20]
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80031e8:	e066      	b.n	80032b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ea:	697a      	ldr	r2, [r7, #20]
 80031ec:	6a39      	ldr	r1, [r7, #32]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fcd0 	bl	8003b94 <I2C_WaitOnTXEFlagUntilTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00d      	beq.n	8003216 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d107      	bne.n	8003212 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003210:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e06b      	b.n	80032ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	781a      	ldrb	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003226:	1c5a      	adds	r2, r3, #1
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323e:	3b01      	subs	r3, #1
 8003240:	b29a      	uxth	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b04      	cmp	r3, #4
 8003252:	d11b      	bne.n	800328c <HAL_I2C_Master_Transmit+0x188>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003258:	2b00      	cmp	r3, #0
 800325a:	d017      	beq.n	800328c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	781a      	ldrb	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	1c5a      	adds	r2, r3, #1
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003276:	b29b      	uxth	r3, r3
 8003278:	3b01      	subs	r3, #1
 800327a:	b29a      	uxth	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	6a39      	ldr	r1, [r7, #32]
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fcc0 	bl	8003c16 <I2C_WaitOnBTFFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00d      	beq.n	80032b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	2b04      	cmp	r3, #4
 80032a2:	d107      	bne.n	80032b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e01a      	b.n	80032ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d194      	bne.n	80031ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2200      	movs	r2, #0
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	e000      	b.n	80032ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80032ec:	2302      	movs	r3, #2
  }
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	00100002 	.word	0x00100002
 80032fc:	ffff0000 	.word	0xffff0000

08003300 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08c      	sub	sp, #48	; 0x30
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	607a      	str	r2, [r7, #4]
 800330a:	461a      	mov	r2, r3
 800330c:	460b      	mov	r3, r1
 800330e:	817b      	strh	r3, [r7, #10]
 8003310:	4613      	mov	r3, r2
 8003312:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003314:	f7fe feea 	bl	80020ec <HAL_GetTick>
 8003318:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b20      	cmp	r3, #32
 8003324:	f040 820b 	bne.w	800373e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	9300      	str	r3, [sp, #0]
 800332c:	2319      	movs	r3, #25
 800332e:	2201      	movs	r2, #1
 8003330:	497c      	ldr	r1, [pc, #496]	; (8003524 <HAL_I2C_Master_Receive+0x224>)
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fb58 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800333e:	2302      	movs	r3, #2
 8003340:	e1fe      	b.n	8003740 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_I2C_Master_Receive+0x50>
 800334c:	2302      	movs	r3, #2
 800334e:	e1f7      	b.n	8003740 <HAL_I2C_Master_Receive+0x440>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d007      	beq.n	8003376 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f042 0201 	orr.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003384:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2222      	movs	r2, #34	; 0x22
 800338a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2210      	movs	r2, #16
 8003392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	893a      	ldrh	r2, [r7, #8]
 80033a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033ac:	b29a      	uxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	4a5c      	ldr	r2, [pc, #368]	; (8003528 <HAL_I2C_Master_Receive+0x228>)
 80033b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033b8:	8979      	ldrh	r1, [r7, #10]
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033be:	68f8      	ldr	r0, [r7, #12]
 80033c0:	f000 fa46 	bl	8003850 <I2C_MasterRequestRead>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e1b8      	b.n	8003740 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d113      	bne.n	80033fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033d6:	2300      	movs	r3, #0
 80033d8:	623b      	str	r3, [r7, #32]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	623b      	str	r3, [r7, #32]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	623b      	str	r3, [r7, #32]
 80033ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e18c      	b.n	8003718 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003402:	2b01      	cmp	r3, #1
 8003404:	d11b      	bne.n	800343e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003414:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	695b      	ldr	r3, [r3, #20]
 8003420:	61fb      	str	r3, [r7, #28]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	61fb      	str	r3, [r7, #28]
 800342a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	e16c      	b.n	8003718 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003442:	2b02      	cmp	r3, #2
 8003444:	d11b      	bne.n	800347e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003454:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003464:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003466:	2300      	movs	r3, #0
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	61bb      	str	r3, [r7, #24]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	61bb      	str	r3, [r7, #24]
 800347a:	69bb      	ldr	r3, [r7, #24]
 800347c:	e14c      	b.n	8003718 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800348c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	617b      	str	r3, [r7, #20]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80034a4:	e138      	b.n	8003718 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	f200 80f1 	bhi.w	8003692 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d123      	bne.n	8003500 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 fbeb 	bl	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout>
 80034c2:	4603      	mov	r3, r0
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e139      	b.n	8003740 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	691a      	ldr	r2, [r3, #16]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	b2d2      	uxtb	r2, r2
 80034d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e8:	3b01      	subs	r3, #1
 80034ea:	b29a      	uxth	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f4:	b29b      	uxth	r3, r3
 80034f6:	3b01      	subs	r3, #1
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034fe:	e10b      	b.n	8003718 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003504:	2b02      	cmp	r3, #2
 8003506:	d14e      	bne.n	80035a6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350a:	9300      	str	r3, [sp, #0]
 800350c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800350e:	2200      	movs	r2, #0
 8003510:	4906      	ldr	r1, [pc, #24]	; (800352c <HAL_I2C_Master_Receive+0x22c>)
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 fa68 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e10e      	b.n	8003740 <HAL_I2C_Master_Receive+0x440>
 8003522:	bf00      	nop
 8003524:	00100002 	.word	0x00100002
 8003528:	ffff0000 	.word	0xffff0000
 800352c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800353e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	691a      	ldr	r2, [r3, #16]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355c:	3b01      	subs	r3, #1
 800355e:	b29a      	uxth	r2, r3
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003568:	b29b      	uxth	r3, r3
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	691a      	ldr	r2, [r3, #16]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359a:	b29b      	uxth	r3, r3
 800359c:	3b01      	subs	r3, #1
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80035a4:	e0b8      	b.n	8003718 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ac:	2200      	movs	r2, #0
 80035ae:	4966      	ldr	r1, [pc, #408]	; (8003748 <HAL_I2C_Master_Receive+0x448>)
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f000 fa19 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 80035b6:	4603      	mov	r3, r0
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e0bf      	b.n	8003740 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035da:	b2d2      	uxtb	r2, r2
 80035dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003604:	9300      	str	r3, [sp, #0]
 8003606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003608:	2200      	movs	r2, #0
 800360a:	494f      	ldr	r1, [pc, #316]	; (8003748 <HAL_I2C_Master_Receive+0x448>)
 800360c:	68f8      	ldr	r0, [r7, #12]
 800360e:	f000 f9eb 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 8003612:	4603      	mov	r3, r0
 8003614:	2b00      	cmp	r3, #0
 8003616:	d001      	beq.n	800361c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e091      	b.n	8003740 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800362a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	691a      	ldr	r2, [r3, #16]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367a:	3b01      	subs	r3, #1
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003686:	b29b      	uxth	r3, r3
 8003688:	3b01      	subs	r3, #1
 800368a:	b29a      	uxth	r2, r3
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003690:	e042      	b.n	8003718 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003694:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 fafe 	bl	8003c98 <I2C_WaitOnRXNEFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e04c      	b.n	8003740 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	691a      	ldr	r2, [r3, #16]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	b2d2      	uxtb	r2, r2
 80036b2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f003 0304 	and.w	r3, r3, #4
 80036e2:	2b04      	cmp	r3, #4
 80036e4:	d118      	bne.n	8003718 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003702:	3b01      	subs	r3, #1
 8003704:	b29a      	uxth	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	3b01      	subs	r3, #1
 8003712:	b29a      	uxth	r2, r3
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371c:	2b00      	cmp	r3, #0
 800371e:	f47f aec2 	bne.w	80034a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2220      	movs	r2, #32
 8003726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	e000      	b.n	8003740 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
  }
}
 8003740:	4618      	mov	r0, r3
 8003742:	3728      	adds	r7, #40	; 0x28
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	00010004 	.word	0x00010004

0800374c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	460b      	mov	r3, r1
 800375a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b08      	cmp	r3, #8
 8003766:	d006      	beq.n	8003776 <I2C_MasterRequestWrite+0x2a>
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	2b01      	cmp	r3, #1
 800376c:	d003      	beq.n	8003776 <I2C_MasterRequestWrite+0x2a>
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003774:	d108      	bne.n	8003788 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	e00b      	b.n	80037a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	2b12      	cmp	r3, #18
 800378e:	d107      	bne.n	80037a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800379e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	9300      	str	r3, [sp, #0]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 f91b 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00c      	beq.n	80037d2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d003      	beq.n	80037ce <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037cc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e035      	b.n	800383e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037da:	d108      	bne.n	80037ee <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037dc:	897b      	ldrh	r3, [r7, #10]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037ea:	611a      	str	r2, [r3, #16]
 80037ec:	e01b      	b.n	8003826 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037ee:	897b      	ldrh	r3, [r7, #10]
 80037f0:	11db      	asrs	r3, r3, #7
 80037f2:	b2db      	uxtb	r3, r3
 80037f4:	f003 0306 	and.w	r3, r3, #6
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	f063 030f 	orn	r3, r3, #15
 80037fe:	b2da      	uxtb	r2, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	490f      	ldr	r1, [pc, #60]	; (8003848 <I2C_MasterRequestWrite+0xfc>)
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f942 	bl	8003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e010      	b.n	800383e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800381c:	897b      	ldrh	r3, [r7, #10]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	4908      	ldr	r1, [pc, #32]	; (800384c <I2C_MasterRequestWrite+0x100>)
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f932 	bl	8003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	00010008 	.word	0x00010008
 800384c:	00010002 	.word	0x00010002

08003850 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af02      	add	r7, sp, #8
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	607a      	str	r2, [r7, #4]
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	460b      	mov	r3, r1
 800385e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003874:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2b08      	cmp	r3, #8
 800387a:	d006      	beq.n	800388a <I2C_MasterRequestRead+0x3a>
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d003      	beq.n	800388a <I2C_MasterRequestRead+0x3a>
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003888:	d108      	bne.n	800389c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	e00b      	b.n	80038b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a0:	2b11      	cmp	r3, #17
 80038a2:	d107      	bne.n	80038b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038c0:	68f8      	ldr	r0, [r7, #12]
 80038c2:	f000 f891 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00c      	beq.n	80038e6 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e078      	b.n	80039d8 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038ee:	d108      	bne.n	8003902 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038f0:	897b      	ldrh	r3, [r7, #10]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	611a      	str	r2, [r3, #16]
 8003900:	e05e      	b.n	80039c0 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003902:	897b      	ldrh	r3, [r7, #10]
 8003904:	11db      	asrs	r3, r3, #7
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f003 0306 	and.w	r3, r3, #6
 800390c:	b2db      	uxtb	r3, r3
 800390e:	f063 030f 	orn	r3, r3, #15
 8003912:	b2da      	uxtb	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4930      	ldr	r1, [pc, #192]	; (80039e0 <I2C_MasterRequestRead+0x190>)
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f000 f8b8 	bl	8003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e053      	b.n	80039d8 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003930:	897b      	ldrh	r3, [r7, #10]
 8003932:	b2da      	uxtb	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	4929      	ldr	r1, [pc, #164]	; (80039e4 <I2C_MasterRequestRead+0x194>)
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 f8a8 	bl	8003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e043      	b.n	80039d8 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003950:	2300      	movs	r3, #0
 8003952:	613b      	str	r3, [r7, #16]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	699b      	ldr	r3, [r3, #24]
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003974:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003982:	68f8      	ldr	r0, [r7, #12]
 8003984:	f000 f830 	bl	80039e8 <I2C_WaitOnFlagUntilTimeout>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d00c      	beq.n	80039a8 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e017      	b.n	80039d8 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80039a8:	897b      	ldrh	r3, [r7, #10]
 80039aa:	11db      	asrs	r3, r3, #7
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	f003 0306 	and.w	r3, r3, #6
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	f063 030e 	orn	r3, r3, #14
 80039b8:	b2da      	uxtb	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	4907      	ldr	r1, [pc, #28]	; (80039e4 <I2C_MasterRequestRead+0x194>)
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 f865 	bl	8003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d001      	beq.n	80039d6 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3718      	adds	r7, #24
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	00010008 	.word	0x00010008
 80039e4:	00010002 	.word	0x00010002

080039e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80039f8:	e025      	b.n	8003a46 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d021      	beq.n	8003a46 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a02:	f7fe fb73 	bl	80020ec <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d302      	bcc.n	8003a18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d116      	bne.n	8003a46 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	f043 0220 	orr.w	r2, r3, #32
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e023      	b.n	8003a8e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	0c1b      	lsrs	r3, r3, #16
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d10d      	bne.n	8003a6c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	43da      	mvns	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	bf0c      	ite	eq
 8003a62:	2301      	moveq	r3, #1
 8003a64:	2300      	movne	r3, #0
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	e00c      	b.n	8003a86 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	43da      	mvns	r2, r3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	4013      	ands	r3, r2
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	bf0c      	ite	eq
 8003a7e:	2301      	moveq	r3, #1
 8003a80:	2300      	movne	r3, #0
 8003a82:	b2db      	uxtb	r3, r3
 8003a84:	461a      	mov	r2, r3
 8003a86:	79fb      	ldrb	r3, [r7, #7]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d0b6      	beq.n	80039fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b084      	sub	sp, #16
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	60f8      	str	r0, [r7, #12]
 8003a9e:	60b9      	str	r1, [r7, #8]
 8003aa0:	607a      	str	r2, [r7, #4]
 8003aa2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003aa4:	e051      	b.n	8003b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab4:	d123      	bne.n	8003afe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ace:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2220      	movs	r2, #32
 8003ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f043 0204 	orr.w	r2, r3, #4
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e046      	b.n	8003b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b04:	d021      	beq.n	8003b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b06:	f7fe faf1 	bl	80020ec <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d302      	bcc.n	8003b1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d116      	bne.n	8003b4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f043 0220 	orr.w	r2, r3, #32
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e020      	b.n	8003b8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	0c1b      	lsrs	r3, r3, #16
 8003b4e:	b2db      	uxtb	r3, r3
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d10c      	bne.n	8003b6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	43da      	mvns	r2, r3
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	bf14      	ite	ne
 8003b66:	2301      	movne	r3, #1
 8003b68:	2300      	moveq	r3, #0
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	e00b      	b.n	8003b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	43da      	mvns	r2, r3
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	bf14      	ite	ne
 8003b80:	2301      	movne	r3, #1
 8003b82:	2300      	moveq	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d18d      	bne.n	8003aa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3710      	adds	r7, #16
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ba0:	e02d      	b.n	8003bfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f000 f8ce 	bl	8003d44 <I2C_IsAcknowledgeFailed>
 8003ba8:	4603      	mov	r3, r0
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d001      	beq.n	8003bb2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e02d      	b.n	8003c0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb8:	d021      	beq.n	8003bfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bba:	f7fe fa97 	bl	80020ec <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d302      	bcc.n	8003bd0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d116      	bne.n	8003bfe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f043 0220 	orr.w	r2, r3, #32
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e007      	b.n	8003c0e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c08:	2b80      	cmp	r3, #128	; 0x80
 8003c0a:	d1ca      	bne.n	8003ba2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3710      	adds	r7, #16
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c22:	e02d      	b.n	8003c80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f88d 	bl	8003d44 <I2C_IsAcknowledgeFailed>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d001      	beq.n	8003c34 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e02d      	b.n	8003c90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3a:	d021      	beq.n	8003c80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c3c:	f7fe fa56 	bl	80020ec <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	68ba      	ldr	r2, [r7, #8]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d302      	bcc.n	8003c52 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d116      	bne.n	8003c80 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2200      	movs	r2, #0
 8003c56:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	f043 0220 	orr.w	r2, r3, #32
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e007      	b.n	8003c90 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d1ca      	bne.n	8003c24 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ca4:	e042      	b.n	8003d2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695b      	ldr	r3, [r3, #20]
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b10      	cmp	r3, #16
 8003cb2:	d119      	bne.n	8003ce8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f06f 0210 	mvn.w	r2, #16
 8003cbc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e029      	b.n	8003d3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce8:	f7fe fa00 	bl	80020ec <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d302      	bcc.n	8003cfe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d116      	bne.n	8003d2c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2220      	movs	r2, #32
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	f043 0220 	orr.w	r2, r3, #32
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e007      	b.n	8003d3c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d1b5      	bne.n	8003ca6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]

	if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d5a:	d11b      	bne.n	8003d94 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d64:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	f043 0204 	orr.w	r2, r3, #4
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003d94:	2300      	movs	r3, #0
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
	...

08003da4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e25b      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d075      	beq.n	8003eae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dc2:	4ba3      	ldr	r3, [pc, #652]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	2b04      	cmp	r3, #4
 8003dcc:	d00c      	beq.n	8003de8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dce:	4ba0      	ldr	r3, [pc, #640]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dd6:	2b08      	cmp	r3, #8
 8003dd8:	d112      	bne.n	8003e00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dda:	4b9d      	ldr	r3, [pc, #628]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003de6:	d10b      	bne.n	8003e00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de8:	4b99      	ldr	r3, [pc, #612]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d05b      	beq.n	8003eac <HAL_RCC_OscConfig+0x108>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d157      	bne.n	8003eac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e236      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e08:	d106      	bne.n	8003e18 <HAL_RCC_OscConfig+0x74>
 8003e0a:	4b91      	ldr	r3, [pc, #580]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a90      	ldr	r2, [pc, #576]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	e01d      	b.n	8003e54 <HAL_RCC_OscConfig+0xb0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e20:	d10c      	bne.n	8003e3c <HAL_RCC_OscConfig+0x98>
 8003e22:	4b8b      	ldr	r3, [pc, #556]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a8a      	ldr	r2, [pc, #552]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e2c:	6013      	str	r3, [r2, #0]
 8003e2e:	4b88      	ldr	r3, [pc, #544]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a87      	ldr	r2, [pc, #540]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	e00b      	b.n	8003e54 <HAL_RCC_OscConfig+0xb0>
 8003e3c:	4b84      	ldr	r3, [pc, #528]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a83      	ldr	r2, [pc, #524]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e46:	6013      	str	r3, [r2, #0]
 8003e48:	4b81      	ldr	r3, [pc, #516]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a80      	ldr	r2, [pc, #512]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d013      	beq.n	8003e84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e5c:	f7fe f946 	bl	80020ec <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e64:	f7fe f942 	bl	80020ec <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b64      	cmp	r3, #100	; 0x64
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e1fb      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e76:	4b76      	ldr	r3, [pc, #472]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <HAL_RCC_OscConfig+0xc0>
 8003e82:	e014      	b.n	8003eae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e84:	f7fe f932 	bl	80020ec <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e8c:	f7fe f92e 	bl	80020ec <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b64      	cmp	r3, #100	; 0x64
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e1e7      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9e:	4b6c      	ldr	r3, [pc, #432]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0xe8>
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d063      	beq.n	8003f82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eba:	4b65      	ldr	r3, [pc, #404]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 030c 	and.w	r3, r3, #12
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00b      	beq.n	8003ede <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ec6:	4b62      	ldr	r3, [pc, #392]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ece:	2b08      	cmp	r3, #8
 8003ed0:	d11c      	bne.n	8003f0c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed2:	4b5f      	ldr	r3, [pc, #380]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d116      	bne.n	8003f0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ede:	4b5c      	ldr	r3, [pc, #368]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d005      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x152>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d001      	beq.n	8003ef6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e1bb      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef6:	4b56      	ldr	r3, [pc, #344]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	00db      	lsls	r3, r3, #3
 8003f04:	4952      	ldr	r1, [pc, #328]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f0a:	e03a      	b.n	8003f82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d020      	beq.n	8003f56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f14:	4b4f      	ldr	r3, [pc, #316]	; (8004054 <HAL_RCC_OscConfig+0x2b0>)
 8003f16:	2201      	movs	r2, #1
 8003f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f1a:	f7fe f8e7 	bl	80020ec <HAL_GetTick>
 8003f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f20:	e008      	b.n	8003f34 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f22:	f7fe f8e3 	bl	80020ec <HAL_GetTick>
 8003f26:	4602      	mov	r2, r0
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	1ad3      	subs	r3, r2, r3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d901      	bls.n	8003f34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f30:	2303      	movs	r3, #3
 8003f32:	e19c      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f34:	4b46      	ldr	r3, [pc, #280]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0f0      	beq.n	8003f22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f40:	4b43      	ldr	r3, [pc, #268]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	4940      	ldr	r1, [pc, #256]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003f50:	4313      	orrs	r3, r2
 8003f52:	600b      	str	r3, [r1, #0]
 8003f54:	e015      	b.n	8003f82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f56:	4b3f      	ldr	r3, [pc, #252]	; (8004054 <HAL_RCC_OscConfig+0x2b0>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5c:	f7fe f8c6 	bl	80020ec <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f64:	f7fe f8c2 	bl	80020ec <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e17b      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f76:	4b36      	ldr	r3, [pc, #216]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d030      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d016      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f96:	4b30      	ldr	r3, [pc, #192]	; (8004058 <HAL_RCC_OscConfig+0x2b4>)
 8003f98:	2201      	movs	r2, #1
 8003f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f9c:	f7fe f8a6 	bl	80020ec <HAL_GetTick>
 8003fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fa2:	e008      	b.n	8003fb6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa4:	f7fe f8a2 	bl	80020ec <HAL_GetTick>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	1ad3      	subs	r3, r2, r3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d901      	bls.n	8003fb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fb2:	2303      	movs	r3, #3
 8003fb4:	e15b      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb6:	4b26      	ldr	r3, [pc, #152]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fba:	f003 0302 	and.w	r3, r3, #2
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d0f0      	beq.n	8003fa4 <HAL_RCC_OscConfig+0x200>
 8003fc2:	e015      	b.n	8003ff0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc4:	4b24      	ldr	r3, [pc, #144]	; (8004058 <HAL_RCC_OscConfig+0x2b4>)
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fca:	f7fe f88f 	bl	80020ec <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fd2:	f7fe f88b 	bl	80020ec <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e144      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe4:	4b1a      	ldr	r3, [pc, #104]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8003fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f0      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 80a0 	beq.w	800413e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ffe:	2300      	movs	r3, #0
 8004000:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004002:	4b13      	ldr	r3, [pc, #76]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10f      	bne.n	800402e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	60bb      	str	r3, [r7, #8]
 8004012:	4b0f      	ldr	r3, [pc, #60]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	4a0e      	ldr	r2, [pc, #56]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8004018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401c:	6413      	str	r3, [r2, #64]	; 0x40
 800401e:	4b0c      	ldr	r3, [pc, #48]	; (8004050 <HAL_RCC_OscConfig+0x2ac>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004026:	60bb      	str	r3, [r7, #8]
 8004028:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800402a:	2301      	movs	r3, #1
 800402c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800402e:	4b0b      	ldr	r3, [pc, #44]	; (800405c <HAL_RCC_OscConfig+0x2b8>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d121      	bne.n	800407e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800403a:	4b08      	ldr	r3, [pc, #32]	; (800405c <HAL_RCC_OscConfig+0x2b8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a07      	ldr	r2, [pc, #28]	; (800405c <HAL_RCC_OscConfig+0x2b8>)
 8004040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004044:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004046:	f7fe f851 	bl	80020ec <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404c:	e011      	b.n	8004072 <HAL_RCC_OscConfig+0x2ce>
 800404e:	bf00      	nop
 8004050:	40023800 	.word	0x40023800
 8004054:	42470000 	.word	0x42470000
 8004058:	42470e80 	.word	0x42470e80
 800405c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004060:	f7fe f844 	bl	80020ec <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e0fd      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004072:	4b81      	ldr	r3, [pc, #516]	; (8004278 <HAL_RCC_OscConfig+0x4d4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b01      	cmp	r3, #1
 8004084:	d106      	bne.n	8004094 <HAL_RCC_OscConfig+0x2f0>
 8004086:	4b7d      	ldr	r3, [pc, #500]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	4a7c      	ldr	r2, [pc, #496]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 800408c:	f043 0301 	orr.w	r3, r3, #1
 8004090:	6713      	str	r3, [r2, #112]	; 0x70
 8004092:	e01c      	b.n	80040ce <HAL_RCC_OscConfig+0x32a>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b05      	cmp	r3, #5
 800409a:	d10c      	bne.n	80040b6 <HAL_RCC_OscConfig+0x312>
 800409c:	4b77      	ldr	r3, [pc, #476]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a0:	4a76      	ldr	r2, [pc, #472]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80040a2:	f043 0304 	orr.w	r3, r3, #4
 80040a6:	6713      	str	r3, [r2, #112]	; 0x70
 80040a8:	4b74      	ldr	r3, [pc, #464]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80040aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ac:	4a73      	ldr	r2, [pc, #460]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80040ae:	f043 0301 	orr.w	r3, r3, #1
 80040b2:	6713      	str	r3, [r2, #112]	; 0x70
 80040b4:	e00b      	b.n	80040ce <HAL_RCC_OscConfig+0x32a>
 80040b6:	4b71      	ldr	r3, [pc, #452]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80040b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ba:	4a70      	ldr	r2, [pc, #448]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80040bc:	f023 0301 	bic.w	r3, r3, #1
 80040c0:	6713      	str	r3, [r2, #112]	; 0x70
 80040c2:	4b6e      	ldr	r3, [pc, #440]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80040c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c6:	4a6d      	ldr	r2, [pc, #436]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80040c8:	f023 0304 	bic.w	r3, r3, #4
 80040cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d015      	beq.n	8004102 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040d6:	f7fe f809 	bl	80020ec <HAL_GetTick>
 80040da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040dc:	e00a      	b.n	80040f4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040de:	f7fe f805 	bl	80020ec <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e0bc      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f4:	4b61      	ldr	r3, [pc, #388]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80040f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d0ee      	beq.n	80040de <HAL_RCC_OscConfig+0x33a>
 8004100:	e014      	b.n	800412c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004102:	f7fd fff3 	bl	80020ec <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004108:	e00a      	b.n	8004120 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800410a:	f7fd ffef 	bl	80020ec <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	f241 3288 	movw	r2, #5000	; 0x1388
 8004118:	4293      	cmp	r3, r2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e0a6      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004120:	4b56      	ldr	r3, [pc, #344]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 8004122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1ee      	bne.n	800410a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800412c:	7dfb      	ldrb	r3, [r7, #23]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d105      	bne.n	800413e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004132:	4b52      	ldr	r3, [pc, #328]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	4a51      	ldr	r2, [pc, #324]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 8004138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800413c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 8092 	beq.w	800426c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004148:	4b4c      	ldr	r3, [pc, #304]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 030c 	and.w	r3, r3, #12
 8004150:	2b08      	cmp	r3, #8
 8004152:	d05c      	beq.n	800420e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b02      	cmp	r3, #2
 800415a:	d141      	bne.n	80041e0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800415c:	4b48      	ldr	r3, [pc, #288]	; (8004280 <HAL_RCC_OscConfig+0x4dc>)
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004162:	f7fd ffc3 	bl	80020ec <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800416a:	f7fd ffbf 	bl	80020ec <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e078      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417c:	4b3f      	ldr	r3, [pc, #252]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1f0      	bne.n	800416a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a1b      	ldr	r3, [r3, #32]
 8004190:	431a      	orrs	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004196:	019b      	lsls	r3, r3, #6
 8004198:	431a      	orrs	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419e:	085b      	lsrs	r3, r3, #1
 80041a0:	3b01      	subs	r3, #1
 80041a2:	041b      	lsls	r3, r3, #16
 80041a4:	431a      	orrs	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	061b      	lsls	r3, r3, #24
 80041ac:	4933      	ldr	r1, [pc, #204]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041b2:	4b33      	ldr	r3, [pc, #204]	; (8004280 <HAL_RCC_OscConfig+0x4dc>)
 80041b4:	2201      	movs	r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fd ff98 	bl	80020ec <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fd ff94 	bl	80020ec <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e04d      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d2:	4b2a      	ldr	r3, [pc, #168]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x41c>
 80041de:	e045      	b.n	800426c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e0:	4b27      	ldr	r3, [pc, #156]	; (8004280 <HAL_RCC_OscConfig+0x4dc>)
 80041e2:	2200      	movs	r2, #0
 80041e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e6:	f7fd ff81 	bl	80020ec <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ec:	e008      	b.n	8004200 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ee:	f7fd ff7d 	bl	80020ec <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e036      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004200:	4b1e      	ldr	r3, [pc, #120]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004208:	2b00      	cmp	r3, #0
 800420a:	d1f0      	bne.n	80041ee <HAL_RCC_OscConfig+0x44a>
 800420c:	e02e      	b.n	800426c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e029      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800421a:	4b18      	ldr	r3, [pc, #96]	; (800427c <HAL_RCC_OscConfig+0x4d8>)
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	429a      	cmp	r2, r3
 800422c:	d11c      	bne.n	8004268 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004238:	429a      	cmp	r2, r3
 800423a:	d115      	bne.n	8004268 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800423c:	68fa      	ldr	r2, [r7, #12]
 800423e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004242:	4013      	ands	r3, r2
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004248:	4293      	cmp	r3, r2
 800424a:	d10d      	bne.n	8004268 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004256:	429a      	cmp	r2, r3
 8004258:	d106      	bne.n	8004268 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004264:	429a      	cmp	r2, r3
 8004266:	d001      	beq.n	800426c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e000      	b.n	800426e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40007000 	.word	0x40007000
 800427c:	40023800 	.word	0x40023800
 8004280:	42470060 	.word	0x42470060

08004284 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0cc      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004298:	4b68      	ldr	r3, [pc, #416]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	683a      	ldr	r2, [r7, #0]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d90c      	bls.n	80042c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042a6:	4b65      	ldr	r3, [pc, #404]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80042a8:	683a      	ldr	r2, [r7, #0]
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ae:	4b63      	ldr	r3, [pc, #396]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 030f 	and.w	r3, r3, #15
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d001      	beq.n	80042c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e0b8      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d020      	beq.n	800430e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0304 	and.w	r3, r3, #4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d005      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042d8:	4b59      	ldr	r3, [pc, #356]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	4a58      	ldr	r2, [pc, #352]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80042e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042f0:	4b53      	ldr	r3, [pc, #332]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	4a52      	ldr	r2, [pc, #328]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80042fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fc:	4b50      	ldr	r3, [pc, #320]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	494d      	ldr	r1, [pc, #308]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	4313      	orrs	r3, r2
 800430c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d044      	beq.n	80043a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	2b01      	cmp	r3, #1
 8004320:	d107      	bne.n	8004332 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004322:	4b47      	ldr	r3, [pc, #284]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d119      	bne.n	8004362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e07f      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	2b02      	cmp	r3, #2
 8004338:	d003      	beq.n	8004342 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800433e:	2b03      	cmp	r3, #3
 8004340:	d107      	bne.n	8004352 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004342:	4b3f      	ldr	r3, [pc, #252]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d109      	bne.n	8004362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e06f      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004352:	4b3b      	ldr	r3, [pc, #236]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 0302 	and.w	r3, r3, #2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e067      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004362:	4b37      	ldr	r3, [pc, #220]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f023 0203 	bic.w	r2, r3, #3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	4934      	ldr	r1, [pc, #208]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	4313      	orrs	r3, r2
 8004372:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004374:	f7fd feba 	bl	80020ec <HAL_GetTick>
 8004378:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800437a:	e00a      	b.n	8004392 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800437c:	f7fd feb6 	bl	80020ec <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e04f      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004392:	4b2b      	ldr	r3, [pc, #172]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 020c 	and.w	r2, r3, #12
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d1eb      	bne.n	800437c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043a4:	4b25      	ldr	r3, [pc, #148]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f003 030f 	and.w	r3, r3, #15
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d20c      	bcs.n	80043cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043b2:	4b22      	ldr	r3, [pc, #136]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	b2d2      	uxtb	r2, r2
 80043b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043ba:	4b20      	ldr	r3, [pc, #128]	; (800443c <HAL_RCC_ClockConfig+0x1b8>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 030f 	and.w	r3, r3, #15
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d001      	beq.n	80043cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e032      	b.n	8004432 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d008      	beq.n	80043ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043d8:	4b19      	ldr	r3, [pc, #100]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4916      	ldr	r1, [pc, #88]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 0308 	and.w	r3, r3, #8
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d009      	beq.n	800440a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043f6:	4b12      	ldr	r3, [pc, #72]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	490e      	ldr	r1, [pc, #56]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	4313      	orrs	r3, r2
 8004408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800440a:	f000 f821 	bl	8004450 <HAL_RCC_GetSysClockFreq>
 800440e:	4602      	mov	r2, r0
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 030f 	and.w	r3, r3, #15
 800441a:	490a      	ldr	r1, [pc, #40]	; (8004444 <HAL_RCC_ClockConfig+0x1c0>)
 800441c:	5ccb      	ldrb	r3, [r1, r3]
 800441e:	fa22 f303 	lsr.w	r3, r2, r3
 8004422:	4a09      	ldr	r2, [pc, #36]	; (8004448 <HAL_RCC_ClockConfig+0x1c4>)
 8004424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004426:	4b09      	ldr	r3, [pc, #36]	; (800444c <HAL_RCC_ClockConfig+0x1c8>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f7fd fd54 	bl	8001ed8 <HAL_InitTick>

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3710      	adds	r7, #16
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	40023c00 	.word	0x40023c00
 8004440:	40023800 	.word	0x40023800
 8004444:	080091b4 	.word	0x080091b4
 8004448:	20000000 	.word	0x20000000
 800444c:	20000004 	.word	0x20000004

08004450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004450:	b5b0      	push	{r4, r5, r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004456:	2100      	movs	r1, #0
 8004458:	6079      	str	r1, [r7, #4]
 800445a:	2100      	movs	r1, #0
 800445c:	60f9      	str	r1, [r7, #12]
 800445e:	2100      	movs	r1, #0
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004462:	2100      	movs	r1, #0
 8004464:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004466:	4952      	ldr	r1, [pc, #328]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004468:	6889      	ldr	r1, [r1, #8]
 800446a:	f001 010c 	and.w	r1, r1, #12
 800446e:	2908      	cmp	r1, #8
 8004470:	d00d      	beq.n	800448e <HAL_RCC_GetSysClockFreq+0x3e>
 8004472:	2908      	cmp	r1, #8
 8004474:	f200 8094 	bhi.w	80045a0 <HAL_RCC_GetSysClockFreq+0x150>
 8004478:	2900      	cmp	r1, #0
 800447a:	d002      	beq.n	8004482 <HAL_RCC_GetSysClockFreq+0x32>
 800447c:	2904      	cmp	r1, #4
 800447e:	d003      	beq.n	8004488 <HAL_RCC_GetSysClockFreq+0x38>
 8004480:	e08e      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004482:	4b4c      	ldr	r3, [pc, #304]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x164>)
 8004484:	60bb      	str	r3, [r7, #8]
       break;
 8004486:	e08e      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004488:	4b4b      	ldr	r3, [pc, #300]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x168>)
 800448a:	60bb      	str	r3, [r7, #8]
      break;
 800448c:	e08b      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800448e:	4948      	ldr	r1, [pc, #288]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004490:	6849      	ldr	r1, [r1, #4]
 8004492:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004496:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004498:	4945      	ldr	r1, [pc, #276]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x160>)
 800449a:	6849      	ldr	r1, [r1, #4]
 800449c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80044a0:	2900      	cmp	r1, #0
 80044a2:	d024      	beq.n	80044ee <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044a4:	4942      	ldr	r1, [pc, #264]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80044a6:	6849      	ldr	r1, [r1, #4]
 80044a8:	0989      	lsrs	r1, r1, #6
 80044aa:	4608      	mov	r0, r1
 80044ac:	f04f 0100 	mov.w	r1, #0
 80044b0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80044b4:	f04f 0500 	mov.w	r5, #0
 80044b8:	ea00 0204 	and.w	r2, r0, r4
 80044bc:	ea01 0305 	and.w	r3, r1, r5
 80044c0:	493d      	ldr	r1, [pc, #244]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80044c2:	fb01 f003 	mul.w	r0, r1, r3
 80044c6:	2100      	movs	r1, #0
 80044c8:	fb01 f102 	mul.w	r1, r1, r2
 80044cc:	1844      	adds	r4, r0, r1
 80044ce:	493a      	ldr	r1, [pc, #232]	; (80045b8 <HAL_RCC_GetSysClockFreq+0x168>)
 80044d0:	fba2 0101 	umull	r0, r1, r2, r1
 80044d4:	1863      	adds	r3, r4, r1
 80044d6:	4619      	mov	r1, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	461a      	mov	r2, r3
 80044dc:	f04f 0300 	mov.w	r3, #0
 80044e0:	f7fc fb02 	bl	8000ae8 <__aeabi_uldivmod>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4613      	mov	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	e04a      	b.n	8004584 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ee:	4b30      	ldr	r3, [pc, #192]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	099b      	lsrs	r3, r3, #6
 80044f4:	461a      	mov	r2, r3
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80044fe:	f04f 0100 	mov.w	r1, #0
 8004502:	ea02 0400 	and.w	r4, r2, r0
 8004506:	ea03 0501 	and.w	r5, r3, r1
 800450a:	4620      	mov	r0, r4
 800450c:	4629      	mov	r1, r5
 800450e:	f04f 0200 	mov.w	r2, #0
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	014b      	lsls	r3, r1, #5
 8004518:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800451c:	0142      	lsls	r2, r0, #5
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	1b00      	subs	r0, r0, r4
 8004524:	eb61 0105 	sbc.w	r1, r1, r5
 8004528:	f04f 0200 	mov.w	r2, #0
 800452c:	f04f 0300 	mov.w	r3, #0
 8004530:	018b      	lsls	r3, r1, #6
 8004532:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004536:	0182      	lsls	r2, r0, #6
 8004538:	1a12      	subs	r2, r2, r0
 800453a:	eb63 0301 	sbc.w	r3, r3, r1
 800453e:	f04f 0000 	mov.w	r0, #0
 8004542:	f04f 0100 	mov.w	r1, #0
 8004546:	00d9      	lsls	r1, r3, #3
 8004548:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800454c:	00d0      	lsls	r0, r2, #3
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	1912      	adds	r2, r2, r4
 8004554:	eb45 0303 	adc.w	r3, r5, r3
 8004558:	f04f 0000 	mov.w	r0, #0
 800455c:	f04f 0100 	mov.w	r1, #0
 8004560:	0299      	lsls	r1, r3, #10
 8004562:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004566:	0290      	lsls	r0, r2, #10
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4610      	mov	r0, r2
 800456e:	4619      	mov	r1, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	461a      	mov	r2, r3
 8004574:	f04f 0300 	mov.w	r3, #0
 8004578:	f7fc fab6 	bl	8000ae8 <__aeabi_uldivmod>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4613      	mov	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004584:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	0c1b      	lsrs	r3, r3, #16
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	3301      	adds	r3, #1
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	fbb2 f3f3 	udiv	r3, r2, r3
 800459c:	60bb      	str	r3, [r7, #8]
      break;
 800459e:	e002      	b.n	80045a6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <HAL_RCC_GetSysClockFreq+0x164>)
 80045a2:	60bb      	str	r3, [r7, #8]
      break;
 80045a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045a6:	68bb      	ldr	r3, [r7, #8]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bdb0      	pop	{r4, r5, r7, pc}
 80045b0:	40023800 	.word	0x40023800
 80045b4:	00f42400 	.word	0x00f42400
 80045b8:	017d7840 	.word	0x017d7840

080045bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045c0:	4b03      	ldr	r3, [pc, #12]	; (80045d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045c2:	681b      	ldr	r3, [r3, #0]
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000000 	.word	0x20000000

080045d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80045d8:	f7ff fff0 	bl	80045bc <HAL_RCC_GetHCLKFreq>
 80045dc:	4602      	mov	r2, r0
 80045de:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	0a9b      	lsrs	r3, r3, #10
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	4903      	ldr	r1, [pc, #12]	; (80045f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ea:	5ccb      	ldrb	r3, [r1, r3]
 80045ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40023800 	.word	0x40023800
 80045f8:	080091c4 	.word	0x080091c4

080045fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004600:	f7ff ffdc 	bl	80045bc <HAL_RCC_GetHCLKFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	0b5b      	lsrs	r3, r3, #13
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	4903      	ldr	r1, [pc, #12]	; (8004620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004618:	4618      	mov	r0, r3
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40023800 	.word	0x40023800
 8004620:	080091c4 	.word	0x080091c4

08004624 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	220f      	movs	r2, #15
 8004632:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004634:	4b12      	ldr	r3, [pc, #72]	; (8004680 <HAL_RCC_GetClockConfig+0x5c>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 0203 	and.w	r2, r3, #3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004640:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <HAL_RCC_GetClockConfig+0x5c>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800464c:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <HAL_RCC_GetClockConfig+0x5c>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004658:	4b09      	ldr	r3, [pc, #36]	; (8004680 <HAL_RCC_GetClockConfig+0x5c>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	08db      	lsrs	r3, r3, #3
 800465e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004666:	4b07      	ldr	r3, [pc, #28]	; (8004684 <HAL_RCC_GetClockConfig+0x60>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 020f 	and.w	r2, r3, #15
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	601a      	str	r2, [r3, #0]
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	40023800 	.word	0x40023800
 8004684:	40023c00 	.word	0x40023c00

08004688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d101      	bne.n	800469a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e01d      	b.n	80046d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f815 	bl	80046de <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3304      	adds	r3, #4
 80046c4:	4619      	mov	r1, r3
 80046c6:	4610      	mov	r0, r2
 80046c8:	f000 f968 	bl	800499c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3708      	adds	r7, #8
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80046de:	b480      	push	{r7}
 80046e0:	b083      	sub	sp, #12
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80046e6:	bf00      	nop
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b085      	sub	sp, #20
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68da      	ldr	r2, [r3, #12]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f042 0201 	orr.w	r2, r2, #1
 8004708:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2b06      	cmp	r3, #6
 800471a:	d007      	beq.n	800472c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f042 0201 	orr.w	r2, r2, #1
 800472a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3714      	adds	r7, #20
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr

0800473a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b082      	sub	sp, #8
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	f003 0302 	and.w	r3, r3, #2
 800474c:	2b02      	cmp	r3, #2
 800474e:	d122      	bne.n	8004796 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f003 0302 	and.w	r3, r3, #2
 800475a:	2b02      	cmp	r3, #2
 800475c:	d11b      	bne.n	8004796 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f06f 0202 	mvn.w	r2, #2
 8004766:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2201      	movs	r2, #1
 800476c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	699b      	ldr	r3, [r3, #24]
 8004774:	f003 0303 	and.w	r3, r3, #3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d003      	beq.n	8004784 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f8ee 	bl	800495e <HAL_TIM_IC_CaptureCallback>
 8004782:	e005      	b.n	8004790 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f8e0 	bl	800494a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f000 f8f1 	bl	8004972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	2b04      	cmp	r3, #4
 80047a2:	d122      	bne.n	80047ea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d11b      	bne.n	80047ea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f06f 0204 	mvn.w	r2, #4
 80047ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d003      	beq.n	80047d8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f000 f8c4 	bl	800495e <HAL_TIM_IC_CaptureCallback>
 80047d6:	e005      	b.n	80047e4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f8b6 	bl	800494a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f8c7 	bl	8004972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d122      	bne.n	800483e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b08      	cmp	r3, #8
 8004804:	d11b      	bne.n	800483e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f06f 0208 	mvn.w	r2, #8
 800480e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2204      	movs	r2, #4
 8004814:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f003 0303 	and.w	r3, r3, #3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 f89a 	bl	800495e <HAL_TIM_IC_CaptureCallback>
 800482a:	e005      	b.n	8004838 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f88c 	bl	800494a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f89d 	bl	8004972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b10      	cmp	r3, #16
 800484a:	d122      	bne.n	8004892 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b10      	cmp	r3, #16
 8004858:	d11b      	bne.n	8004892 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f06f 0210 	mvn.w	r2, #16
 8004862:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2208      	movs	r2, #8
 8004868:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f870 	bl	800495e <HAL_TIM_IC_CaptureCallback>
 800487e:	e005      	b.n	800488c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f862 	bl	800494a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f873 	bl	8004972 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	691b      	ldr	r3, [r3, #16]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b01      	cmp	r3, #1
 800489e:	d10e      	bne.n	80048be <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d107      	bne.n	80048be <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f06f 0201 	mvn.w	r2, #1
 80048b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7fc ff7f 	bl	80017bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c8:	2b80      	cmp	r3, #128	; 0x80
 80048ca:	d10e      	bne.n	80048ea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048d6:	2b80      	cmp	r3, #128	; 0x80
 80048d8:	d107      	bne.n	80048ea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f903 	bl	8004af0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d10e      	bne.n	8004916 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004902:	2b40      	cmp	r3, #64	; 0x40
 8004904:	d107      	bne.n	8004916 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800490e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f838 	bl	8004986 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f003 0320 	and.w	r3, r3, #32
 8004920:	2b20      	cmp	r3, #32
 8004922:	d10e      	bne.n	8004942 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b20      	cmp	r3, #32
 8004930:	d107      	bne.n	8004942 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f06f 0220 	mvn.w	r2, #32
 800493a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f8cd 	bl	8004adc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800494a:	b480      	push	{r7}
 800494c:	b083      	sub	sp, #12
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr

0800495e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004986:	b480      	push	{r7}
 8004988:	b083      	sub	sp, #12
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr
	...

0800499c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a40      	ldr	r2, [pc, #256]	; (8004ab0 <TIM_Base_SetConfig+0x114>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d013      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ba:	d00f      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a3d      	ldr	r2, [pc, #244]	; (8004ab4 <TIM_Base_SetConfig+0x118>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00b      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a3c      	ldr	r2, [pc, #240]	; (8004ab8 <TIM_Base_SetConfig+0x11c>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d007      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a3b      	ldr	r2, [pc, #236]	; (8004abc <TIM_Base_SetConfig+0x120>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d003      	beq.n	80049dc <TIM_Base_SetConfig+0x40>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a3a      	ldr	r2, [pc, #232]	; (8004ac0 <TIM_Base_SetConfig+0x124>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d108      	bne.n	80049ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a2f      	ldr	r2, [pc, #188]	; (8004ab0 <TIM_Base_SetConfig+0x114>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d02b      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049fc:	d027      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a2c      	ldr	r2, [pc, #176]	; (8004ab4 <TIM_Base_SetConfig+0x118>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d023      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a2b      	ldr	r2, [pc, #172]	; (8004ab8 <TIM_Base_SetConfig+0x11c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d01f      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a2a      	ldr	r2, [pc, #168]	; (8004abc <TIM_Base_SetConfig+0x120>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d01b      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a29      	ldr	r2, [pc, #164]	; (8004ac0 <TIM_Base_SetConfig+0x124>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d017      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a28      	ldr	r2, [pc, #160]	; (8004ac4 <TIM_Base_SetConfig+0x128>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a27      	ldr	r2, [pc, #156]	; (8004ac8 <TIM_Base_SetConfig+0x12c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00f      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a26      	ldr	r2, [pc, #152]	; (8004acc <TIM_Base_SetConfig+0x130>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00b      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a25      	ldr	r2, [pc, #148]	; (8004ad0 <TIM_Base_SetConfig+0x134>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d007      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a24      	ldr	r2, [pc, #144]	; (8004ad4 <TIM_Base_SetConfig+0x138>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d003      	beq.n	8004a4e <TIM_Base_SetConfig+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a23      	ldr	r2, [pc, #140]	; (8004ad8 <TIM_Base_SetConfig+0x13c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d108      	bne.n	8004a60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a0a      	ldr	r2, [pc, #40]	; (8004ab0 <TIM_Base_SetConfig+0x114>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d003      	beq.n	8004a94 <TIM_Base_SetConfig+0xf8>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	4a0c      	ldr	r2, [pc, #48]	; (8004ac0 <TIM_Base_SetConfig+0x124>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d103      	bne.n	8004a9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	691a      	ldr	r2, [r3, #16]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	615a      	str	r2, [r3, #20]
}
 8004aa2:	bf00      	nop
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	40010000 	.word	0x40010000
 8004ab4:	40000400 	.word	0x40000400
 8004ab8:	40000800 	.word	0x40000800
 8004abc:	40000c00 	.word	0x40000c00
 8004ac0:	40010400 	.word	0x40010400
 8004ac4:	40014000 	.word	0x40014000
 8004ac8:	40014400 	.word	0x40014400
 8004acc:	40014800 	.word	0x40014800
 8004ad0:	40001800 	.word	0x40001800
 8004ad4:	40001c00 	.word	0x40001c00
 8004ad8:	40002000 	.word	0x40002000

08004adc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b082      	sub	sp, #8
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e03f      	b.n	8004b96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fd f952 	bl	8001dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2224      	movs	r2, #36	; 0x24
 8004b34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f000 fcd3 	bl	80054f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	691a      	ldr	r2, [r3, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695a      	ldr	r2, [r3, #20]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	68da      	ldr	r2, [r3, #12]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2220      	movs	r2, #32
 8004b88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}

08004b9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b9e:	b580      	push	{r7, lr}
 8004ba0:	b088      	sub	sp, #32
 8004ba2:	af02      	add	r7, sp, #8
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	60b9      	str	r1, [r7, #8]
 8004ba8:	603b      	str	r3, [r7, #0]
 8004baa:	4613      	mov	r3, r2
 8004bac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	f040 8083 	bne.w	8004cc6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_UART_Transmit+0x2e>
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e07b      	b.n	8004cc8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_UART_Transmit+0x40>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e074      	b.n	8004cc8 <HAL_UART_Transmit+0x12a>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2221      	movs	r2, #33	; 0x21
 8004bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004bf4:	f7fd fa7a 	bl	80020ec <HAL_GetTick>
 8004bf8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	88fa      	ldrh	r2, [r7, #6]
 8004bfe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	88fa      	ldrh	r2, [r7, #6]
 8004c04:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004c0e:	e042      	b.n	8004c96 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c26:	d122      	bne.n	8004c6e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	2180      	movs	r1, #128	; 0x80
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 fadc 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d001      	beq.n	8004c42 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e042      	b.n	8004cc8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	881b      	ldrh	r3, [r3, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c54:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d103      	bne.n	8004c66 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	3302      	adds	r3, #2
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	e017      	b.n	8004c96 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	e013      	b.n	8004c96 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2200      	movs	r2, #0
 8004c76:	2180      	movs	r1, #128	; 0x80
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 fab9 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e01f      	b.n	8004cc8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	1c5a      	adds	r2, r3, #1
 8004c8c:	60ba      	str	r2, [r7, #8]
 8004c8e:	781a      	ldrb	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1b7      	bne.n	8004c10 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2140      	movs	r1, #64	; 0x40
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 faa0 	bl	80051f0 <UART_WaitOnFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e006      	b.n	8004cc8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2220      	movs	r2, #32
 8004cbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e000      	b.n	8004cc8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004cc6:	2302      	movs	r3, #2
  }
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b20      	cmp	r3, #32
 8004ce8:	d166      	bne.n	8004db8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <HAL_UART_Receive_DMA+0x26>
 8004cf0:	88fb      	ldrh	r3, [r7, #6]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e05f      	b.n	8004dba <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_UART_Receive_DMA+0x38>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e058      	b.n	8004dba <HAL_UART_Receive_DMA+0xea>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004d10:	68ba      	ldr	r2, [r7, #8]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	88fa      	ldrh	r2, [r7, #6]
 8004d1a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2222      	movs	r2, #34	; 0x22
 8004d26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d2e:	4a25      	ldr	r2, [pc, #148]	; (8004dc4 <HAL_UART_Receive_DMA+0xf4>)
 8004d30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d36:	4a24      	ldr	r2, [pc, #144]	; (8004dc8 <HAL_UART_Receive_DMA+0xf8>)
 8004d38:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d3e:	4a23      	ldr	r2, [pc, #140]	; (8004dcc <HAL_UART_Receive_DMA+0xfc>)
 8004d40:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d46:	2200      	movs	r2, #0
 8004d48:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004d4a:	f107 0308 	add.w	r3, r7, #8
 8004d4e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3304      	adds	r3, #4
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	88fb      	ldrh	r3, [r7, #6]
 8004d62:	f7fd fb83 	bl	800246c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004d66:	2300      	movs	r3, #0
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	613b      	str	r3, [r7, #16]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68da      	ldr	r2, [r3, #12]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d92:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695a      	ldr	r2, [r3, #20]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	695a      	ldr	r2, [r3, #20]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004db2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	e000      	b.n	8004dba <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004db8:	2302      	movs	r3, #2
  }
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	080050d9 	.word	0x080050d9
 8004dc8:	08005141 	.word	0x08005141
 8004dcc:	0800515d 	.word	0x0800515d

08004dd0 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b084      	sub	sp, #16
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de6:	2b80      	cmp	r3, #128	; 0x80
 8004de8:	bf0c      	ite	eq
 8004dea:	2301      	moveq	r3, #1
 8004dec:	2300      	movne	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b21      	cmp	r3, #33	; 0x21
 8004dfc:	d116      	bne.n	8004e2c <HAL_UART_DMAStop+0x5c>
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d013      	beq.n	8004e2c <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	695a      	ldr	r2, [r3, #20]
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e12:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d004      	beq.n	8004e26 <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fd fb7b 	bl	800251c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fa2c 	bl	8005284 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e36:	2b40      	cmp	r3, #64	; 0x40
 8004e38:	bf0c      	ite	eq
 8004e3a:	2301      	moveq	r3, #1
 8004e3c:	2300      	movne	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b22      	cmp	r3, #34	; 0x22
 8004e4c:	d116      	bne.n	8004e7c <HAL_UART_DMAStop+0xac>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d013      	beq.n	8004e7c <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	695a      	ldr	r2, [r3, #20]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e62:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d004      	beq.n	8004e76 <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fd fb53 	bl	800251c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fa1a 	bl	80052b0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3710      	adds	r7, #16
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10d      	bne.n	8004eda <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d008      	beq.n	8004eda <HAL_UART_IRQHandler+0x52>
 8004ec8:	69bb      	ldr	r3, [r7, #24]
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 fa8c 	bl	80053f0 <UART_Receive_IT>
      return;
 8004ed8:	e0d0      	b.n	800507c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 80b0 	beq.w	8005042 <HAL_UART_IRQHandler+0x1ba>
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d105      	bne.n	8004ef8 <HAL_UART_IRQHandler+0x70>
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 80a5 	beq.w	8005042 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f003 0301 	and.w	r3, r3, #1
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <HAL_UART_IRQHandler+0x90>
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d005      	beq.n	8004f18 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f10:	f043 0201 	orr.w	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	f003 0304 	and.w	r3, r3, #4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <HAL_UART_IRQHandler+0xb0>
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f003 0301 	and.w	r3, r3, #1
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d005      	beq.n	8004f38 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f30:	f043 0202 	orr.w	r2, r3, #2
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00a      	beq.n	8004f58 <HAL_UART_IRQHandler+0xd0>
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f003 0301 	and.w	r3, r3, #1
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d005      	beq.n	8004f58 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f50:	f043 0204 	orr.w	r2, r3, #4
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d00f      	beq.n	8004f82 <HAL_UART_IRQHandler+0xfa>
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	f003 0320 	and.w	r3, r3, #32
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d104      	bne.n	8004f76 <HAL_UART_IRQHandler+0xee>
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	f003 0301 	and.w	r3, r3, #1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d005      	beq.n	8004f82 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7a:	f043 0208 	orr.w	r2, r3, #8
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d077      	beq.n	800507a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	f003 0320 	and.w	r3, r3, #32
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d007      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x11c>
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d002      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 fa26 	bl	80053f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fae:	2b40      	cmp	r3, #64	; 0x40
 8004fb0:	bf0c      	ite	eq
 8004fb2:	2301      	moveq	r3, #1
 8004fb4:	2300      	movne	r3, #0
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbe:	f003 0308 	and.w	r3, r3, #8
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d102      	bne.n	8004fcc <HAL_UART_IRQHandler+0x144>
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d031      	beq.n	8005030 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f96f 	bl	80052b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	695b      	ldr	r3, [r3, #20]
 8004fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fdc:	2b40      	cmp	r3, #64	; 0x40
 8004fde:	d123      	bne.n	8005028 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695a      	ldr	r2, [r3, #20]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fee:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d013      	beq.n	8005020 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffc:	4a21      	ldr	r2, [pc, #132]	; (8005084 <HAL_UART_IRQHandler+0x1fc>)
 8004ffe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005004:	4618      	mov	r0, r3
 8005006:	f7fd faf9 	bl	80025fc <HAL_DMA_Abort_IT>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d016      	beq.n	800503e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005014:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800501a:	4610      	mov	r0, r2
 800501c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800501e:	e00e      	b.n	800503e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005020:	6878      	ldr	r0, [r7, #4]
 8005022:	f000 f84f 	bl	80050c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005026:	e00a      	b.n	800503e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f84b 	bl	80050c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800502e:	e006      	b.n	800503e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 f847 	bl	80050c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800503c:	e01d      	b.n	800507a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800503e:	bf00      	nop
    return;
 8005040:	e01b      	b.n	800507a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005048:	2b00      	cmp	r3, #0
 800504a:	d008      	beq.n	800505e <HAL_UART_IRQHandler+0x1d6>
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f95c 	bl	8005314 <UART_Transmit_IT>
    return;
 800505c:	e00e      	b.n	800507c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005064:	2b00      	cmp	r3, #0
 8005066:	d009      	beq.n	800507c <HAL_UART_IRQHandler+0x1f4>
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d004      	beq.n	800507c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f9a4 	bl	80053c0 <UART_EndTransmit_IT>
    return;
 8005078:	e000      	b.n	800507c <HAL_UART_IRQHandler+0x1f4>
    return;
 800507a:	bf00      	nop
  }
}
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	080052ed 	.word	0x080052ed

08005088 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005090:	bf00      	nop
 8005092:	370c      	adds	r7, #12
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800509c:	b480      	push	{r7}
 800509e:	b083      	sub	sp, #12
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr

080050b0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80050b8:	bf00      	nop
 80050ba:	370c      	adds	r7, #12
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr

080050c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b083      	sub	sp, #12
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80050cc:	bf00      	nop
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d11e      	bne.n	8005132 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68da      	ldr	r2, [r3, #12]
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005108:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695a      	ldr	r2, [r3, #20]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0201 	bic.w	r2, r2, #1
 8005118:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	695a      	ldr	r2, [r3, #20]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005128:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2220      	movs	r2, #32
 800512e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f7ff ffb2 	bl	800509c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005138:	bf00      	nop
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800514c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800514e:	68f8      	ldr	r0, [r7, #12]
 8005150:	f7ff ffae 	bl	80050b0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005154:	bf00      	nop
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005164:	2300      	movs	r3, #0
 8005166:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	695b      	ldr	r3, [r3, #20]
 8005174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005178:	2b80      	cmp	r3, #128	; 0x80
 800517a:	bf0c      	ite	eq
 800517c:	2301      	moveq	r3, #1
 800517e:	2300      	movne	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800518a:	b2db      	uxtb	r3, r3
 800518c:	2b21      	cmp	r3, #33	; 0x21
 800518e:	d108      	bne.n	80051a2 <UART_DMAError+0x46>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2200      	movs	r2, #0
 800519a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800519c:	68b8      	ldr	r0, [r7, #8]
 800519e:	f000 f871 	bl	8005284 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ac:	2b40      	cmp	r3, #64	; 0x40
 80051ae:	bf0c      	ite	eq
 80051b0:	2301      	moveq	r3, #1
 80051b2:	2300      	movne	r3, #0
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b22      	cmp	r3, #34	; 0x22
 80051c2:	d108      	bne.n	80051d6 <UART_DMAError+0x7a>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d005      	beq.n	80051d6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	2200      	movs	r2, #0
 80051ce:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80051d0:	68b8      	ldr	r0, [r7, #8]
 80051d2:	f000 f86d 	bl	80052b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051da:	f043 0210 	orr.w	r2, r3, #16
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051e2:	68b8      	ldr	r0, [r7, #8]
 80051e4:	f7ff ff6e 	bl	80050c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051e8:	bf00      	nop
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	4613      	mov	r3, r2
 80051fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005200:	e02c      	b.n	800525c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d028      	beq.n	800525c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d007      	beq.n	8005220 <UART_WaitOnFlagUntilTimeout+0x30>
 8005210:	f7fc ff6c 	bl	80020ec <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	69ba      	ldr	r2, [r7, #24]
 800521c:	429a      	cmp	r2, r3
 800521e:	d21d      	bcs.n	800525c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800522e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	695a      	ldr	r2, [r3, #20]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0201 	bic.w	r2, r2, #1
 800523e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e00f      	b.n	800527c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	4013      	ands	r3, r2
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	429a      	cmp	r2, r3
 800526a:	bf0c      	ite	eq
 800526c:	2301      	moveq	r3, #1
 800526e:	2300      	movne	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	79fb      	ldrb	r3, [r7, #7]
 8005276:	429a      	cmp	r2, r3
 8005278:	d0c3      	beq.n	8005202 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800529a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2220      	movs	r2, #32
 80052a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80052c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695a      	ldr	r2, [r3, #20]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0201 	bic.w	r2, r2, #1
 80052d6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005306:	68f8      	ldr	r0, [r7, #12]
 8005308:	f7ff fedc 	bl	80050c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800530c:	bf00      	nop
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b21      	cmp	r3, #33	; 0x21
 8005326:	d144      	bne.n	80053b2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005330:	d11a      	bne.n	8005368 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	881b      	ldrh	r3, [r3, #0]
 800533c:	461a      	mov	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005346:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d105      	bne.n	800535c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a1b      	ldr	r3, [r3, #32]
 8005354:	1c9a      	adds	r2, r3, #2
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	621a      	str	r2, [r3, #32]
 800535a:	e00e      	b.n	800537a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a1b      	ldr	r3, [r3, #32]
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	621a      	str	r2, [r3, #32]
 8005366:	e008      	b.n	800537a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a1b      	ldr	r3, [r3, #32]
 800536c:	1c59      	adds	r1, r3, #1
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6211      	str	r1, [r2, #32]
 8005372:	781a      	ldrb	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800537e:	b29b      	uxth	r3, r3
 8005380:	3b01      	subs	r3, #1
 8005382:	b29b      	uxth	r3, r3
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	4619      	mov	r1, r3
 8005388:	84d1      	strh	r1, [r2, #38]	; 0x26
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10f      	bne.n	80053ae <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800539c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053ac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80053ae:	2300      	movs	r3, #0
 80053b0:	e000      	b.n	80053b4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80053b2:	2302      	movs	r3, #2
  }
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3714      	adds	r7, #20
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68da      	ldr	r2, [r3, #12]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2220      	movs	r2, #32
 80053dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff fe51 	bl	8005088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b22      	cmp	r3, #34	; 0x22
 8005402:	d171      	bne.n	80054e8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540c:	d123      	bne.n	8005456 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005412:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10e      	bne.n	800543a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	b29b      	uxth	r3, r3
 8005424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005428:	b29a      	uxth	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	1c9a      	adds	r2, r3, #2
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	629a      	str	r2, [r3, #40]	; 0x28
 8005438:	e029      	b.n	800548e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	b29b      	uxth	r3, r3
 8005442:	b2db      	uxtb	r3, r3
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544e:	1c5a      	adds	r2, r3, #1
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	629a      	str	r2, [r3, #40]	; 0x28
 8005454:	e01b      	b.n	800548e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10a      	bne.n	8005474 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6858      	ldr	r0, [r3, #4]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005468:	1c59      	adds	r1, r3, #1
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6291      	str	r1, [r2, #40]	; 0x28
 800546e:	b2c2      	uxtb	r2, r0
 8005470:	701a      	strb	r2, [r3, #0]
 8005472:	e00c      	b.n	800548e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	b2da      	uxtb	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	1c58      	adds	r0, r3, #1
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	6288      	str	r0, [r1, #40]	; 0x28
 8005486:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005492:	b29b      	uxth	r3, r3
 8005494:	3b01      	subs	r3, #1
 8005496:	b29b      	uxth	r3, r3
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	4619      	mov	r1, r3
 800549c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d120      	bne.n	80054e4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0220 	bic.w	r2, r2, #32
 80054b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695a      	ldr	r2, [r3, #20]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f022 0201 	bic.w	r2, r2, #1
 80054d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2220      	movs	r2, #32
 80054d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f7ff fdde 	bl	800509c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	e002      	b.n	80054ea <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	e000      	b.n	80054ea <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
  }
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054f8:	b0bd      	sub	sp, #244	; 0xf4
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800550c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005510:	68d9      	ldr	r1, [r3, #12]
 8005512:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	ea40 0301 	orr.w	r3, r0, r1
 800551c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005522:	689a      	ldr	r2, [r3, #8]
 8005524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	431a      	orrs	r2, r3
 800552c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005530:	695b      	ldr	r3, [r3, #20]
 8005532:	431a      	orrs	r2, r3
 8005534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005538:	69db      	ldr	r3, [r3, #28]
 800553a:	4313      	orrs	r3, r2
 800553c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8005540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800554c:	f021 010c 	bic.w	r1, r1, #12
 8005550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800555a:	430b      	orrs	r3, r1
 800555c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800555e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800556a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556e:	6999      	ldr	r1, [r3, #24]
 8005570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	ea40 0301 	orr.w	r3, r0, r1
 800557a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800557c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005586:	f040 81a5 	bne.w	80058d4 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800558a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	4bcd      	ldr	r3, [pc, #820]	; (80058c8 <UART_SetConfig+0x3d4>)
 8005592:	429a      	cmp	r2, r3
 8005594:	d006      	beq.n	80055a4 <UART_SetConfig+0xb0>
 8005596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	4bcb      	ldr	r3, [pc, #812]	; (80058cc <UART_SetConfig+0x3d8>)
 800559e:	429a      	cmp	r2, r3
 80055a0:	f040 80cb 	bne.w	800573a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80055a4:	f7ff f82a 	bl	80045fc <HAL_RCC_GetPCLK2Freq>
 80055a8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80055b0:	461c      	mov	r4, r3
 80055b2:	f04f 0500 	mov.w	r5, #0
 80055b6:	4622      	mov	r2, r4
 80055b8:	462b      	mov	r3, r5
 80055ba:	1891      	adds	r1, r2, r2
 80055bc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80055c0:	415b      	adcs	r3, r3
 80055c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80055c6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80055ca:	1912      	adds	r2, r2, r4
 80055cc:	eb45 0303 	adc.w	r3, r5, r3
 80055d0:	f04f 0000 	mov.w	r0, #0
 80055d4:	f04f 0100 	mov.w	r1, #0
 80055d8:	00d9      	lsls	r1, r3, #3
 80055da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055de:	00d0      	lsls	r0, r2, #3
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	1911      	adds	r1, r2, r4
 80055e6:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 80055ea:	416b      	adcs	r3, r5
 80055ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80055f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	461a      	mov	r2, r3
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	1891      	adds	r1, r2, r2
 80055fe:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8005602:	415b      	adcs	r3, r3
 8005604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005608:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800560c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8005610:	f7fb fa6a 	bl	8000ae8 <__aeabi_uldivmod>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4bad      	ldr	r3, [pc, #692]	; (80058d0 <UART_SetConfig+0x3dc>)
 800561a:	fba3 2302 	umull	r2, r3, r3, r2
 800561e:	095b      	lsrs	r3, r3, #5
 8005620:	011e      	lsls	r6, r3, #4
 8005622:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005626:	461c      	mov	r4, r3
 8005628:	f04f 0500 	mov.w	r5, #0
 800562c:	4622      	mov	r2, r4
 800562e:	462b      	mov	r3, r5
 8005630:	1891      	adds	r1, r2, r2
 8005632:	67b9      	str	r1, [r7, #120]	; 0x78
 8005634:	415b      	adcs	r3, r3
 8005636:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005638:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800563c:	1912      	adds	r2, r2, r4
 800563e:	eb45 0303 	adc.w	r3, r5, r3
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f04f 0100 	mov.w	r1, #0
 800564a:	00d9      	lsls	r1, r3, #3
 800564c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005650:	00d0      	lsls	r0, r2, #3
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	1911      	adds	r1, r2, r4
 8005658:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800565c:	416b      	adcs	r3, r5
 800565e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	461a      	mov	r2, r3
 800566a:	f04f 0300 	mov.w	r3, #0
 800566e:	1891      	adds	r1, r2, r2
 8005670:	6739      	str	r1, [r7, #112]	; 0x70
 8005672:	415b      	adcs	r3, r3
 8005674:	677b      	str	r3, [r7, #116]	; 0x74
 8005676:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800567a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800567e:	f7fb fa33 	bl	8000ae8 <__aeabi_uldivmod>
 8005682:	4602      	mov	r2, r0
 8005684:	460b      	mov	r3, r1
 8005686:	4b92      	ldr	r3, [pc, #584]	; (80058d0 <UART_SetConfig+0x3dc>)
 8005688:	fba3 1302 	umull	r1, r3, r3, r2
 800568c:	095b      	lsrs	r3, r3, #5
 800568e:	2164      	movs	r1, #100	; 0x64
 8005690:	fb01 f303 	mul.w	r3, r1, r3
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	3332      	adds	r3, #50	; 0x32
 800569a:	4a8d      	ldr	r2, [pc, #564]	; (80058d0 <UART_SetConfig+0x3dc>)
 800569c:	fba2 2303 	umull	r2, r3, r2, r3
 80056a0:	095b      	lsrs	r3, r3, #5
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056a8:	441e      	add	r6, r3
 80056aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80056ae:	4618      	mov	r0, r3
 80056b0:	f04f 0100 	mov.w	r1, #0
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	1894      	adds	r4, r2, r2
 80056ba:	66bc      	str	r4, [r7, #104]	; 0x68
 80056bc:	415b      	adcs	r3, r3
 80056be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056c0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80056c4:	1812      	adds	r2, r2, r0
 80056c6:	eb41 0303 	adc.w	r3, r1, r3
 80056ca:	f04f 0400 	mov.w	r4, #0
 80056ce:	f04f 0500 	mov.w	r5, #0
 80056d2:	00dd      	lsls	r5, r3, #3
 80056d4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80056d8:	00d4      	lsls	r4, r2, #3
 80056da:	4622      	mov	r2, r4
 80056dc:	462b      	mov	r3, r5
 80056de:	1814      	adds	r4, r2, r0
 80056e0:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 80056e4:	414b      	adcs	r3, r1
 80056e6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	461a      	mov	r2, r3
 80056f2:	f04f 0300 	mov.w	r3, #0
 80056f6:	1891      	adds	r1, r2, r2
 80056f8:	6639      	str	r1, [r7, #96]	; 0x60
 80056fa:	415b      	adcs	r3, r3
 80056fc:	667b      	str	r3, [r7, #100]	; 0x64
 80056fe:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005702:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005706:	f7fb f9ef 	bl	8000ae8 <__aeabi_uldivmod>
 800570a:	4602      	mov	r2, r0
 800570c:	460b      	mov	r3, r1
 800570e:	4b70      	ldr	r3, [pc, #448]	; (80058d0 <UART_SetConfig+0x3dc>)
 8005710:	fba3 1302 	umull	r1, r3, r3, r2
 8005714:	095b      	lsrs	r3, r3, #5
 8005716:	2164      	movs	r1, #100	; 0x64
 8005718:	fb01 f303 	mul.w	r3, r1, r3
 800571c:	1ad3      	subs	r3, r2, r3
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	3332      	adds	r3, #50	; 0x32
 8005722:	4a6b      	ldr	r2, [pc, #428]	; (80058d0 <UART_SetConfig+0x3dc>)
 8005724:	fba2 2303 	umull	r2, r3, r2, r3
 8005728:	095b      	lsrs	r3, r3, #5
 800572a:	f003 0207 	and.w	r2, r3, #7
 800572e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4432      	add	r2, r6
 8005736:	609a      	str	r2, [r3, #8]
 8005738:	e26d      	b.n	8005c16 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800573a:	f7fe ff4b 	bl	80045d4 <HAL_RCC_GetPCLK1Freq>
 800573e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005742:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005746:	461c      	mov	r4, r3
 8005748:	f04f 0500 	mov.w	r5, #0
 800574c:	4622      	mov	r2, r4
 800574e:	462b      	mov	r3, r5
 8005750:	1891      	adds	r1, r2, r2
 8005752:	65b9      	str	r1, [r7, #88]	; 0x58
 8005754:	415b      	adcs	r3, r3
 8005756:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005758:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800575c:	1912      	adds	r2, r2, r4
 800575e:	eb45 0303 	adc.w	r3, r5, r3
 8005762:	f04f 0000 	mov.w	r0, #0
 8005766:	f04f 0100 	mov.w	r1, #0
 800576a:	00d9      	lsls	r1, r3, #3
 800576c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005770:	00d0      	lsls	r0, r2, #3
 8005772:	4602      	mov	r2, r0
 8005774:	460b      	mov	r3, r1
 8005776:	1911      	adds	r1, r2, r4
 8005778:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800577c:	416b      	adcs	r3, r5
 800577e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	461a      	mov	r2, r3
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	1891      	adds	r1, r2, r2
 8005790:	6539      	str	r1, [r7, #80]	; 0x50
 8005792:	415b      	adcs	r3, r3
 8005794:	657b      	str	r3, [r7, #84]	; 0x54
 8005796:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800579a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800579e:	f7fb f9a3 	bl	8000ae8 <__aeabi_uldivmod>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4b4a      	ldr	r3, [pc, #296]	; (80058d0 <UART_SetConfig+0x3dc>)
 80057a8:	fba3 2302 	umull	r2, r3, r3, r2
 80057ac:	095b      	lsrs	r3, r3, #5
 80057ae:	011e      	lsls	r6, r3, #4
 80057b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80057b4:	461c      	mov	r4, r3
 80057b6:	f04f 0500 	mov.w	r5, #0
 80057ba:	4622      	mov	r2, r4
 80057bc:	462b      	mov	r3, r5
 80057be:	1891      	adds	r1, r2, r2
 80057c0:	64b9      	str	r1, [r7, #72]	; 0x48
 80057c2:	415b      	adcs	r3, r3
 80057c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057ca:	1912      	adds	r2, r2, r4
 80057cc:	eb45 0303 	adc.w	r3, r5, r3
 80057d0:	f04f 0000 	mov.w	r0, #0
 80057d4:	f04f 0100 	mov.w	r1, #0
 80057d8:	00d9      	lsls	r1, r3, #3
 80057da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057de:	00d0      	lsls	r0, r2, #3
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	1911      	adds	r1, r2, r4
 80057e6:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 80057ea:	416b      	adcs	r3, r5
 80057ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80057f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	1891      	adds	r1, r2, r2
 80057fe:	6439      	str	r1, [r7, #64]	; 0x40
 8005800:	415b      	adcs	r3, r3
 8005802:	647b      	str	r3, [r7, #68]	; 0x44
 8005804:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005808:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 800580c:	f7fb f96c 	bl	8000ae8 <__aeabi_uldivmod>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	4b2e      	ldr	r3, [pc, #184]	; (80058d0 <UART_SetConfig+0x3dc>)
 8005816:	fba3 1302 	umull	r1, r3, r3, r2
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	2164      	movs	r1, #100	; 0x64
 800581e:	fb01 f303 	mul.w	r3, r1, r3
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	3332      	adds	r3, #50	; 0x32
 8005828:	4a29      	ldr	r2, [pc, #164]	; (80058d0 <UART_SetConfig+0x3dc>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	005b      	lsls	r3, r3, #1
 8005832:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005836:	441e      	add	r6, r3
 8005838:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800583c:	4618      	mov	r0, r3
 800583e:	f04f 0100 	mov.w	r1, #0
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	1894      	adds	r4, r2, r2
 8005848:	63bc      	str	r4, [r7, #56]	; 0x38
 800584a:	415b      	adcs	r3, r3
 800584c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800584e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005852:	1812      	adds	r2, r2, r0
 8005854:	eb41 0303 	adc.w	r3, r1, r3
 8005858:	f04f 0400 	mov.w	r4, #0
 800585c:	f04f 0500 	mov.w	r5, #0
 8005860:	00dd      	lsls	r5, r3, #3
 8005862:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005866:	00d4      	lsls	r4, r2, #3
 8005868:	4622      	mov	r2, r4
 800586a:	462b      	mov	r3, r5
 800586c:	1814      	adds	r4, r2, r0
 800586e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8005872:	414b      	adcs	r3, r1
 8005874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	461a      	mov	r2, r3
 8005880:	f04f 0300 	mov.w	r3, #0
 8005884:	1891      	adds	r1, r2, r2
 8005886:	6339      	str	r1, [r7, #48]	; 0x30
 8005888:	415b      	adcs	r3, r3
 800588a:	637b      	str	r3, [r7, #52]	; 0x34
 800588c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005890:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005894:	f7fb f928 	bl	8000ae8 <__aeabi_uldivmod>
 8005898:	4602      	mov	r2, r0
 800589a:	460b      	mov	r3, r1
 800589c:	4b0c      	ldr	r3, [pc, #48]	; (80058d0 <UART_SetConfig+0x3dc>)
 800589e:	fba3 1302 	umull	r1, r3, r3, r2
 80058a2:	095b      	lsrs	r3, r3, #5
 80058a4:	2164      	movs	r1, #100	; 0x64
 80058a6:	fb01 f303 	mul.w	r3, r1, r3
 80058aa:	1ad3      	subs	r3, r2, r3
 80058ac:	00db      	lsls	r3, r3, #3
 80058ae:	3332      	adds	r3, #50	; 0x32
 80058b0:	4a07      	ldr	r2, [pc, #28]	; (80058d0 <UART_SetConfig+0x3dc>)
 80058b2:	fba2 2303 	umull	r2, r3, r2, r3
 80058b6:	095b      	lsrs	r3, r3, #5
 80058b8:	f003 0207 	and.w	r2, r3, #7
 80058bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	4432      	add	r2, r6
 80058c4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80058c6:	e1a6      	b.n	8005c16 <UART_SetConfig+0x722>
 80058c8:	40011000 	.word	0x40011000
 80058cc:	40011400 	.word	0x40011400
 80058d0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4bd1      	ldr	r3, [pc, #836]	; (8005c20 <UART_SetConfig+0x72c>)
 80058dc:	429a      	cmp	r2, r3
 80058de:	d006      	beq.n	80058ee <UART_SetConfig+0x3fa>
 80058e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	4bcf      	ldr	r3, [pc, #828]	; (8005c24 <UART_SetConfig+0x730>)
 80058e8:	429a      	cmp	r2, r3
 80058ea:	f040 80ca 	bne.w	8005a82 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 80058ee:	f7fe fe85 	bl	80045fc <HAL_RCC_GetPCLK2Freq>
 80058f2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058f6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80058fa:	461c      	mov	r4, r3
 80058fc:	f04f 0500 	mov.w	r5, #0
 8005900:	4622      	mov	r2, r4
 8005902:	462b      	mov	r3, r5
 8005904:	1891      	adds	r1, r2, r2
 8005906:	62b9      	str	r1, [r7, #40]	; 0x28
 8005908:	415b      	adcs	r3, r3
 800590a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800590c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005910:	1912      	adds	r2, r2, r4
 8005912:	eb45 0303 	adc.w	r3, r5, r3
 8005916:	f04f 0000 	mov.w	r0, #0
 800591a:	f04f 0100 	mov.w	r1, #0
 800591e:	00d9      	lsls	r1, r3, #3
 8005920:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005924:	00d0      	lsls	r0, r2, #3
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	eb12 0a04 	adds.w	sl, r2, r4
 800592e:	eb43 0b05 	adc.w	fp, r3, r5
 8005932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	4618      	mov	r0, r3
 800593a:	f04f 0100 	mov.w	r1, #0
 800593e:	f04f 0200 	mov.w	r2, #0
 8005942:	f04f 0300 	mov.w	r3, #0
 8005946:	008b      	lsls	r3, r1, #2
 8005948:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800594c:	0082      	lsls	r2, r0, #2
 800594e:	4650      	mov	r0, sl
 8005950:	4659      	mov	r1, fp
 8005952:	f7fb f8c9 	bl	8000ae8 <__aeabi_uldivmod>
 8005956:	4602      	mov	r2, r0
 8005958:	460b      	mov	r3, r1
 800595a:	4bb3      	ldr	r3, [pc, #716]	; (8005c28 <UART_SetConfig+0x734>)
 800595c:	fba3 2302 	umull	r2, r3, r3, r2
 8005960:	095b      	lsrs	r3, r3, #5
 8005962:	011e      	lsls	r6, r3, #4
 8005964:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005968:	4618      	mov	r0, r3
 800596a:	f04f 0100 	mov.w	r1, #0
 800596e:	4602      	mov	r2, r0
 8005970:	460b      	mov	r3, r1
 8005972:	1894      	adds	r4, r2, r2
 8005974:	623c      	str	r4, [r7, #32]
 8005976:	415b      	adcs	r3, r3
 8005978:	627b      	str	r3, [r7, #36]	; 0x24
 800597a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800597e:	1812      	adds	r2, r2, r0
 8005980:	eb41 0303 	adc.w	r3, r1, r3
 8005984:	f04f 0400 	mov.w	r4, #0
 8005988:	f04f 0500 	mov.w	r5, #0
 800598c:	00dd      	lsls	r5, r3, #3
 800598e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005992:	00d4      	lsls	r4, r2, #3
 8005994:	4622      	mov	r2, r4
 8005996:	462b      	mov	r3, r5
 8005998:	1814      	adds	r4, r2, r0
 800599a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 800599e:	414b      	adcs	r3, r1
 80059a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80059a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f04f 0100 	mov.w	r1, #0
 80059b0:	f04f 0200 	mov.w	r2, #0
 80059b4:	f04f 0300 	mov.w	r3, #0
 80059b8:	008b      	lsls	r3, r1, #2
 80059ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059be:	0082      	lsls	r2, r0, #2
 80059c0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80059c4:	f7fb f890 	bl	8000ae8 <__aeabi_uldivmod>
 80059c8:	4602      	mov	r2, r0
 80059ca:	460b      	mov	r3, r1
 80059cc:	4b96      	ldr	r3, [pc, #600]	; (8005c28 <UART_SetConfig+0x734>)
 80059ce:	fba3 1302 	umull	r1, r3, r3, r2
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	2164      	movs	r1, #100	; 0x64
 80059d6:	fb01 f303 	mul.w	r3, r1, r3
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	011b      	lsls	r3, r3, #4
 80059de:	3332      	adds	r3, #50	; 0x32
 80059e0:	4a91      	ldr	r2, [pc, #580]	; (8005c28 <UART_SetConfig+0x734>)
 80059e2:	fba2 2303 	umull	r2, r3, r2, r3
 80059e6:	095b      	lsrs	r3, r3, #5
 80059e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059ec:	441e      	add	r6, r3
 80059ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059f2:	4618      	mov	r0, r3
 80059f4:	f04f 0100 	mov.w	r1, #0
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	1894      	adds	r4, r2, r2
 80059fe:	61bc      	str	r4, [r7, #24]
 8005a00:	415b      	adcs	r3, r3
 8005a02:	61fb      	str	r3, [r7, #28]
 8005a04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a08:	1812      	adds	r2, r2, r0
 8005a0a:	eb41 0303 	adc.w	r3, r1, r3
 8005a0e:	f04f 0400 	mov.w	r4, #0
 8005a12:	f04f 0500 	mov.w	r5, #0
 8005a16:	00dd      	lsls	r5, r3, #3
 8005a18:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a1c:	00d4      	lsls	r4, r2, #3
 8005a1e:	4622      	mov	r2, r4
 8005a20:	462b      	mov	r3, r5
 8005a22:	1814      	adds	r4, r2, r0
 8005a24:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8005a28:	414b      	adcs	r3, r1
 8005a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005a2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f04f 0100 	mov.w	r1, #0
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	008b      	lsls	r3, r1, #2
 8005a44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a48:	0082      	lsls	r2, r0, #2
 8005a4a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8005a4e:	f7fb f84b 	bl	8000ae8 <__aeabi_uldivmod>
 8005a52:	4602      	mov	r2, r0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4b74      	ldr	r3, [pc, #464]	; (8005c28 <UART_SetConfig+0x734>)
 8005a58:	fba3 1302 	umull	r1, r3, r3, r2
 8005a5c:	095b      	lsrs	r3, r3, #5
 8005a5e:	2164      	movs	r1, #100	; 0x64
 8005a60:	fb01 f303 	mul.w	r3, r1, r3
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	011b      	lsls	r3, r3, #4
 8005a68:	3332      	adds	r3, #50	; 0x32
 8005a6a:	4a6f      	ldr	r2, [pc, #444]	; (8005c28 <UART_SetConfig+0x734>)
 8005a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a70:	095b      	lsrs	r3, r3, #5
 8005a72:	f003 020f 	and.w	r2, r3, #15
 8005a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4432      	add	r2, r6
 8005a7e:	609a      	str	r2, [r3, #8]
 8005a80:	e0c9      	b.n	8005c16 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a82:	f7fe fda7 	bl	80045d4 <HAL_RCC_GetPCLK1Freq>
 8005a86:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a8a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a8e:	461c      	mov	r4, r3
 8005a90:	f04f 0500 	mov.w	r5, #0
 8005a94:	4622      	mov	r2, r4
 8005a96:	462b      	mov	r3, r5
 8005a98:	1891      	adds	r1, r2, r2
 8005a9a:	6139      	str	r1, [r7, #16]
 8005a9c:	415b      	adcs	r3, r3
 8005a9e:	617b      	str	r3, [r7, #20]
 8005aa0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005aa4:	1912      	adds	r2, r2, r4
 8005aa6:	eb45 0303 	adc.w	r3, r5, r3
 8005aaa:	f04f 0000 	mov.w	r0, #0
 8005aae:	f04f 0100 	mov.w	r1, #0
 8005ab2:	00d9      	lsls	r1, r3, #3
 8005ab4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ab8:	00d0      	lsls	r0, r2, #3
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	eb12 0804 	adds.w	r8, r2, r4
 8005ac2:	eb43 0905 	adc.w	r9, r3, r5
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f04f 0100 	mov.w	r1, #0
 8005ad2:	f04f 0200 	mov.w	r2, #0
 8005ad6:	f04f 0300 	mov.w	r3, #0
 8005ada:	008b      	lsls	r3, r1, #2
 8005adc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ae0:	0082      	lsls	r2, r0, #2
 8005ae2:	4640      	mov	r0, r8
 8005ae4:	4649      	mov	r1, r9
 8005ae6:	f7fa ffff 	bl	8000ae8 <__aeabi_uldivmod>
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4b4e      	ldr	r3, [pc, #312]	; (8005c28 <UART_SetConfig+0x734>)
 8005af0:	fba3 2302 	umull	r2, r3, r3, r2
 8005af4:	095b      	lsrs	r3, r3, #5
 8005af6:	011e      	lsls	r6, r3, #4
 8005af8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005afc:	4618      	mov	r0, r3
 8005afe:	f04f 0100 	mov.w	r1, #0
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	1894      	adds	r4, r2, r2
 8005b08:	60bc      	str	r4, [r7, #8]
 8005b0a:	415b      	adcs	r3, r3
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b12:	1812      	adds	r2, r2, r0
 8005b14:	eb41 0303 	adc.w	r3, r1, r3
 8005b18:	f04f 0400 	mov.w	r4, #0
 8005b1c:	f04f 0500 	mov.w	r5, #0
 8005b20:	00dd      	lsls	r5, r3, #3
 8005b22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005b26:	00d4      	lsls	r4, r2, #3
 8005b28:	4622      	mov	r2, r4
 8005b2a:	462b      	mov	r3, r5
 8005b2c:	1814      	adds	r4, r2, r0
 8005b2e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8005b32:	414b      	adcs	r3, r1
 8005b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f04f 0100 	mov.w	r1, #0
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	008b      	lsls	r3, r1, #2
 8005b4e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005b52:	0082      	lsls	r2, r0, #2
 8005b54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b58:	f7fa ffc6 	bl	8000ae8 <__aeabi_uldivmod>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4b31      	ldr	r3, [pc, #196]	; (8005c28 <UART_SetConfig+0x734>)
 8005b62:	fba3 1302 	umull	r1, r3, r3, r2
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	2164      	movs	r1, #100	; 0x64
 8005b6a:	fb01 f303 	mul.w	r3, r1, r3
 8005b6e:	1ad3      	subs	r3, r2, r3
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	3332      	adds	r3, #50	; 0x32
 8005b74:	4a2c      	ldr	r2, [pc, #176]	; (8005c28 <UART_SetConfig+0x734>)
 8005b76:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7a:	095b      	lsrs	r3, r3, #5
 8005b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b80:	441e      	add	r6, r3
 8005b82:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b86:	4618      	mov	r0, r3
 8005b88:	f04f 0100 	mov.w	r1, #0
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	1894      	adds	r4, r2, r2
 8005b92:	603c      	str	r4, [r7, #0]
 8005b94:	415b      	adcs	r3, r3
 8005b96:	607b      	str	r3, [r7, #4]
 8005b98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b9c:	1812      	adds	r2, r2, r0
 8005b9e:	eb41 0303 	adc.w	r3, r1, r3
 8005ba2:	f04f 0400 	mov.w	r4, #0
 8005ba6:	f04f 0500 	mov.w	r5, #0
 8005baa:	00dd      	lsls	r5, r3, #3
 8005bac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bb0:	00d4      	lsls	r4, r2, #3
 8005bb2:	4622      	mov	r2, r4
 8005bb4:	462b      	mov	r3, r5
 8005bb6:	1814      	adds	r4, r2, r0
 8005bb8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8005bbc:	414b      	adcs	r3, r1
 8005bbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f04f 0100 	mov.w	r1, #0
 8005bce:	f04f 0200 	mov.w	r2, #0
 8005bd2:	f04f 0300 	mov.w	r3, #0
 8005bd6:	008b      	lsls	r3, r1, #2
 8005bd8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005bdc:	0082      	lsls	r2, r0, #2
 8005bde:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005be2:	f7fa ff81 	bl	8000ae8 <__aeabi_uldivmod>
 8005be6:	4602      	mov	r2, r0
 8005be8:	460b      	mov	r3, r1
 8005bea:	4b0f      	ldr	r3, [pc, #60]	; (8005c28 <UART_SetConfig+0x734>)
 8005bec:	fba3 1302 	umull	r1, r3, r3, r2
 8005bf0:	095b      	lsrs	r3, r3, #5
 8005bf2:	2164      	movs	r1, #100	; 0x64
 8005bf4:	fb01 f303 	mul.w	r3, r1, r3
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	011b      	lsls	r3, r3, #4
 8005bfc:	3332      	adds	r3, #50	; 0x32
 8005bfe:	4a0a      	ldr	r2, [pc, #40]	; (8005c28 <UART_SetConfig+0x734>)
 8005c00:	fba2 2303 	umull	r2, r3, r2, r3
 8005c04:	095b      	lsrs	r3, r3, #5
 8005c06:	f003 020f 	and.w	r2, r3, #15
 8005c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4432      	add	r2, r6
 8005c12:	609a      	str	r2, [r3, #8]
}
 8005c14:	e7ff      	b.n	8005c16 <UART_SetConfig+0x722>
 8005c16:	bf00      	nop
 8005c18:	37f4      	adds	r7, #244	; 0xf4
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c20:	40011000 	.word	0x40011000
 8005c24:	40011400 	.word	0x40011400
 8005c28:	51eb851f 	.word	0x51eb851f

08005c2c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	4603      	mov	r3, r0
 8005c34:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c3e:	2b84      	cmp	r3, #132	; 0x84
 8005c40:	d005      	beq.n	8005c4e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005c42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4413      	add	r3, r2
 8005c4a:	3303      	adds	r3, #3
 8005c4c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b083      	sub	sp, #12
 8005c60:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c62:	f3ef 8305 	mrs	r3, IPSR
 8005c66:	607b      	str	r3, [r7, #4]
  return(result);
 8005c68:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	bf14      	ite	ne
 8005c6e:	2301      	movne	r3, #1
 8005c70:	2300      	moveq	r3, #0
 8005c72:	b2db      	uxtb	r3, r3
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005c84:	f001 f902 	bl	8006e8c <vTaskStartScheduler>
  
  return osOK;
 8005c88:	2300      	movs	r3, #0
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	bd80      	pop	{r7, pc}

08005c8e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005c8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c90:	b089      	sub	sp, #36	; 0x24
 8005c92:	af04      	add	r7, sp, #16
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d020      	beq.n	8005ce2 <osThreadCreate+0x54>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d01c      	beq.n	8005ce2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685c      	ldr	r4, [r3, #4]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681d      	ldr	r5, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	691e      	ldr	r6, [r3, #16]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f7ff ffb6 	bl	8005c2c <makeFreeRtosPriority>
 8005cc0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	695b      	ldr	r3, [r3, #20]
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cca:	9202      	str	r2, [sp, #8]
 8005ccc:	9301      	str	r3, [sp, #4]
 8005cce:	9100      	str	r1, [sp, #0]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	4632      	mov	r2, r6
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	4620      	mov	r0, r4
 8005cd8:	f000 ff10 	bl	8006afc <xTaskCreateStatic>
 8005cdc:	4603      	mov	r3, r0
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	e01c      	b.n	8005d1c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685c      	ldr	r4, [r3, #4]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cee:	b29e      	uxth	r6, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff ff98 	bl	8005c2c <makeFreeRtosPriority>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	f107 030c 	add.w	r3, r7, #12
 8005d02:	9301      	str	r3, [sp, #4]
 8005d04:	9200      	str	r2, [sp, #0]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	4632      	mov	r2, r6
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	4620      	mov	r0, r4
 8005d0e:	f000 ff52 	bl	8006bb6 <xTaskCreate>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d001      	beq.n	8005d1c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	e000      	b.n	8005d1e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3714      	adds	r7, #20
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d26 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d001      	beq.n	8005d3c <osDelay+0x16>
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	e000      	b.n	8005d3e <osDelay+0x18>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f001 f870 	bl	8006e24 <vTaskDelay>
  
  return osOK;
 8005d44:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005d4e:	b590      	push	{r4, r7, lr}
 8005d50:	b085      	sub	sp, #20
 8005d52:	af02      	add	r7, sp, #8
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d011      	beq.n	8005d84 <osMessageCreate+0x36>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00d      	beq.n	8005d84 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6859      	ldr	r1, [r3, #4]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	2400      	movs	r4, #0
 8005d7a:	9400      	str	r4, [sp, #0]
 8005d7c:	f000 f9e0 	bl	8006140 <xQueueGenericCreateStatic>
 8005d80:	4603      	mov	r3, r0
 8005d82:	e008      	b.n	8005d96 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6818      	ldr	r0, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	4619      	mov	r1, r3
 8005d90:	f000 fa4e 	bl	8006230 <xQueueGenericCreate>
 8005d94:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd90      	pop	{r4, r7, pc}
	...

08005da0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005dac:	2300      	movs	r3, #0
 8005dae:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d101      	bne.n	8005dbe <osMessagePut+0x1e>
    ticks = 1;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005dbe:	f7ff ff4d 	bl	8005c5c <inHandlerMode>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d018      	beq.n	8005dfa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005dc8:	f107 0210 	add.w	r2, r7, #16
 8005dcc:	f107 0108 	add.w	r1, r7, #8
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	68f8      	ldr	r0, [r7, #12]
 8005dd4:	f000 fb8a 	bl	80064ec <xQueueGenericSendFromISR>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d001      	beq.n	8005de2 <osMessagePut+0x42>
      return osErrorOS;
 8005dde:	23ff      	movs	r3, #255	; 0xff
 8005de0:	e018      	b.n	8005e14 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d014      	beq.n	8005e12 <osMessagePut+0x72>
 8005de8:	4b0c      	ldr	r3, [pc, #48]	; (8005e1c <osMessagePut+0x7c>)
 8005dea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	e00b      	b.n	8005e12 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005dfa:	f107 0108 	add.w	r1, r7, #8
 8005dfe:	2300      	movs	r3, #0
 8005e00:	697a      	ldr	r2, [r7, #20]
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fa74 	bl	80062f0 <xQueueGenericSend>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d001      	beq.n	8005e12 <osMessagePut+0x72>
      return osErrorOS;
 8005e0e:	23ff      	movs	r3, #255	; 0xff
 8005e10:	e000      	b.n	8005e14 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	e000ed04 	.word	0xe000ed04

08005e20 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005e20:	b590      	push	{r4, r7, lr}
 8005e22:	b08b      	sub	sp, #44	; 0x2c
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005e30:	2300      	movs	r3, #0
 8005e32:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10a      	bne.n	8005e50 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005e3a:	2380      	movs	r3, #128	; 0x80
 8005e3c:	617b      	str	r3, [r7, #20]
    return event;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	461c      	mov	r4, r3
 8005e42:	f107 0314 	add.w	r3, r7, #20
 8005e46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e4e:	e054      	b.n	8005efa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005e50:	2300      	movs	r3, #0
 8005e52:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005e54:	2300      	movs	r3, #0
 8005e56:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e5e:	d103      	bne.n	8005e68 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005e60:	f04f 33ff 	mov.w	r3, #4294967295
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
 8005e66:	e009      	b.n	8005e7c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d006      	beq.n	8005e7c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <osMessageGet+0x5c>
      ticks = 1;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005e7c:	f7ff feee 	bl	8005c5c <inHandlerMode>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d01c      	beq.n	8005ec0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005e86:	f107 0220 	add.w	r2, r7, #32
 8005e8a:	f107 0314 	add.w	r3, r7, #20
 8005e8e:	3304      	adds	r3, #4
 8005e90:	4619      	mov	r1, r3
 8005e92:	68b8      	ldr	r0, [r7, #8]
 8005e94:	f000 fca2 	bl	80067dc <xQueueReceiveFromISR>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d102      	bne.n	8005ea4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005e9e:	2310      	movs	r3, #16
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	e001      	b.n	8005ea8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d01d      	beq.n	8005eea <osMessageGet+0xca>
 8005eae:	4b15      	ldr	r3, [pc, #84]	; (8005f04 <osMessageGet+0xe4>)
 8005eb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eb4:	601a      	str	r2, [r3, #0]
 8005eb6:	f3bf 8f4f 	dsb	sy
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	e014      	b.n	8005eea <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005ec0:	f107 0314 	add.w	r3, r7, #20
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ec8:	4619      	mov	r1, r3
 8005eca:	68b8      	ldr	r0, [r7, #8]
 8005ecc:	f000 fba6 	bl	800661c <xQueueReceive>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d102      	bne.n	8005edc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005ed6:	2310      	movs	r3, #16
 8005ed8:	617b      	str	r3, [r7, #20]
 8005eda:	e006      	b.n	8005eea <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d101      	bne.n	8005ee6 <osMessageGet+0xc6>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e000      	b.n	8005ee8 <osMessageGet+0xc8>
 8005ee6:	2340      	movs	r3, #64	; 0x40
 8005ee8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	461c      	mov	r4, r3
 8005eee:	f107 0314 	add.w	r3, r7, #20
 8005ef2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005ef6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	372c      	adds	r7, #44	; 0x2c
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd90      	pop	{r4, r7, pc}
 8005f02:	bf00      	nop
 8005f04:	e000ed04 	.word	0xe000ed04

08005f08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f103 0208 	add.w	r2, r3, #8
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f103 0208 	add.w	r2, r3, #8
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f103 0208 	add.w	r2, r3, #8
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f62:	b480      	push	{r7}
 8005f64:	b085      	sub	sp, #20
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	601a      	str	r2, [r3, #0]
}
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc0:	d103      	bne.n	8005fca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e00c      	b.n	8005fe4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e002      	b.n	8005fd8 <vListInsert+0x2e>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d2f6      	bcs.n	8005fd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	601a      	str	r2, [r3, #0]
}
 8006010:	bf00      	nop
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6892      	ldr	r2, [r2, #8]
 8006032:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6852      	ldr	r2, [r2, #4]
 800603c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	429a      	cmp	r2, r3
 8006046:	d103      	bne.n	8006050 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	1e5a      	subs	r2, r3, #1
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10a      	bne.n	800609a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006096:	bf00      	nop
 8006098:	e7fe      	b.n	8006098 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800609a:	f001 fd2b 	bl	8007af4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681a      	ldr	r2, [r3, #0]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a6:	68f9      	ldr	r1, [r7, #12]
 80060a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060aa:	fb01 f303 	mul.w	r3, r1, r3
 80060ae:	441a      	add	r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681a      	ldr	r2, [r3, #0]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	3b01      	subs	r3, #1
 80060cc:	68f9      	ldr	r1, [r7, #12]
 80060ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060d0:	fb01 f303 	mul.w	r3, r1, r3
 80060d4:	441a      	add	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	22ff      	movs	r2, #255	; 0xff
 80060de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	22ff      	movs	r2, #255	; 0xff
 80060e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d114      	bne.n	800611a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d01a      	beq.n	800612e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	3310      	adds	r3, #16
 80060fc:	4618      	mov	r0, r3
 80060fe:	f001 f907 	bl	8007310 <xTaskRemoveFromEventList>
 8006102:	4603      	mov	r3, r0
 8006104:	2b00      	cmp	r3, #0
 8006106:	d012      	beq.n	800612e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006108:	4b0c      	ldr	r3, [pc, #48]	; (800613c <xQueueGenericReset+0xcc>)
 800610a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	f3bf 8f4f 	dsb	sy
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	e009      	b.n	800612e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3310      	adds	r3, #16
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff fef2 	bl	8005f08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	3324      	adds	r3, #36	; 0x24
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff feed 	bl	8005f08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800612e:	f001 fd11 	bl	8007b54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006132:	2301      	movs	r3, #1
}
 8006134:	4618      	mov	r0, r3
 8006136:	3710      	adds	r7, #16
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}
 800613c:	e000ed04 	.word	0xe000ed04

08006140 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006140:	b580      	push	{r7, lr}
 8006142:	b08e      	sub	sp, #56	; 0x38
 8006144:	af02      	add	r7, sp, #8
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10a      	bne.n	800616a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006182:	bf00      	nop
 8006184:	e7fe      	b.n	8006184 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <xQueueGenericCreateStatic+0x52>
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <xQueueGenericCreateStatic+0x56>
 8006192:	2301      	movs	r3, #1
 8006194:	e000      	b.n	8006198 <xQueueGenericCreateStatic+0x58>
 8006196:	2300      	movs	r3, #0
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	623b      	str	r3, [r7, #32]
}
 80061ae:	bf00      	nop
 80061b0:	e7fe      	b.n	80061b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d102      	bne.n	80061be <xQueueGenericCreateStatic+0x7e>
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d101      	bne.n	80061c2 <xQueueGenericCreateStatic+0x82>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <xQueueGenericCreateStatic+0x84>
 80061c2:	2300      	movs	r3, #0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80061c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061cc:	f383 8811 	msr	BASEPRI, r3
 80061d0:	f3bf 8f6f 	isb	sy
 80061d4:	f3bf 8f4f 	dsb	sy
 80061d8:	61fb      	str	r3, [r7, #28]
}
 80061da:	bf00      	nop
 80061dc:	e7fe      	b.n	80061dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061de:	2348      	movs	r3, #72	; 0x48
 80061e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2b48      	cmp	r3, #72	; 0x48
 80061e6:	d00a      	beq.n	80061fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	61bb      	str	r3, [r7, #24]
}
 80061fa:	bf00      	nop
 80061fc:	e7fe      	b.n	80061fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00d      	beq.n	8006226 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800620a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620c:	2201      	movs	r2, #1
 800620e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006212:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	4613      	mov	r3, r2
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	68b9      	ldr	r1, [r7, #8]
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f845 	bl	80062b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006228:	4618      	mov	r0, r3
 800622a:	3730      	adds	r7, #48	; 0x30
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08a      	sub	sp, #40	; 0x28
 8006234:	af02      	add	r7, sp, #8
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	4613      	mov	r3, r2
 800623c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	613b      	str	r3, [r7, #16]
}
 8006256:	bf00      	nop
 8006258:	e7fe      	b.n	8006258 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d102      	bne.n	8006266 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006260:	2300      	movs	r3, #0
 8006262:	61fb      	str	r3, [r7, #28]
 8006264:	e004      	b.n	8006270 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	fb02 f303 	mul.w	r3, r2, r3
 800626e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	3348      	adds	r3, #72	; 0x48
 8006274:	4618      	mov	r0, r3
 8006276:	f001 fd5f 	bl	8007d38 <pvPortMalloc>
 800627a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d011      	beq.n	80062a6 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	3348      	adds	r3, #72	; 0x48
 800628a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006294:	79fa      	ldrb	r2, [r7, #7]
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	4613      	mov	r3, r2
 800629c:	697a      	ldr	r2, [r7, #20]
 800629e:	68b9      	ldr	r1, [r7, #8]
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f805 	bl	80062b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062a6:	69bb      	ldr	r3, [r7, #24]
	}
 80062a8:	4618      	mov	r0, r3
 80062aa:	3720      	adds	r7, #32
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b084      	sub	sp, #16
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
 80062bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d103      	bne.n	80062cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	e002      	b.n	80062d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062cc:	69bb      	ldr	r3, [r7, #24]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	68ba      	ldr	r2, [r7, #8]
 80062dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062de:	2101      	movs	r1, #1
 80062e0:	69b8      	ldr	r0, [r7, #24]
 80062e2:	f7ff fec5 	bl	8006070 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062e6:	bf00      	nop
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08e      	sub	sp, #56	; 0x38
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80062fe:	2300      	movs	r3, #0
 8006300:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10a      	bne.n	8006322 <xQueueGenericSend+0x32>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800631e:	bf00      	nop
 8006320:	e7fe      	b.n	8006320 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d103      	bne.n	8006330 <xQueueGenericSend+0x40>
 8006328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800632a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632c:	2b00      	cmp	r3, #0
 800632e:	d101      	bne.n	8006334 <xQueueGenericSend+0x44>
 8006330:	2301      	movs	r3, #1
 8006332:	e000      	b.n	8006336 <xQueueGenericSend+0x46>
 8006334:	2300      	movs	r3, #0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10a      	bne.n	8006350 <xQueueGenericSend+0x60>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800634c:	bf00      	nop
 800634e:	e7fe      	b.n	800634e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	2b02      	cmp	r3, #2
 8006354:	d103      	bne.n	800635e <xQueueGenericSend+0x6e>
 8006356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800635a:	2b01      	cmp	r3, #1
 800635c:	d101      	bne.n	8006362 <xQueueGenericSend+0x72>
 800635e:	2301      	movs	r3, #1
 8006360:	e000      	b.n	8006364 <xQueueGenericSend+0x74>
 8006362:	2300      	movs	r3, #0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <xQueueGenericSend+0x8e>
	__asm volatile
 8006368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636c:	f383 8811 	msr	BASEPRI, r3
 8006370:	f3bf 8f6f 	isb	sy
 8006374:	f3bf 8f4f 	dsb	sy
 8006378:	623b      	str	r3, [r7, #32]
}
 800637a:	bf00      	nop
 800637c:	e7fe      	b.n	800637c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800637e:	f001 f983 	bl	8007688 <xTaskGetSchedulerState>
 8006382:	4603      	mov	r3, r0
 8006384:	2b00      	cmp	r3, #0
 8006386:	d102      	bne.n	800638e <xQueueGenericSend+0x9e>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <xQueueGenericSend+0xa2>
 800638e:	2301      	movs	r3, #1
 8006390:	e000      	b.n	8006394 <xQueueGenericSend+0xa4>
 8006392:	2300      	movs	r3, #0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d10a      	bne.n	80063ae <xQueueGenericSend+0xbe>
	__asm volatile
 8006398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800639c:	f383 8811 	msr	BASEPRI, r3
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	61fb      	str	r3, [r7, #28]
}
 80063aa:	bf00      	nop
 80063ac:	e7fe      	b.n	80063ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063ae:	f001 fba1 	bl	8007af4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d302      	bcc.n	80063c4 <xQueueGenericSend+0xd4>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d129      	bne.n	8006418 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	68b9      	ldr	r1, [r7, #8]
 80063c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063ca:	f000 fa87 	bl	80068dc <prvCopyDataToQueue>
 80063ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d010      	beq.n	80063fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063da:	3324      	adds	r3, #36	; 0x24
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 ff97 	bl	8007310 <xTaskRemoveFromEventList>
 80063e2:	4603      	mov	r3, r0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d013      	beq.n	8006410 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80063e8:	4b3f      	ldr	r3, [pc, #252]	; (80064e8 <xQueueGenericSend+0x1f8>)
 80063ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063ee:	601a      	str	r2, [r3, #0]
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	e00a      	b.n	8006410 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80063fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d007      	beq.n	8006410 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006400:	4b39      	ldr	r3, [pc, #228]	; (80064e8 <xQueueGenericSend+0x1f8>)
 8006402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006410:	f001 fba0 	bl	8007b54 <vPortExitCritical>
				return pdPASS;
 8006414:	2301      	movs	r3, #1
 8006416:	e063      	b.n	80064e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d103      	bne.n	8006426 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800641e:	f001 fb99 	bl	8007b54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006422:	2300      	movs	r3, #0
 8006424:	e05c      	b.n	80064e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006428:	2b00      	cmp	r3, #0
 800642a:	d106      	bne.n	800643a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800642c:	f107 0314 	add.w	r3, r7, #20
 8006430:	4618      	mov	r0, r3
 8006432:	f000 ffcf 	bl	80073d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006436:	2301      	movs	r3, #1
 8006438:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800643a:	f001 fb8b 	bl	8007b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800643e:	f000 fd85 	bl	8006f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006442:	f001 fb57 	bl	8007af4 <vPortEnterCritical>
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800644c:	b25b      	sxtb	r3, r3
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006452:	d103      	bne.n	800645c <xQueueGenericSend+0x16c>
 8006454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006456:	2200      	movs	r2, #0
 8006458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800645e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006462:	b25b      	sxtb	r3, r3
 8006464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006468:	d103      	bne.n	8006472 <xQueueGenericSend+0x182>
 800646a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006472:	f001 fb6f 	bl	8007b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006476:	1d3a      	adds	r2, r7, #4
 8006478:	f107 0314 	add.w	r3, r7, #20
 800647c:	4611      	mov	r1, r2
 800647e:	4618      	mov	r0, r3
 8006480:	f000 ffbe 	bl	8007400 <xTaskCheckForTimeOut>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d124      	bne.n	80064d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800648a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800648c:	f000 fb1e 	bl	8006acc <prvIsQueueFull>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d018      	beq.n	80064c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006498:	3310      	adds	r3, #16
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	4611      	mov	r1, r2
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 ff12 	bl	80072c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064a6:	f000 faa9 	bl	80069fc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064aa:	f000 fd5d 	bl	8006f68 <xTaskResumeAll>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f47f af7c 	bne.w	80063ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80064b6:	4b0c      	ldr	r3, [pc, #48]	; (80064e8 <xQueueGenericSend+0x1f8>)
 80064b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	f3bf 8f6f 	isb	sy
 80064c6:	e772      	b.n	80063ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064ca:	f000 fa97 	bl	80069fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064ce:	f000 fd4b 	bl	8006f68 <xTaskResumeAll>
 80064d2:	e76c      	b.n	80063ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80064d6:	f000 fa91 	bl	80069fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064da:	f000 fd45 	bl	8006f68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80064de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3738      	adds	r7, #56	; 0x38
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	e000ed04 	.word	0xe000ed04

080064ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b08e      	sub	sp, #56	; 0x38
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	60f8      	str	r0, [r7, #12]
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	607a      	str	r2, [r7, #4]
 80064f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80064fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006500:	2b00      	cmp	r3, #0
 8006502:	d10a      	bne.n	800651a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006508:	f383 8811 	msr	BASEPRI, r3
 800650c:	f3bf 8f6f 	isb	sy
 8006510:	f3bf 8f4f 	dsb	sy
 8006514:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006516:	bf00      	nop
 8006518:	e7fe      	b.n	8006518 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d103      	bne.n	8006528 <xQueueGenericSendFromISR+0x3c>
 8006520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <xQueueGenericSendFromISR+0x40>
 8006528:	2301      	movs	r3, #1
 800652a:	e000      	b.n	800652e <xQueueGenericSendFromISR+0x42>
 800652c:	2300      	movs	r3, #0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10a      	bne.n	8006548 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	623b      	str	r3, [r7, #32]
}
 8006544:	bf00      	nop
 8006546:	e7fe      	b.n	8006546 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2b02      	cmp	r3, #2
 800654c:	d103      	bne.n	8006556 <xQueueGenericSendFromISR+0x6a>
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006552:	2b01      	cmp	r3, #1
 8006554:	d101      	bne.n	800655a <xQueueGenericSendFromISR+0x6e>
 8006556:	2301      	movs	r3, #1
 8006558:	e000      	b.n	800655c <xQueueGenericSendFromISR+0x70>
 800655a:	2300      	movs	r3, #0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10a      	bne.n	8006576 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006564:	f383 8811 	msr	BASEPRI, r3
 8006568:	f3bf 8f6f 	isb	sy
 800656c:	f3bf 8f4f 	dsb	sy
 8006570:	61fb      	str	r3, [r7, #28]
}
 8006572:	bf00      	nop
 8006574:	e7fe      	b.n	8006574 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006576:	f001 fb9f 	bl	8007cb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800657a:	f3ef 8211 	mrs	r2, BASEPRI
 800657e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	61ba      	str	r2, [r7, #24]
 8006590:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006592:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800659e:	429a      	cmp	r2, r3
 80065a0:	d302      	bcc.n	80065a8 <xQueueGenericSendFromISR+0xbc>
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d12c      	bne.n	8006602 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80065ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065b2:	683a      	ldr	r2, [r7, #0]
 80065b4:	68b9      	ldr	r1, [r7, #8]
 80065b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80065b8:	f000 f990 	bl	80068dc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065bc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c4:	d112      	bne.n	80065ec <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d016      	beq.n	80065fc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d0:	3324      	adds	r3, #36	; 0x24
 80065d2:	4618      	mov	r0, r3
 80065d4:	f000 fe9c 	bl	8007310 <xTaskRemoveFromEventList>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00e      	beq.n	80065fc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d00b      	beq.n	80065fc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	e007      	b.n	80065fc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80065ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80065f0:	3301      	adds	r3, #1
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	b25a      	sxtb	r2, r3
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80065fc:	2301      	movs	r3, #1
 80065fe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006600:	e001      	b.n	8006606 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006602:	2300      	movs	r3, #0
 8006604:	637b      	str	r3, [r7, #52]	; 0x34
 8006606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006608:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006610:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006614:	4618      	mov	r0, r3
 8006616:	3738      	adds	r7, #56	; 0x38
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08c      	sub	sp, #48	; 0x30
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006628:	2300      	movs	r3, #0
 800662a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	2b00      	cmp	r3, #0
 8006634:	d10a      	bne.n	800664c <xQueueReceive+0x30>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	623b      	str	r3, [r7, #32]
}
 8006648:	bf00      	nop
 800664a:	e7fe      	b.n	800664a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d103      	bne.n	800665a <xQueueReceive+0x3e>
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <xQueueReceive+0x42>
 800665a:	2301      	movs	r3, #1
 800665c:	e000      	b.n	8006660 <xQueueReceive+0x44>
 800665e:	2300      	movs	r3, #0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10a      	bne.n	800667a <xQueueReceive+0x5e>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	61fb      	str	r3, [r7, #28]
}
 8006676:	bf00      	nop
 8006678:	e7fe      	b.n	8006678 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800667a:	f001 f805 	bl	8007688 <xTaskGetSchedulerState>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d102      	bne.n	800668a <xQueueReceive+0x6e>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <xQueueReceive+0x72>
 800668a:	2301      	movs	r3, #1
 800668c:	e000      	b.n	8006690 <xQueueReceive+0x74>
 800668e:	2300      	movs	r3, #0
 8006690:	2b00      	cmp	r3, #0
 8006692:	d10a      	bne.n	80066aa <xQueueReceive+0x8e>
	__asm volatile
 8006694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006698:	f383 8811 	msr	BASEPRI, r3
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f3bf 8f4f 	dsb	sy
 80066a4:	61bb      	str	r3, [r7, #24]
}
 80066a6:	bf00      	nop
 80066a8:	e7fe      	b.n	80066a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066aa:	f001 fa23 	bl	8007af4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d01f      	beq.n	80066fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066ba:	68b9      	ldr	r1, [r7, #8]
 80066bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066be:	f000 f977 	bl	80069b0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80066c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c4:	1e5a      	subs	r2, r3, #1
 80066c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00f      	beq.n	80066f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066d4:	3310      	adds	r3, #16
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fe1a 	bl	8007310 <xTaskRemoveFromEventList>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d007      	beq.n	80066f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80066e2:	4b3d      	ldr	r3, [pc, #244]	; (80067d8 <xQueueReceive+0x1bc>)
 80066e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e8:	601a      	str	r2, [r3, #0]
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80066f2:	f001 fa2f 	bl	8007b54 <vPortExitCritical>
				return pdPASS;
 80066f6:	2301      	movs	r3, #1
 80066f8:	e069      	b.n	80067ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d103      	bne.n	8006708 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006700:	f001 fa28 	bl	8007b54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006704:	2300      	movs	r3, #0
 8006706:	e062      	b.n	80067ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670a:	2b00      	cmp	r3, #0
 800670c:	d106      	bne.n	800671c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800670e:	f107 0310 	add.w	r3, r7, #16
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fe5e 	bl	80073d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006718:	2301      	movs	r3, #1
 800671a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800671c:	f001 fa1a 	bl	8007b54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006720:	f000 fc14 	bl	8006f4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006724:	f001 f9e6 	bl	8007af4 <vPortEnterCritical>
 8006728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800672a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800672e:	b25b      	sxtb	r3, r3
 8006730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006734:	d103      	bne.n	800673e <xQueueReceive+0x122>
 8006736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006738:	2200      	movs	r2, #0
 800673a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800673e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006744:	b25b      	sxtb	r3, r3
 8006746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800674a:	d103      	bne.n	8006754 <xQueueReceive+0x138>
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	2200      	movs	r2, #0
 8006750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006754:	f001 f9fe 	bl	8007b54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006758:	1d3a      	adds	r2, r7, #4
 800675a:	f107 0310 	add.w	r3, r7, #16
 800675e:	4611      	mov	r1, r2
 8006760:	4618      	mov	r0, r3
 8006762:	f000 fe4d 	bl	8007400 <xTaskCheckForTimeOut>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d123      	bne.n	80067b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800676c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800676e:	f000 f997 	bl	8006aa0 <prvIsQueueEmpty>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d017      	beq.n	80067a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677a:	3324      	adds	r3, #36	; 0x24
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	4611      	mov	r1, r2
 8006780:	4618      	mov	r0, r3
 8006782:	f000 fda1 	bl	80072c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006788:	f000 f938 	bl	80069fc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800678c:	f000 fbec 	bl	8006f68 <xTaskResumeAll>
 8006790:	4603      	mov	r3, r0
 8006792:	2b00      	cmp	r3, #0
 8006794:	d189      	bne.n	80066aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006796:	4b10      	ldr	r3, [pc, #64]	; (80067d8 <xQueueReceive+0x1bc>)
 8006798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800679c:	601a      	str	r2, [r3, #0]
 800679e:	f3bf 8f4f 	dsb	sy
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	e780      	b.n	80066aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067aa:	f000 f927 	bl	80069fc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067ae:	f000 fbdb 	bl	8006f68 <xTaskResumeAll>
 80067b2:	e77a      	b.n	80066aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067b6:	f000 f921 	bl	80069fc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067ba:	f000 fbd5 	bl	8006f68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067c0:	f000 f96e 	bl	8006aa0 <prvIsQueueEmpty>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f43f af6f 	beq.w	80066aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80067cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3730      	adds	r7, #48	; 0x30
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	e000ed04 	.word	0xe000ed04

080067dc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b08e      	sub	sp, #56	; 0x38
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80067ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10a      	bne.n	8006808 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	623b      	str	r3, [r7, #32]
}
 8006804:	bf00      	nop
 8006806:	e7fe      	b.n	8006806 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d103      	bne.n	8006816 <xQueueReceiveFromISR+0x3a>
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <xQueueReceiveFromISR+0x3e>
 8006816:	2301      	movs	r3, #1
 8006818:	e000      	b.n	800681c <xQueueReceiveFromISR+0x40>
 800681a:	2300      	movs	r3, #0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10a      	bne.n	8006836 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	61fb      	str	r3, [r7, #28]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006836:	f001 fa3f 	bl	8007cb8 <vPortValidateInterruptPriority>
	__asm volatile
 800683a:	f3ef 8211 	mrs	r2, BASEPRI
 800683e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006842:	f383 8811 	msr	BASEPRI, r3
 8006846:	f3bf 8f6f 	isb	sy
 800684a:	f3bf 8f4f 	dsb	sy
 800684e:	61ba      	str	r2, [r7, #24]
 8006850:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006852:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006854:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	2b00      	cmp	r3, #0
 8006860:	d02f      	beq.n	80068c2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800686c:	68b9      	ldr	r1, [r7, #8]
 800686e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006870:	f000 f89e 	bl	80069b0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006876:	1e5a      	subs	r2, r3, #1
 8006878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800687a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800687c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006884:	d112      	bne.n	80068ac <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d016      	beq.n	80068bc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800688e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006890:	3310      	adds	r3, #16
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fd3c 	bl	8007310 <xTaskRemoveFromEventList>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00e      	beq.n	80068bc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00b      	beq.n	80068bc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	601a      	str	r2, [r3, #0]
 80068aa:	e007      	b.n	80068bc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80068ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068b0:	3301      	adds	r3, #1
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	b25a      	sxtb	r2, r3
 80068b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80068bc:	2301      	movs	r3, #1
 80068be:	637b      	str	r3, [r7, #52]	; 0x34
 80068c0:	e001      	b.n	80068c6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	637b      	str	r3, [r7, #52]	; 0x34
 80068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f383 8811 	msr	BASEPRI, r3
}
 80068d0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80068d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3738      	adds	r7, #56	; 0x38
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b086      	sub	sp, #24
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80068e8:	2300      	movs	r3, #0
 80068ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10d      	bne.n	8006916 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d14d      	bne.n	800699e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fedc 	bl	80076c4 <xTaskPriorityDisinherit>
 800690c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	609a      	str	r2, [r3, #8]
 8006914:	e043      	b.n	800699e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d119      	bne.n	8006950 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6858      	ldr	r0, [r3, #4]
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006924:	461a      	mov	r2, r3
 8006926:	68b9      	ldr	r1, [r7, #8]
 8006928:	f001 fc0a 	bl	8008140 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006934:	441a      	add	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	429a      	cmp	r2, r3
 8006944:	d32b      	bcc.n	800699e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	605a      	str	r2, [r3, #4]
 800694e:	e026      	b.n	800699e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	68d8      	ldr	r0, [r3, #12]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006958:	461a      	mov	r2, r3
 800695a:	68b9      	ldr	r1, [r7, #8]
 800695c:	f001 fbf0 	bl	8008140 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	68da      	ldr	r2, [r3, #12]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006968:	425b      	negs	r3, r3
 800696a:	441a      	add	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	429a      	cmp	r2, r3
 800697a:	d207      	bcs.n	800698c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	689a      	ldr	r2, [r3, #8]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006984:	425b      	negs	r3, r3
 8006986:	441a      	add	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b02      	cmp	r3, #2
 8006990:	d105      	bne.n	800699e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d002      	beq.n	800699e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	3b01      	subs	r3, #1
 800699c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80069a6:	697b      	ldr	r3, [r7, #20]
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3718      	adds	r7, #24
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d018      	beq.n	80069f4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68da      	ldr	r2, [r3, #12]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	441a      	add	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d303      	bcc.n	80069e4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68d9      	ldr	r1, [r3, #12]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ec:	461a      	mov	r2, r3
 80069ee:	6838      	ldr	r0, [r7, #0]
 80069f0:	f001 fba6 	bl	8008140 <memcpy>
	}
}
 80069f4:	bf00      	nop
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a04:	f001 f876 	bl	8007af4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a0e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a10:	e011      	b.n	8006a36 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d012      	beq.n	8006a40 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	3324      	adds	r3, #36	; 0x24
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fc76 	bl	8007310 <xTaskRemoveFromEventList>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a2a:	f000 fd4b 	bl	80074c4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	3b01      	subs	r3, #1
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	dce9      	bgt.n	8006a12 <prvUnlockQueue+0x16>
 8006a3e:	e000      	b.n	8006a42 <prvUnlockQueue+0x46>
					break;
 8006a40:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	22ff      	movs	r2, #255	; 0xff
 8006a46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006a4a:	f001 f883 	bl	8007b54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a4e:	f001 f851 	bl	8007af4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a58:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a5a:	e011      	b.n	8006a80 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d012      	beq.n	8006a8a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3310      	adds	r3, #16
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fc51 	bl	8007310 <xTaskRemoveFromEventList>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006a74:	f000 fd26 	bl	80074c4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	dce9      	bgt.n	8006a5c <prvUnlockQueue+0x60>
 8006a88:	e000      	b.n	8006a8c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006a8a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	22ff      	movs	r2, #255	; 0xff
 8006a90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a94:	f001 f85e 	bl	8007b54 <vPortExitCritical>
}
 8006a98:	bf00      	nop
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006aa8:	f001 f824 	bl	8007af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d102      	bne.n	8006aba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	60fb      	str	r3, [r7, #12]
 8006ab8:	e001      	b.n	8006abe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006aba:	2300      	movs	r3, #0
 8006abc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006abe:	f001 f849 	bl	8007b54 <vPortExitCritical>

	return xReturn;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ad4:	f001 f80e 	bl	8007af4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d102      	bne.n	8006aea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	e001      	b.n	8006aee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006aee:	f001 f831 	bl	8007b54 <vPortExitCritical>

	return xReturn;
 8006af2:	68fb      	ldr	r3, [r7, #12]
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08e      	sub	sp, #56	; 0x38
 8006b00:	af04      	add	r7, sp, #16
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d10a      	bne.n	8006b26 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b14:	f383 8811 	msr	BASEPRI, r3
 8006b18:	f3bf 8f6f 	isb	sy
 8006b1c:	f3bf 8f4f 	dsb	sy
 8006b20:	623b      	str	r3, [r7, #32]
}
 8006b22:	bf00      	nop
 8006b24:	e7fe      	b.n	8006b24 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10a      	bne.n	8006b42 <xTaskCreateStatic+0x46>
	__asm volatile
 8006b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b30:	f383 8811 	msr	BASEPRI, r3
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	f3bf 8f4f 	dsb	sy
 8006b3c:	61fb      	str	r3, [r7, #28]
}
 8006b3e:	bf00      	nop
 8006b40:	e7fe      	b.n	8006b40 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b42:	2354      	movs	r3, #84	; 0x54
 8006b44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	2b54      	cmp	r3, #84	; 0x54
 8006b4a:	d00a      	beq.n	8006b62 <xTaskCreateStatic+0x66>
	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	61bb      	str	r3, [r7, #24]
}
 8006b5e:	bf00      	nop
 8006b60:	e7fe      	b.n	8006b60 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006b62:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d01e      	beq.n	8006ba8 <xTaskCreateStatic+0xac>
 8006b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01b      	beq.n	8006ba8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b78:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b82:	2300      	movs	r3, #0
 8006b84:	9303      	str	r3, [sp, #12]
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	9302      	str	r3, [sp, #8]
 8006b8a:	f107 0314 	add.w	r3, r7, #20
 8006b8e:	9301      	str	r3, [sp, #4]
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	687a      	ldr	r2, [r7, #4]
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 f850 	bl	8006c40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ba2:	f000 f8d5 	bl	8006d50 <prvAddNewTaskToReadyList>
 8006ba6:	e001      	b.n	8006bac <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bac:	697b      	ldr	r3, [r7, #20]
	}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3728      	adds	r7, #40	; 0x28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b08c      	sub	sp, #48	; 0x30
 8006bba:	af04      	add	r7, sp, #16
 8006bbc:	60f8      	str	r0, [r7, #12]
 8006bbe:	60b9      	str	r1, [r7, #8]
 8006bc0:	603b      	str	r3, [r7, #0]
 8006bc2:	4613      	mov	r3, r2
 8006bc4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006bc6:	88fb      	ldrh	r3, [r7, #6]
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f001 f8b4 	bl	8007d38 <pvPortMalloc>
 8006bd0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00e      	beq.n	8006bf6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006bd8:	2054      	movs	r0, #84	; 0x54
 8006bda:	f001 f8ad 	bl	8007d38 <pvPortMalloc>
 8006bde:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d003      	beq.n	8006bee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	631a      	str	r2, [r3, #48]	; 0x30
 8006bec:	e005      	b.n	8006bfa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006bee:	6978      	ldr	r0, [r7, #20]
 8006bf0:	f001 f966 	bl	8007ec0 <vPortFree>
 8006bf4:	e001      	b.n	8006bfa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d017      	beq.n	8006c30 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c08:	88fa      	ldrh	r2, [r7, #6]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	9303      	str	r3, [sp, #12]
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	9302      	str	r3, [sp, #8]
 8006c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c14:	9301      	str	r3, [sp, #4]
 8006c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	68b9      	ldr	r1, [r7, #8]
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 f80e 	bl	8006c40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c24:	69f8      	ldr	r0, [r7, #28]
 8006c26:	f000 f893 	bl	8006d50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	61bb      	str	r3, [r7, #24]
 8006c2e:	e002      	b.n	8006c36 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c30:	f04f 33ff 	mov.w	r3, #4294967295
 8006c34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c36:	69bb      	ldr	r3, [r7, #24]
	}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3720      	adds	r7, #32
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	009b      	lsls	r3, r3, #2
 8006c5c:	4413      	add	r3, r2
 8006c5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	f023 0307 	bic.w	r3, r3, #7
 8006c66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	f003 0307 	and.w	r3, r3, #7
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d00a      	beq.n	8006c88 <prvInitialiseNewTask+0x48>
	__asm volatile
 8006c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c76:	f383 8811 	msr	BASEPRI, r3
 8006c7a:	f3bf 8f6f 	isb	sy
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	617b      	str	r3, [r7, #20]
}
 8006c84:	bf00      	nop
 8006c86:	e7fe      	b.n	8006c86 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01f      	beq.n	8006cce <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006c8e:	2300      	movs	r3, #0
 8006c90:	61fb      	str	r3, [r7, #28]
 8006c92:	e012      	b.n	8006cba <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	4413      	add	r3, r2
 8006c9a:	7819      	ldrb	r1, [r3, #0]
 8006c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	3334      	adds	r3, #52	; 0x34
 8006ca4:	460a      	mov	r2, r1
 8006ca6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	69fb      	ldr	r3, [r7, #28]
 8006cac:	4413      	add	r3, r2
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d006      	beq.n	8006cc2 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	61fb      	str	r3, [r7, #28]
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	2b0f      	cmp	r3, #15
 8006cbe:	d9e9      	bls.n	8006c94 <prvInitialiseNewTask+0x54>
 8006cc0:	e000      	b.n	8006cc4 <prvInitialiseNewTask+0x84>
			{
				break;
 8006cc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006ccc:	e003      	b.n	8006cd6 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd8:	2b06      	cmp	r3, #6
 8006cda:	d901      	bls.n	8006ce0 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cdc:	2306      	movs	r3, #6
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cea:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cee:	2200      	movs	r2, #0
 8006cf0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff f926 	bl	8005f48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfe:	3318      	adds	r3, #24
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7ff f921 	bl	8005f48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0e:	f1c3 0207 	rsb	r2, r3, #7
 8006d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1e:	2200      	movs	r2, #0
 8006d20:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	68f9      	ldr	r1, [r7, #12]
 8006d2e:	69b8      	ldr	r0, [r7, #24]
 8006d30:	f000 fdb4 	bl	800789c <pxPortInitialiseStack>
 8006d34:	4602      	mov	r2, r0
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d002      	beq.n	8006d46 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d46:	bf00      	nop
 8006d48:	3720      	adds	r7, #32
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
	...

08006d50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d58:	f000 fecc 	bl	8007af4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d5c:	4b2a      	ldr	r3, [pc, #168]	; (8006e08 <prvAddNewTaskToReadyList+0xb8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3301      	adds	r3, #1
 8006d62:	4a29      	ldr	r2, [pc, #164]	; (8006e08 <prvAddNewTaskToReadyList+0xb8>)
 8006d64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d66:	4b29      	ldr	r3, [pc, #164]	; (8006e0c <prvAddNewTaskToReadyList+0xbc>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d109      	bne.n	8006d82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d6e:	4a27      	ldr	r2, [pc, #156]	; (8006e0c <prvAddNewTaskToReadyList+0xbc>)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d74:	4b24      	ldr	r3, [pc, #144]	; (8006e08 <prvAddNewTaskToReadyList+0xb8>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d110      	bne.n	8006d9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d7c:	f000 fbc6 	bl	800750c <prvInitialiseTaskLists>
 8006d80:	e00d      	b.n	8006d9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d82:	4b23      	ldr	r3, [pc, #140]	; (8006e10 <prvAddNewTaskToReadyList+0xc0>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d109      	bne.n	8006d9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006d8a:	4b20      	ldr	r3, [pc, #128]	; (8006e0c <prvAddNewTaskToReadyList+0xbc>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d802      	bhi.n	8006d9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006d98:	4a1c      	ldr	r2, [pc, #112]	; (8006e0c <prvAddNewTaskToReadyList+0xbc>)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006d9e:	4b1d      	ldr	r3, [pc, #116]	; (8006e14 <prvAddNewTaskToReadyList+0xc4>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3301      	adds	r3, #1
 8006da4:	4a1b      	ldr	r2, [pc, #108]	; (8006e14 <prvAddNewTaskToReadyList+0xc4>)
 8006da6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	2201      	movs	r2, #1
 8006dae:	409a      	lsls	r2, r3
 8006db0:	4b19      	ldr	r3, [pc, #100]	; (8006e18 <prvAddNewTaskToReadyList+0xc8>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4313      	orrs	r3, r2
 8006db6:	4a18      	ldr	r2, [pc, #96]	; (8006e18 <prvAddNewTaskToReadyList+0xc8>)
 8006db8:	6013      	str	r3, [r2, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	4413      	add	r3, r2
 8006dc4:	009b      	lsls	r3, r3, #2
 8006dc6:	4a15      	ldr	r2, [pc, #84]	; (8006e1c <prvAddNewTaskToReadyList+0xcc>)
 8006dc8:	441a      	add	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f7ff f8c6 	bl	8005f62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006dd6:	f000 febd 	bl	8007b54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006dda:	4b0d      	ldr	r3, [pc, #52]	; (8006e10 <prvAddNewTaskToReadyList+0xc0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d00e      	beq.n	8006e00 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006de2:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <prvAddNewTaskToReadyList+0xbc>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d207      	bcs.n	8006e00 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <prvAddNewTaskToReadyList+0xd0>)
 8006df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006df6:	601a      	str	r2, [r3, #0]
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e00:	bf00      	nop
 8006e02:	3708      	adds	r7, #8
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	200003f0 	.word	0x200003f0
 8006e0c:	200002f0 	.word	0x200002f0
 8006e10:	200003fc 	.word	0x200003fc
 8006e14:	2000040c 	.word	0x2000040c
 8006e18:	200003f8 	.word	0x200003f8
 8006e1c:	200002f4 	.word	0x200002f4
 8006e20:	e000ed04 	.word	0xe000ed04

08006e24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d017      	beq.n	8006e66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e36:	4b13      	ldr	r3, [pc, #76]	; (8006e84 <vTaskDelay+0x60>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00a      	beq.n	8006e54 <vTaskDelay+0x30>
	__asm volatile
 8006e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e42:	f383 8811 	msr	BASEPRI, r3
 8006e46:	f3bf 8f6f 	isb	sy
 8006e4a:	f3bf 8f4f 	dsb	sy
 8006e4e:	60bb      	str	r3, [r7, #8]
}
 8006e50:	bf00      	nop
 8006e52:	e7fe      	b.n	8006e52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006e54:	f000 f87a 	bl	8006f4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e58:	2100      	movs	r1, #0
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fcb8 	bl	80077d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e60:	f000 f882 	bl	8006f68 <xTaskResumeAll>
 8006e64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d107      	bne.n	8006e7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006e6c:	4b06      	ldr	r3, [pc, #24]	; (8006e88 <vTaskDelay+0x64>)
 8006e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e7c:	bf00      	nop
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}
 8006e84:	20000418 	.word	0x20000418
 8006e88:	e000ed04 	.word	0xe000ed04

08006e8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b08a      	sub	sp, #40	; 0x28
 8006e90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e92:	2300      	movs	r3, #0
 8006e94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006e96:	2300      	movs	r3, #0
 8006e98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006e9a:	463a      	mov	r2, r7
 8006e9c:	1d39      	adds	r1, r7, #4
 8006e9e:	f107 0308 	add.w	r3, r7, #8
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f7fa f8b2 	bl	800100c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	9202      	str	r2, [sp, #8]
 8006eb0:	9301      	str	r3, [sp, #4]
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	9300      	str	r3, [sp, #0]
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	460a      	mov	r2, r1
 8006eba:	491e      	ldr	r1, [pc, #120]	; (8006f34 <vTaskStartScheduler+0xa8>)
 8006ebc:	481e      	ldr	r0, [pc, #120]	; (8006f38 <vTaskStartScheduler+0xac>)
 8006ebe:	f7ff fe1d 	bl	8006afc <xTaskCreateStatic>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	4a1d      	ldr	r2, [pc, #116]	; (8006f3c <vTaskStartScheduler+0xb0>)
 8006ec6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ec8:	4b1c      	ldr	r3, [pc, #112]	; (8006f3c <vTaskStartScheduler+0xb0>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	617b      	str	r3, [r7, #20]
 8006ed4:	e001      	b.n	8006eda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d116      	bne.n	8006f0e <vTaskStartScheduler+0x82>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	613b      	str	r3, [r7, #16]
}
 8006ef2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006ef4:	4b12      	ldr	r3, [pc, #72]	; (8006f40 <vTaskStartScheduler+0xb4>)
 8006ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8006efa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006efc:	4b11      	ldr	r3, [pc, #68]	; (8006f44 <vTaskStartScheduler+0xb8>)
 8006efe:	2201      	movs	r2, #1
 8006f00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f02:	4b11      	ldr	r3, [pc, #68]	; (8006f48 <vTaskStartScheduler+0xbc>)
 8006f04:	2200      	movs	r2, #0
 8006f06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f08:	f000 fd52 	bl	80079b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f0c:	e00e      	b.n	8006f2c <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f14:	d10a      	bne.n	8006f2c <vTaskStartScheduler+0xa0>
	__asm volatile
 8006f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1a:	f383 8811 	msr	BASEPRI, r3
 8006f1e:	f3bf 8f6f 	isb	sy
 8006f22:	f3bf 8f4f 	dsb	sy
 8006f26:	60fb      	str	r3, [r7, #12]
}
 8006f28:	bf00      	nop
 8006f2a:	e7fe      	b.n	8006f2a <vTaskStartScheduler+0x9e>
}
 8006f2c:	bf00      	nop
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	080091a8 	.word	0x080091a8
 8006f38:	080074dd 	.word	0x080074dd
 8006f3c:	20000414 	.word	0x20000414
 8006f40:	20000410 	.word	0x20000410
 8006f44:	200003fc 	.word	0x200003fc
 8006f48:	200003f4 	.word	0x200003f4

08006f4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f50:	4b04      	ldr	r3, [pc, #16]	; (8006f64 <vTaskSuspendAll+0x18>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	3301      	adds	r3, #1
 8006f56:	4a03      	ldr	r2, [pc, #12]	; (8006f64 <vTaskSuspendAll+0x18>)
 8006f58:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006f5a:	bf00      	nop
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	20000418 	.word	0x20000418

08006f68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f72:	2300      	movs	r3, #0
 8006f74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006f76:	4b41      	ldr	r3, [pc, #260]	; (800707c <xTaskResumeAll+0x114>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10a      	bne.n	8006f94 <xTaskResumeAll+0x2c>
	__asm volatile
 8006f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f82:	f383 8811 	msr	BASEPRI, r3
 8006f86:	f3bf 8f6f 	isb	sy
 8006f8a:	f3bf 8f4f 	dsb	sy
 8006f8e:	603b      	str	r3, [r7, #0]
}
 8006f90:	bf00      	nop
 8006f92:	e7fe      	b.n	8006f92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006f94:	f000 fdae 	bl	8007af4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006f98:	4b38      	ldr	r3, [pc, #224]	; (800707c <xTaskResumeAll+0x114>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	4a37      	ldr	r2, [pc, #220]	; (800707c <xTaskResumeAll+0x114>)
 8006fa0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fa2:	4b36      	ldr	r3, [pc, #216]	; (800707c <xTaskResumeAll+0x114>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d161      	bne.n	800706e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006faa:	4b35      	ldr	r3, [pc, #212]	; (8007080 <xTaskResumeAll+0x118>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d05d      	beq.n	800706e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fb2:	e02e      	b.n	8007012 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fb4:	4b33      	ldr	r3, [pc, #204]	; (8007084 <xTaskResumeAll+0x11c>)
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	3318      	adds	r3, #24
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7ff f82b 	bl	800601c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7ff f826 	bl	800601c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	409a      	lsls	r2, r3
 8006fd8:	4b2b      	ldr	r3, [pc, #172]	; (8007088 <xTaskResumeAll+0x120>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	4a2a      	ldr	r2, [pc, #168]	; (8007088 <xTaskResumeAll+0x120>)
 8006fe0:	6013      	str	r3, [r2, #0]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	009b      	lsls	r3, r3, #2
 8006fea:	4413      	add	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4a27      	ldr	r2, [pc, #156]	; (800708c <xTaskResumeAll+0x124>)
 8006ff0:	441a      	add	r2, r3
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	4610      	mov	r0, r2
 8006ffa:	f7fe ffb2 	bl	8005f62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007002:	4b23      	ldr	r3, [pc, #140]	; (8007090 <xTaskResumeAll+0x128>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007008:	429a      	cmp	r2, r3
 800700a:	d302      	bcc.n	8007012 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800700c:	4b21      	ldr	r3, [pc, #132]	; (8007094 <xTaskResumeAll+0x12c>)
 800700e:	2201      	movs	r2, #1
 8007010:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007012:	4b1c      	ldr	r3, [pc, #112]	; (8007084 <xTaskResumeAll+0x11c>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1cc      	bne.n	8006fb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007020:	f000 fb12 	bl	8007648 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007024:	4b1c      	ldr	r3, [pc, #112]	; (8007098 <xTaskResumeAll+0x130>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d010      	beq.n	8007052 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007030:	f000 f836 	bl	80070a0 <xTaskIncrementTick>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800703a:	4b16      	ldr	r3, [pc, #88]	; (8007094 <xTaskResumeAll+0x12c>)
 800703c:	2201      	movs	r2, #1
 800703e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	3b01      	subs	r3, #1
 8007044:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1f1      	bne.n	8007030 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800704c:	4b12      	ldr	r3, [pc, #72]	; (8007098 <xTaskResumeAll+0x130>)
 800704e:	2200      	movs	r2, #0
 8007050:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007052:	4b10      	ldr	r3, [pc, #64]	; (8007094 <xTaskResumeAll+0x12c>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d009      	beq.n	800706e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800705a:	2301      	movs	r3, #1
 800705c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800705e:	4b0f      	ldr	r3, [pc, #60]	; (800709c <xTaskResumeAll+0x134>)
 8007060:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007064:	601a      	str	r2, [r3, #0]
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800706e:	f000 fd71 	bl	8007b54 <vPortExitCritical>

	return xAlreadyYielded;
 8007072:	68bb      	ldr	r3, [r7, #8]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	20000418 	.word	0x20000418
 8007080:	200003f0 	.word	0x200003f0
 8007084:	200003b0 	.word	0x200003b0
 8007088:	200003f8 	.word	0x200003f8
 800708c:	200002f4 	.word	0x200002f4
 8007090:	200002f0 	.word	0x200002f0
 8007094:	20000404 	.word	0x20000404
 8007098:	20000400 	.word	0x20000400
 800709c:	e000ed04 	.word	0xe000ed04

080070a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070a6:	2300      	movs	r3, #0
 80070a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070aa:	4b4e      	ldr	r3, [pc, #312]	; (80071e4 <xTaskIncrementTick+0x144>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	f040 8088 	bne.w	80071c4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80070b4:	4b4c      	ldr	r3, [pc, #304]	; (80071e8 <xTaskIncrementTick+0x148>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	3301      	adds	r3, #1
 80070ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80070bc:	4a4a      	ldr	r2, [pc, #296]	; (80071e8 <xTaskIncrementTick+0x148>)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d120      	bne.n	800710a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80070c8:	4b48      	ldr	r3, [pc, #288]	; (80071ec <xTaskIncrementTick+0x14c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00a      	beq.n	80070e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	603b      	str	r3, [r7, #0]
}
 80070e4:	bf00      	nop
 80070e6:	e7fe      	b.n	80070e6 <xTaskIncrementTick+0x46>
 80070e8:	4b40      	ldr	r3, [pc, #256]	; (80071ec <xTaskIncrementTick+0x14c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	60fb      	str	r3, [r7, #12]
 80070ee:	4b40      	ldr	r3, [pc, #256]	; (80071f0 <xTaskIncrementTick+0x150>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a3e      	ldr	r2, [pc, #248]	; (80071ec <xTaskIncrementTick+0x14c>)
 80070f4:	6013      	str	r3, [r2, #0]
 80070f6:	4a3e      	ldr	r2, [pc, #248]	; (80071f0 <xTaskIncrementTick+0x150>)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6013      	str	r3, [r2, #0]
 80070fc:	4b3d      	ldr	r3, [pc, #244]	; (80071f4 <xTaskIncrementTick+0x154>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	3301      	adds	r3, #1
 8007102:	4a3c      	ldr	r2, [pc, #240]	; (80071f4 <xTaskIncrementTick+0x154>)
 8007104:	6013      	str	r3, [r2, #0]
 8007106:	f000 fa9f 	bl	8007648 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800710a:	4b3b      	ldr	r3, [pc, #236]	; (80071f8 <xTaskIncrementTick+0x158>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	693a      	ldr	r2, [r7, #16]
 8007110:	429a      	cmp	r2, r3
 8007112:	d348      	bcc.n	80071a6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007114:	4b35      	ldr	r3, [pc, #212]	; (80071ec <xTaskIncrementTick+0x14c>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d104      	bne.n	8007128 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800711e:	4b36      	ldr	r3, [pc, #216]	; (80071f8 <xTaskIncrementTick+0x158>)
 8007120:	f04f 32ff 	mov.w	r2, #4294967295
 8007124:	601a      	str	r2, [r3, #0]
					break;
 8007126:	e03e      	b.n	80071a6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007128:	4b30      	ldr	r3, [pc, #192]	; (80071ec <xTaskIncrementTick+0x14c>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007138:	693a      	ldr	r2, [r7, #16]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	429a      	cmp	r2, r3
 800713e:	d203      	bcs.n	8007148 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007140:	4a2d      	ldr	r2, [pc, #180]	; (80071f8 <xTaskIncrementTick+0x158>)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007146:	e02e      	b.n	80071a6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	3304      	adds	r3, #4
 800714c:	4618      	mov	r0, r3
 800714e:	f7fe ff65 	bl	800601c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007156:	2b00      	cmp	r3, #0
 8007158:	d004      	beq.n	8007164 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800715a:	68bb      	ldr	r3, [r7, #8]
 800715c:	3318      	adds	r3, #24
 800715e:	4618      	mov	r0, r3
 8007160:	f7fe ff5c 	bl	800601c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007168:	2201      	movs	r2, #1
 800716a:	409a      	lsls	r2, r3
 800716c:	4b23      	ldr	r3, [pc, #140]	; (80071fc <xTaskIncrementTick+0x15c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4313      	orrs	r3, r2
 8007172:	4a22      	ldr	r2, [pc, #136]	; (80071fc <xTaskIncrementTick+0x15c>)
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800717a:	4613      	mov	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4a1f      	ldr	r2, [pc, #124]	; (8007200 <xTaskIncrementTick+0x160>)
 8007184:	441a      	add	r2, r3
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	3304      	adds	r3, #4
 800718a:	4619      	mov	r1, r3
 800718c:	4610      	mov	r0, r2
 800718e:	f7fe fee8 	bl	8005f62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007196:	4b1b      	ldr	r3, [pc, #108]	; (8007204 <xTaskIncrementTick+0x164>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800719c:	429a      	cmp	r2, r3
 800719e:	d3b9      	bcc.n	8007114 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80071a0:	2301      	movs	r3, #1
 80071a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071a4:	e7b6      	b.n	8007114 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071a6:	4b17      	ldr	r3, [pc, #92]	; (8007204 <xTaskIncrementTick+0x164>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ac:	4914      	ldr	r1, [pc, #80]	; (8007200 <xTaskIncrementTick+0x160>)
 80071ae:	4613      	mov	r3, r2
 80071b0:	009b      	lsls	r3, r3, #2
 80071b2:	4413      	add	r3, r2
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	440b      	add	r3, r1
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d907      	bls.n	80071ce <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 80071be:	2301      	movs	r3, #1
 80071c0:	617b      	str	r3, [r7, #20]
 80071c2:	e004      	b.n	80071ce <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80071c4:	4b10      	ldr	r3, [pc, #64]	; (8007208 <xTaskIncrementTick+0x168>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3301      	adds	r3, #1
 80071ca:	4a0f      	ldr	r2, [pc, #60]	; (8007208 <xTaskIncrementTick+0x168>)
 80071cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80071ce:	4b0f      	ldr	r3, [pc, #60]	; (800720c <xTaskIncrementTick+0x16c>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d001      	beq.n	80071da <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80071d6:	2301      	movs	r3, #1
 80071d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80071da:	697b      	ldr	r3, [r7, #20]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3718      	adds	r7, #24
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}
 80071e4:	20000418 	.word	0x20000418
 80071e8:	200003f4 	.word	0x200003f4
 80071ec:	200003a8 	.word	0x200003a8
 80071f0:	200003ac 	.word	0x200003ac
 80071f4:	20000408 	.word	0x20000408
 80071f8:	20000410 	.word	0x20000410
 80071fc:	200003f8 	.word	0x200003f8
 8007200:	200002f4 	.word	0x200002f4
 8007204:	200002f0 	.word	0x200002f0
 8007208:	20000400 	.word	0x20000400
 800720c:	20000404 	.word	0x20000404

08007210 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007210:	b480      	push	{r7}
 8007212:	b087      	sub	sp, #28
 8007214:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007216:	4b27      	ldr	r3, [pc, #156]	; (80072b4 <vTaskSwitchContext+0xa4>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d003      	beq.n	8007226 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800721e:	4b26      	ldr	r3, [pc, #152]	; (80072b8 <vTaskSwitchContext+0xa8>)
 8007220:	2201      	movs	r2, #1
 8007222:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007224:	e03f      	b.n	80072a6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007226:	4b24      	ldr	r3, [pc, #144]	; (80072b8 <vTaskSwitchContext+0xa8>)
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800722c:	4b23      	ldr	r3, [pc, #140]	; (80072bc <vTaskSwitchContext+0xac>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	fab3 f383 	clz	r3, r3
 8007238:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800723a:	7afb      	ldrb	r3, [r7, #11]
 800723c:	f1c3 031f 	rsb	r3, r3, #31
 8007240:	617b      	str	r3, [r7, #20]
 8007242:	491f      	ldr	r1, [pc, #124]	; (80072c0 <vTaskSwitchContext+0xb0>)
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	4613      	mov	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	440b      	add	r3, r1
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10a      	bne.n	800726c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	607b      	str	r3, [r7, #4]
}
 8007268:	bf00      	nop
 800726a:	e7fe      	b.n	800726a <vTaskSwitchContext+0x5a>
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4613      	mov	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4a12      	ldr	r2, [pc, #72]	; (80072c0 <vTaskSwitchContext+0xb0>)
 8007278:	4413      	add	r3, r2
 800727a:	613b      	str	r3, [r7, #16]
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	685a      	ldr	r2, [r3, #4]
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	605a      	str	r2, [r3, #4]
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	685a      	ldr	r2, [r3, #4]
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	3308      	adds	r3, #8
 800728e:	429a      	cmp	r2, r3
 8007290:	d104      	bne.n	800729c <vTaskSwitchContext+0x8c>
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	685a      	ldr	r2, [r3, #4]
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	605a      	str	r2, [r3, #4]
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	4a08      	ldr	r2, [pc, #32]	; (80072c4 <vTaskSwitchContext+0xb4>)
 80072a4:	6013      	str	r3, [r2, #0]
}
 80072a6:	bf00      	nop
 80072a8:	371c      	adds	r7, #28
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	20000418 	.word	0x20000418
 80072b8:	20000404 	.word	0x20000404
 80072bc:	200003f8 	.word	0x200003f8
 80072c0:	200002f4 	.word	0x200002f4
 80072c4:	200002f0 	.word	0x200002f0

080072c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b084      	sub	sp, #16
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
 80072d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d10a      	bne.n	80072ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80072d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072dc:	f383 8811 	msr	BASEPRI, r3
 80072e0:	f3bf 8f6f 	isb	sy
 80072e4:	f3bf 8f4f 	dsb	sy
 80072e8:	60fb      	str	r3, [r7, #12]
}
 80072ea:	bf00      	nop
 80072ec:	e7fe      	b.n	80072ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072ee:	4b07      	ldr	r3, [pc, #28]	; (800730c <vTaskPlaceOnEventList+0x44>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	3318      	adds	r3, #24
 80072f4:	4619      	mov	r1, r3
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7fe fe57 	bl	8005faa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80072fc:	2101      	movs	r1, #1
 80072fe:	6838      	ldr	r0, [r7, #0]
 8007300:	f000 fa66 	bl	80077d0 <prvAddCurrentTaskToDelayedList>
}
 8007304:	bf00      	nop
 8007306:	3710      	adds	r7, #16
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}
 800730c:	200002f0 	.word	0x200002f0

08007310 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10a      	bne.n	800733c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732a:	f383 8811 	msr	BASEPRI, r3
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f3bf 8f4f 	dsb	sy
 8007336:	60fb      	str	r3, [r7, #12]
}
 8007338:	bf00      	nop
 800733a:	e7fe      	b.n	800733a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	3318      	adds	r3, #24
 8007340:	4618      	mov	r0, r3
 8007342:	f7fe fe6b 	bl	800601c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007346:	4b1d      	ldr	r3, [pc, #116]	; (80073bc <xTaskRemoveFromEventList+0xac>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d11c      	bne.n	8007388 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	3304      	adds	r3, #4
 8007352:	4618      	mov	r0, r3
 8007354:	f7fe fe62 	bl	800601c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	2201      	movs	r2, #1
 800735e:	409a      	lsls	r2, r3
 8007360:	4b17      	ldr	r3, [pc, #92]	; (80073c0 <xTaskRemoveFromEventList+0xb0>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4313      	orrs	r3, r2
 8007366:	4a16      	ldr	r2, [pc, #88]	; (80073c0 <xTaskRemoveFromEventList+0xb0>)
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	693b      	ldr	r3, [r7, #16]
 800736c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736e:	4613      	mov	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	4413      	add	r3, r2
 8007374:	009b      	lsls	r3, r3, #2
 8007376:	4a13      	ldr	r2, [pc, #76]	; (80073c4 <xTaskRemoveFromEventList+0xb4>)
 8007378:	441a      	add	r2, r3
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	3304      	adds	r3, #4
 800737e:	4619      	mov	r1, r3
 8007380:	4610      	mov	r0, r2
 8007382:	f7fe fdee 	bl	8005f62 <vListInsertEnd>
 8007386:	e005      	b.n	8007394 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	3318      	adds	r3, #24
 800738c:	4619      	mov	r1, r3
 800738e:	480e      	ldr	r0, [pc, #56]	; (80073c8 <xTaskRemoveFromEventList+0xb8>)
 8007390:	f7fe fde7 	bl	8005f62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007398:	4b0c      	ldr	r3, [pc, #48]	; (80073cc <xTaskRemoveFromEventList+0xbc>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739e:	429a      	cmp	r2, r3
 80073a0:	d905      	bls.n	80073ae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80073a2:	2301      	movs	r3, #1
 80073a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80073a6:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <xTaskRemoveFromEventList+0xc0>)
 80073a8:	2201      	movs	r2, #1
 80073aa:	601a      	str	r2, [r3, #0]
 80073ac:	e001      	b.n	80073b2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80073ae:	2300      	movs	r3, #0
 80073b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80073b2:	697b      	ldr	r3, [r7, #20]
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	20000418 	.word	0x20000418
 80073c0:	200003f8 	.word	0x200003f8
 80073c4:	200002f4 	.word	0x200002f4
 80073c8:	200003b0 	.word	0x200003b0
 80073cc:	200002f0 	.word	0x200002f0
 80073d0:	20000404 	.word	0x20000404

080073d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073d4:	b480      	push	{r7}
 80073d6:	b083      	sub	sp, #12
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073dc:	4b06      	ldr	r3, [pc, #24]	; (80073f8 <vTaskInternalSetTimeOutState+0x24>)
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <vTaskInternalSetTimeOutState+0x28>)
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	605a      	str	r2, [r3, #4]
}
 80073ec:	bf00      	nop
 80073ee:	370c      	adds	r7, #12
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	20000408 	.word	0x20000408
 80073fc:	200003f4 	.word	0x200003f4

08007400 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d10a      	bne.n	8007426 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	613b      	str	r3, [r7, #16]
}
 8007422:	bf00      	nop
 8007424:	e7fe      	b.n	8007424 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d10a      	bne.n	8007442 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	60fb      	str	r3, [r7, #12]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007442:	f000 fb57 	bl	8007af4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007446:	4b1d      	ldr	r3, [pc, #116]	; (80074bc <xTaskCheckForTimeOut+0xbc>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800745e:	d102      	bne.n	8007466 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007460:	2300      	movs	r3, #0
 8007462:	61fb      	str	r3, [r7, #28]
 8007464:	e023      	b.n	80074ae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b15      	ldr	r3, [pc, #84]	; (80074c0 <xTaskCheckForTimeOut+0xc0>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d007      	beq.n	8007482 <xTaskCheckForTimeOut+0x82>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	429a      	cmp	r2, r3
 800747a:	d302      	bcc.n	8007482 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800747c:	2301      	movs	r3, #1
 800747e:	61fb      	str	r3, [r7, #28]
 8007480:	e015      	b.n	80074ae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	429a      	cmp	r2, r3
 800748a:	d20b      	bcs.n	80074a4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	1ad2      	subs	r2, r2, r3
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f7ff ff9b 	bl	80073d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800749e:	2300      	movs	r3, #0
 80074a0:	61fb      	str	r3, [r7, #28]
 80074a2:	e004      	b.n	80074ae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2200      	movs	r2, #0
 80074a8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074aa:	2301      	movs	r3, #1
 80074ac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80074ae:	f000 fb51 	bl	8007b54 <vPortExitCritical>

	return xReturn;
 80074b2:	69fb      	ldr	r3, [r7, #28]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3720      	adds	r7, #32
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	200003f4 	.word	0x200003f4
 80074c0:	20000408 	.word	0x20000408

080074c4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80074c8:	4b03      	ldr	r3, [pc, #12]	; (80074d8 <vTaskMissedYield+0x14>)
 80074ca:	2201      	movs	r2, #1
 80074cc:	601a      	str	r2, [r3, #0]
}
 80074ce:	bf00      	nop
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	20000404 	.word	0x20000404

080074dc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074e4:	f000 f852 	bl	800758c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074e8:	4b06      	ldr	r3, [pc, #24]	; (8007504 <prvIdleTask+0x28>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d9f9      	bls.n	80074e4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074f0:	4b05      	ldr	r3, [pc, #20]	; (8007508 <prvIdleTask+0x2c>)
 80074f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074f6:	601a      	str	r2, [r3, #0]
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007500:	e7f0      	b.n	80074e4 <prvIdleTask+0x8>
 8007502:	bf00      	nop
 8007504:	200002f4 	.word	0x200002f4
 8007508:	e000ed04 	.word	0xe000ed04

0800750c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007512:	2300      	movs	r3, #0
 8007514:	607b      	str	r3, [r7, #4]
 8007516:	e00c      	b.n	8007532 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	4613      	mov	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	4413      	add	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	4a12      	ldr	r2, [pc, #72]	; (800756c <prvInitialiseTaskLists+0x60>)
 8007524:	4413      	add	r3, r2
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fcee 	bl	8005f08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	3301      	adds	r3, #1
 8007530:	607b      	str	r3, [r7, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	2b06      	cmp	r3, #6
 8007536:	d9ef      	bls.n	8007518 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007538:	480d      	ldr	r0, [pc, #52]	; (8007570 <prvInitialiseTaskLists+0x64>)
 800753a:	f7fe fce5 	bl	8005f08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800753e:	480d      	ldr	r0, [pc, #52]	; (8007574 <prvInitialiseTaskLists+0x68>)
 8007540:	f7fe fce2 	bl	8005f08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007544:	480c      	ldr	r0, [pc, #48]	; (8007578 <prvInitialiseTaskLists+0x6c>)
 8007546:	f7fe fcdf 	bl	8005f08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800754a:	480c      	ldr	r0, [pc, #48]	; (800757c <prvInitialiseTaskLists+0x70>)
 800754c:	f7fe fcdc 	bl	8005f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007550:	480b      	ldr	r0, [pc, #44]	; (8007580 <prvInitialiseTaskLists+0x74>)
 8007552:	f7fe fcd9 	bl	8005f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007556:	4b0b      	ldr	r3, [pc, #44]	; (8007584 <prvInitialiseTaskLists+0x78>)
 8007558:	4a05      	ldr	r2, [pc, #20]	; (8007570 <prvInitialiseTaskLists+0x64>)
 800755a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800755c:	4b0a      	ldr	r3, [pc, #40]	; (8007588 <prvInitialiseTaskLists+0x7c>)
 800755e:	4a05      	ldr	r2, [pc, #20]	; (8007574 <prvInitialiseTaskLists+0x68>)
 8007560:	601a      	str	r2, [r3, #0]
}
 8007562:	bf00      	nop
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	200002f4 	.word	0x200002f4
 8007570:	20000380 	.word	0x20000380
 8007574:	20000394 	.word	0x20000394
 8007578:	200003b0 	.word	0x200003b0
 800757c:	200003c4 	.word	0x200003c4
 8007580:	200003dc 	.word	0x200003dc
 8007584:	200003a8 	.word	0x200003a8
 8007588:	200003ac 	.word	0x200003ac

0800758c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b082      	sub	sp, #8
 8007590:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007592:	e019      	b.n	80075c8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007594:	f000 faae 	bl	8007af4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007598:	4b10      	ldr	r3, [pc, #64]	; (80075dc <prvCheckTasksWaitingTermination+0x50>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3304      	adds	r3, #4
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fe fd39 	bl	800601c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075aa:	4b0d      	ldr	r3, [pc, #52]	; (80075e0 <prvCheckTasksWaitingTermination+0x54>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	3b01      	subs	r3, #1
 80075b0:	4a0b      	ldr	r2, [pc, #44]	; (80075e0 <prvCheckTasksWaitingTermination+0x54>)
 80075b2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075b4:	4b0b      	ldr	r3, [pc, #44]	; (80075e4 <prvCheckTasksWaitingTermination+0x58>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	4a0a      	ldr	r2, [pc, #40]	; (80075e4 <prvCheckTasksWaitingTermination+0x58>)
 80075bc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80075be:	f000 fac9 	bl	8007b54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f810 	bl	80075e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075c8:	4b06      	ldr	r3, [pc, #24]	; (80075e4 <prvCheckTasksWaitingTermination+0x58>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d1e1      	bne.n	8007594 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075d0:	bf00      	nop
 80075d2:	bf00      	nop
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	200003c4 	.word	0x200003c4
 80075e0:	200003f0 	.word	0x200003f0
 80075e4:	200003d8 	.word	0x200003d8

080075e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d108      	bne.n	800760c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075fe:	4618      	mov	r0, r3
 8007600:	f000 fc5e 	bl	8007ec0 <vPortFree>
				vPortFree( pxTCB );
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 fc5b 	bl	8007ec0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800760a:	e018      	b.n	800763e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007612:	2b01      	cmp	r3, #1
 8007614:	d103      	bne.n	800761e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fc52 	bl	8007ec0 <vPortFree>
	}
 800761c:	e00f      	b.n	800763e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007624:	2b02      	cmp	r3, #2
 8007626:	d00a      	beq.n	800763e <prvDeleteTCB+0x56>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	60fb      	str	r3, [r7, #12]
}
 800763a:	bf00      	nop
 800763c:	e7fe      	b.n	800763c <prvDeleteTCB+0x54>
	}
 800763e:	bf00      	nop
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007648:	b480      	push	{r7}
 800764a:	b083      	sub	sp, #12
 800764c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800764e:	4b0c      	ldr	r3, [pc, #48]	; (8007680 <prvResetNextTaskUnblockTime+0x38>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d104      	bne.n	8007662 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007658:	4b0a      	ldr	r3, [pc, #40]	; (8007684 <prvResetNextTaskUnblockTime+0x3c>)
 800765a:	f04f 32ff 	mov.w	r2, #4294967295
 800765e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007660:	e008      	b.n	8007674 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007662:	4b07      	ldr	r3, [pc, #28]	; (8007680 <prvResetNextTaskUnblockTime+0x38>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	68db      	ldr	r3, [r3, #12]
 800766a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	4a04      	ldr	r2, [pc, #16]	; (8007684 <prvResetNextTaskUnblockTime+0x3c>)
 8007672:	6013      	str	r3, [r2, #0]
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr
 8007680:	200003a8 	.word	0x200003a8
 8007684:	20000410 	.word	0x20000410

08007688 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800768e:	4b0b      	ldr	r3, [pc, #44]	; (80076bc <xTaskGetSchedulerState+0x34>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d102      	bne.n	800769c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007696:	2301      	movs	r3, #1
 8007698:	607b      	str	r3, [r7, #4]
 800769a:	e008      	b.n	80076ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800769c:	4b08      	ldr	r3, [pc, #32]	; (80076c0 <xTaskGetSchedulerState+0x38>)
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d102      	bne.n	80076aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076a4:	2302      	movs	r3, #2
 80076a6:	607b      	str	r3, [r7, #4]
 80076a8:	e001      	b.n	80076ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076aa:	2300      	movs	r3, #0
 80076ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076ae:	687b      	ldr	r3, [r7, #4]
	}
 80076b0:	4618      	mov	r0, r3
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	200003fc 	.word	0x200003fc
 80076c0:	20000418 	.word	0x20000418

080076c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076d0:	2300      	movs	r3, #0
 80076d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d06e      	beq.n	80077b8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076da:	4b3a      	ldr	r3, [pc, #232]	; (80077c4 <xTaskPriorityDisinherit+0x100>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	693a      	ldr	r2, [r7, #16]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d00a      	beq.n	80076fa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	f383 8811 	msr	BASEPRI, r3
 80076ec:	f3bf 8f6f 	isb	sy
 80076f0:	f3bf 8f4f 	dsb	sy
 80076f4:	60fb      	str	r3, [r7, #12]
}
 80076f6:	bf00      	nop
 80076f8:	e7fe      	b.n	80076f8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d10a      	bne.n	8007718 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007706:	f383 8811 	msr	BASEPRI, r3
 800770a:	f3bf 8f6f 	isb	sy
 800770e:	f3bf 8f4f 	dsb	sy
 8007712:	60bb      	str	r3, [r7, #8]
}
 8007714:	bf00      	nop
 8007716:	e7fe      	b.n	8007716 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800771c:	1e5a      	subs	r2, r3, #1
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800772a:	429a      	cmp	r2, r3
 800772c:	d044      	beq.n	80077b8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007732:	2b00      	cmp	r3, #0
 8007734:	d140      	bne.n	80077b8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	3304      	adds	r3, #4
 800773a:	4618      	mov	r0, r3
 800773c:	f7fe fc6e 	bl	800601c <uxListRemove>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d115      	bne.n	8007772 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800774a:	491f      	ldr	r1, [pc, #124]	; (80077c8 <xTaskPriorityDisinherit+0x104>)
 800774c:	4613      	mov	r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	009b      	lsls	r3, r3, #2
 8007754:	440b      	add	r3, r1
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10a      	bne.n	8007772 <xTaskPriorityDisinherit+0xae>
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007760:	2201      	movs	r2, #1
 8007762:	fa02 f303 	lsl.w	r3, r2, r3
 8007766:	43da      	mvns	r2, r3
 8007768:	4b18      	ldr	r3, [pc, #96]	; (80077cc <xTaskPriorityDisinherit+0x108>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4013      	ands	r3, r2
 800776e:	4a17      	ldr	r2, [pc, #92]	; (80077cc <xTaskPriorityDisinherit+0x108>)
 8007770:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007776:	693b      	ldr	r3, [r7, #16]
 8007778:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	f1c3 0207 	rsb	r2, r3, #7
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778a:	2201      	movs	r2, #1
 800778c:	409a      	lsls	r2, r3
 800778e:	4b0f      	ldr	r3, [pc, #60]	; (80077cc <xTaskPriorityDisinherit+0x108>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4313      	orrs	r3, r2
 8007794:	4a0d      	ldr	r2, [pc, #52]	; (80077cc <xTaskPriorityDisinherit+0x108>)
 8007796:	6013      	str	r3, [r2, #0]
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779c:	4613      	mov	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	4413      	add	r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4a08      	ldr	r2, [pc, #32]	; (80077c8 <xTaskPriorityDisinherit+0x104>)
 80077a6:	441a      	add	r2, r3
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	3304      	adds	r3, #4
 80077ac:	4619      	mov	r1, r3
 80077ae:	4610      	mov	r0, r2
 80077b0:	f7fe fbd7 	bl	8005f62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077b4:	2301      	movs	r3, #1
 80077b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077b8:	697b      	ldr	r3, [r7, #20]
	}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	200002f0 	.word	0x200002f0
 80077c8:	200002f4 	.word	0x200002f4
 80077cc:	200003f8 	.word	0x200003f8

080077d0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077da:	4b29      	ldr	r3, [pc, #164]	; (8007880 <prvAddCurrentTaskToDelayedList+0xb0>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077e0:	4b28      	ldr	r3, [pc, #160]	; (8007884 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3304      	adds	r3, #4
 80077e6:	4618      	mov	r0, r3
 80077e8:	f7fe fc18 	bl	800601c <uxListRemove>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d10b      	bne.n	800780a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80077f2:	4b24      	ldr	r3, [pc, #144]	; (8007884 <prvAddCurrentTaskToDelayedList+0xb4>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	2201      	movs	r2, #1
 80077fa:	fa02 f303 	lsl.w	r3, r2, r3
 80077fe:	43da      	mvns	r2, r3
 8007800:	4b21      	ldr	r3, [pc, #132]	; (8007888 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4013      	ands	r3, r2
 8007806:	4a20      	ldr	r2, [pc, #128]	; (8007888 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007808:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007810:	d10a      	bne.n	8007828 <prvAddCurrentTaskToDelayedList+0x58>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d007      	beq.n	8007828 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007818:	4b1a      	ldr	r3, [pc, #104]	; (8007884 <prvAddCurrentTaskToDelayedList+0xb4>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	3304      	adds	r3, #4
 800781e:	4619      	mov	r1, r3
 8007820:	481a      	ldr	r0, [pc, #104]	; (800788c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007822:	f7fe fb9e 	bl	8005f62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007826:	e026      	b.n	8007876 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4413      	add	r3, r2
 800782e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007830:	4b14      	ldr	r3, [pc, #80]	; (8007884 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	68ba      	ldr	r2, [r7, #8]
 8007836:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	429a      	cmp	r2, r3
 800783e:	d209      	bcs.n	8007854 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007840:	4b13      	ldr	r3, [pc, #76]	; (8007890 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	4b0f      	ldr	r3, [pc, #60]	; (8007884 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3304      	adds	r3, #4
 800784a:	4619      	mov	r1, r3
 800784c:	4610      	mov	r0, r2
 800784e:	f7fe fbac 	bl	8005faa <vListInsert>
}
 8007852:	e010      	b.n	8007876 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007854:	4b0f      	ldr	r3, [pc, #60]	; (8007894 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	4b0a      	ldr	r3, [pc, #40]	; (8007884 <prvAddCurrentTaskToDelayedList+0xb4>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3304      	adds	r3, #4
 800785e:	4619      	mov	r1, r3
 8007860:	4610      	mov	r0, r2
 8007862:	f7fe fba2 	bl	8005faa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007866:	4b0c      	ldr	r3, [pc, #48]	; (8007898 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	429a      	cmp	r2, r3
 800786e:	d202      	bcs.n	8007876 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007870:	4a09      	ldr	r2, [pc, #36]	; (8007898 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	6013      	str	r3, [r2, #0]
}
 8007876:	bf00      	nop
 8007878:	3710      	adds	r7, #16
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}
 800787e:	bf00      	nop
 8007880:	200003f4 	.word	0x200003f4
 8007884:	200002f0 	.word	0x200002f0
 8007888:	200003f8 	.word	0x200003f8
 800788c:	200003dc 	.word	0x200003dc
 8007890:	200003ac 	.word	0x200003ac
 8007894:	200003a8 	.word	0x200003a8
 8007898:	20000410 	.word	0x20000410

0800789c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800789c:	b480      	push	{r7}
 800789e:	b085      	sub	sp, #20
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	3b04      	subs	r3, #4
 80078ac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3b04      	subs	r3, #4
 80078ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	f023 0201 	bic.w	r2, r3, #1
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	3b04      	subs	r3, #4
 80078ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078cc:	4a0c      	ldr	r2, [pc, #48]	; (8007900 <pxPortInitialiseStack+0x64>)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3b14      	subs	r3, #20
 80078d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078d8:	687a      	ldr	r2, [r7, #4]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	3b04      	subs	r3, #4
 80078e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f06f 0202 	mvn.w	r2, #2
 80078ea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	3b20      	subs	r3, #32
 80078f0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078f2:	68fb      	ldr	r3, [r7, #12]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	08007905 	.word	0x08007905

08007904 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007904:	b480      	push	{r7}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800790a:	2300      	movs	r3, #0
 800790c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800790e:	4b12      	ldr	r3, [pc, #72]	; (8007958 <prvTaskExitError+0x54>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007916:	d00a      	beq.n	800792e <prvTaskExitError+0x2a>
	__asm volatile
 8007918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791c:	f383 8811 	msr	BASEPRI, r3
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	f3bf 8f4f 	dsb	sy
 8007928:	60fb      	str	r3, [r7, #12]
}
 800792a:	bf00      	nop
 800792c:	e7fe      	b.n	800792c <prvTaskExitError+0x28>
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	60bb      	str	r3, [r7, #8]
}
 8007940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007942:	bf00      	nop
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0fc      	beq.n	8007944 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800794a:	bf00      	nop
 800794c:	bf00      	nop
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	2000000c 	.word	0x2000000c
 800795c:	00000000 	.word	0x00000000

08007960 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007960:	4b07      	ldr	r3, [pc, #28]	; (8007980 <pxCurrentTCBConst2>)
 8007962:	6819      	ldr	r1, [r3, #0]
 8007964:	6808      	ldr	r0, [r1, #0]
 8007966:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796a:	f380 8809 	msr	PSP, r0
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f04f 0000 	mov.w	r0, #0
 8007976:	f380 8811 	msr	BASEPRI, r0
 800797a:	4770      	bx	lr
 800797c:	f3af 8000 	nop.w

08007980 <pxCurrentTCBConst2>:
 8007980:	200002f0 	.word	0x200002f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007984:	bf00      	nop
 8007986:	bf00      	nop

08007988 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007988:	4808      	ldr	r0, [pc, #32]	; (80079ac <prvPortStartFirstTask+0x24>)
 800798a:	6800      	ldr	r0, [r0, #0]
 800798c:	6800      	ldr	r0, [r0, #0]
 800798e:	f380 8808 	msr	MSP, r0
 8007992:	f04f 0000 	mov.w	r0, #0
 8007996:	f380 8814 	msr	CONTROL, r0
 800799a:	b662      	cpsie	i
 800799c:	b661      	cpsie	f
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	df00      	svc	0
 80079a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079aa:	bf00      	nop
 80079ac:	e000ed08 	.word	0xe000ed08

080079b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079b6:	4b46      	ldr	r3, [pc, #280]	; (8007ad0 <xPortStartScheduler+0x120>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a46      	ldr	r2, [pc, #280]	; (8007ad4 <xPortStartScheduler+0x124>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d10a      	bne.n	80079d6 <xPortStartScheduler+0x26>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	613b      	str	r3, [r7, #16]
}
 80079d2:	bf00      	nop
 80079d4:	e7fe      	b.n	80079d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80079d6:	4b3e      	ldr	r3, [pc, #248]	; (8007ad0 <xPortStartScheduler+0x120>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a3f      	ldr	r2, [pc, #252]	; (8007ad8 <xPortStartScheduler+0x128>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d10a      	bne.n	80079f6 <xPortStartScheduler+0x46>
	__asm volatile
 80079e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e4:	f383 8811 	msr	BASEPRI, r3
 80079e8:	f3bf 8f6f 	isb	sy
 80079ec:	f3bf 8f4f 	dsb	sy
 80079f0:	60fb      	str	r3, [r7, #12]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80079f6:	4b39      	ldr	r3, [pc, #228]	; (8007adc <xPortStartScheduler+0x12c>)
 80079f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	22ff      	movs	r2, #255	; 0xff
 8007a06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a10:	78fb      	ldrb	r3, [r7, #3]
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a18:	b2da      	uxtb	r2, r3
 8007a1a:	4b31      	ldr	r3, [pc, #196]	; (8007ae0 <xPortStartScheduler+0x130>)
 8007a1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a1e:	4b31      	ldr	r3, [pc, #196]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a20:	2207      	movs	r2, #7
 8007a22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a24:	e009      	b.n	8007a3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a26:	4b2f      	ldr	r3, [pc, #188]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3b01      	subs	r3, #1
 8007a2c:	4a2d      	ldr	r2, [pc, #180]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a30:	78fb      	ldrb	r3, [r7, #3]
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a3a:	78fb      	ldrb	r3, [r7, #3]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a42:	2b80      	cmp	r3, #128	; 0x80
 8007a44:	d0ef      	beq.n	8007a26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a46:	4b27      	ldr	r3, [pc, #156]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f1c3 0307 	rsb	r3, r3, #7
 8007a4e:	2b04      	cmp	r3, #4
 8007a50:	d00a      	beq.n	8007a68 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	60bb      	str	r3, [r7, #8]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a68:	4b1e      	ldr	r3, [pc, #120]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	021b      	lsls	r3, r3, #8
 8007a6e:	4a1d      	ldr	r2, [pc, #116]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007a72:	4b1c      	ldr	r3, [pc, #112]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a7a:	4a1a      	ldr	r2, [pc, #104]	; (8007ae4 <xPortStartScheduler+0x134>)
 8007a7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	b2da      	uxtb	r2, r3
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007a86:	4b18      	ldr	r3, [pc, #96]	; (8007ae8 <xPortStartScheduler+0x138>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a17      	ldr	r2, [pc, #92]	; (8007ae8 <xPortStartScheduler+0x138>)
 8007a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007a90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007a92:	4b15      	ldr	r3, [pc, #84]	; (8007ae8 <xPortStartScheduler+0x138>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a14      	ldr	r2, [pc, #80]	; (8007ae8 <xPortStartScheduler+0x138>)
 8007a98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007a9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007a9e:	f000 f8dd 	bl	8007c5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007aa2:	4b12      	ldr	r3, [pc, #72]	; (8007aec <xPortStartScheduler+0x13c>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007aa8:	f000 f8fc 	bl	8007ca4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007aac:	4b10      	ldr	r3, [pc, #64]	; (8007af0 <xPortStartScheduler+0x140>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a0f      	ldr	r2, [pc, #60]	; (8007af0 <xPortStartScheduler+0x140>)
 8007ab2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ab6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ab8:	f7ff ff66 	bl	8007988 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007abc:	f7ff fba8 	bl	8007210 <vTaskSwitchContext>
	prvTaskExitError();
 8007ac0:	f7ff ff20 	bl	8007904 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	e000ed00 	.word	0xe000ed00
 8007ad4:	410fc271 	.word	0x410fc271
 8007ad8:	410fc270 	.word	0x410fc270
 8007adc:	e000e400 	.word	0xe000e400
 8007ae0:	2000041c 	.word	0x2000041c
 8007ae4:	20000420 	.word	0x20000420
 8007ae8:	e000ed20 	.word	0xe000ed20
 8007aec:	2000000c 	.word	0x2000000c
 8007af0:	e000ef34 	.word	0xe000ef34

08007af4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b083      	sub	sp, #12
 8007af8:	af00      	add	r7, sp, #0
	__asm volatile
 8007afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007afe:	f383 8811 	msr	BASEPRI, r3
 8007b02:	f3bf 8f6f 	isb	sy
 8007b06:	f3bf 8f4f 	dsb	sy
 8007b0a:	607b      	str	r3, [r7, #4]
}
 8007b0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b0e:	4b0f      	ldr	r3, [pc, #60]	; (8007b4c <vPortEnterCritical+0x58>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3301      	adds	r3, #1
 8007b14:	4a0d      	ldr	r2, [pc, #52]	; (8007b4c <vPortEnterCritical+0x58>)
 8007b16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b18:	4b0c      	ldr	r3, [pc, #48]	; (8007b4c <vPortEnterCritical+0x58>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d10f      	bne.n	8007b40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b20:	4b0b      	ldr	r3, [pc, #44]	; (8007b50 <vPortEnterCritical+0x5c>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00a      	beq.n	8007b40 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	603b      	str	r3, [r7, #0]
}
 8007b3c:	bf00      	nop
 8007b3e:	e7fe      	b.n	8007b3e <vPortEnterCritical+0x4a>
	}
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr
 8007b4c:	2000000c 	.word	0x2000000c
 8007b50:	e000ed04 	.word	0xe000ed04

08007b54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b54:	b480      	push	{r7}
 8007b56:	b083      	sub	sp, #12
 8007b58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b5a:	4b12      	ldr	r3, [pc, #72]	; (8007ba4 <vPortExitCritical+0x50>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d10a      	bne.n	8007b78 <vPortExitCritical+0x24>
	__asm volatile
 8007b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b66:	f383 8811 	msr	BASEPRI, r3
 8007b6a:	f3bf 8f6f 	isb	sy
 8007b6e:	f3bf 8f4f 	dsb	sy
 8007b72:	607b      	str	r3, [r7, #4]
}
 8007b74:	bf00      	nop
 8007b76:	e7fe      	b.n	8007b76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007b78:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <vPortExitCritical+0x50>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	4a09      	ldr	r2, [pc, #36]	; (8007ba4 <vPortExitCritical+0x50>)
 8007b80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007b82:	4b08      	ldr	r3, [pc, #32]	; (8007ba4 <vPortExitCritical+0x50>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d105      	bne.n	8007b96 <vPortExitCritical+0x42>
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	f383 8811 	msr	BASEPRI, r3
}
 8007b94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007b96:	bf00      	nop
 8007b98:	370c      	adds	r7, #12
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr
 8007ba2:	bf00      	nop
 8007ba4:	2000000c 	.word	0x2000000c
	...

08007bb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007bb0:	f3ef 8009 	mrs	r0, PSP
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	4b15      	ldr	r3, [pc, #84]	; (8007c10 <pxCurrentTCBConst>)
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	f01e 0f10 	tst.w	lr, #16
 8007bc0:	bf08      	it	eq
 8007bc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bca:	6010      	str	r0, [r2, #0]
 8007bcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007bd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007bd4:	f380 8811 	msr	BASEPRI, r0
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f7ff fb16 	bl	8007210 <vTaskSwitchContext>
 8007be4:	f04f 0000 	mov.w	r0, #0
 8007be8:	f380 8811 	msr	BASEPRI, r0
 8007bec:	bc09      	pop	{r0, r3}
 8007bee:	6819      	ldr	r1, [r3, #0]
 8007bf0:	6808      	ldr	r0, [r1, #0]
 8007bf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bf6:	f01e 0f10 	tst.w	lr, #16
 8007bfa:	bf08      	it	eq
 8007bfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c00:	f380 8809 	msr	PSP, r0
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	f3af 8000 	nop.w

08007c10 <pxCurrentTCBConst>:
 8007c10:	200002f0 	.word	0x200002f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c14:	bf00      	nop
 8007c16:	bf00      	nop

08007c18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c22:	f383 8811 	msr	BASEPRI, r3
 8007c26:	f3bf 8f6f 	isb	sy
 8007c2a:	f3bf 8f4f 	dsb	sy
 8007c2e:	607b      	str	r3, [r7, #4]
}
 8007c30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c32:	f7ff fa35 	bl	80070a0 <xTaskIncrementTick>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c3c:	4b06      	ldr	r3, [pc, #24]	; (8007c58 <SysTick_Handler+0x40>)
 8007c3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c42:	601a      	str	r2, [r3, #0]
 8007c44:	2300      	movs	r3, #0
 8007c46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	f383 8811 	msr	BASEPRI, r3
}
 8007c4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	e000ed04 	.word	0xe000ed04

08007c5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c60:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <vPortSetupTimerInterrupt+0x34>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c66:	4b0b      	ldr	r3, [pc, #44]	; (8007c94 <vPortSetupTimerInterrupt+0x38>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c6c:	4b0a      	ldr	r3, [pc, #40]	; (8007c98 <vPortSetupTimerInterrupt+0x3c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	4a0a      	ldr	r2, [pc, #40]	; (8007c9c <vPortSetupTimerInterrupt+0x40>)
 8007c72:	fba2 2303 	umull	r2, r3, r2, r3
 8007c76:	099b      	lsrs	r3, r3, #6
 8007c78:	4a09      	ldr	r2, [pc, #36]	; (8007ca0 <vPortSetupTimerInterrupt+0x44>)
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007c7e:	4b04      	ldr	r3, [pc, #16]	; (8007c90 <vPortSetupTimerInterrupt+0x34>)
 8007c80:	2207      	movs	r2, #7
 8007c82:	601a      	str	r2, [r3, #0]
}
 8007c84:	bf00      	nop
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr
 8007c8e:	bf00      	nop
 8007c90:	e000e010 	.word	0xe000e010
 8007c94:	e000e018 	.word	0xe000e018
 8007c98:	20000000 	.word	0x20000000
 8007c9c:	10624dd3 	.word	0x10624dd3
 8007ca0:	e000e014 	.word	0xe000e014

08007ca4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ca4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007cb4 <vPortEnableVFP+0x10>
 8007ca8:	6801      	ldr	r1, [r0, #0]
 8007caa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cae:	6001      	str	r1, [r0, #0]
 8007cb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007cb2:	bf00      	nop
 8007cb4:	e000ed88 	.word	0xe000ed88

08007cb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cbe:	f3ef 8305 	mrs	r3, IPSR
 8007cc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2b0f      	cmp	r3, #15
 8007cc8:	d914      	bls.n	8007cf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cca:	4a17      	ldr	r2, [pc, #92]	; (8007d28 <vPortValidateInterruptPriority+0x70>)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	4413      	add	r3, r2
 8007cd0:	781b      	ldrb	r3, [r3, #0]
 8007cd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007cd4:	4b15      	ldr	r3, [pc, #84]	; (8007d2c <vPortValidateInterruptPriority+0x74>)
 8007cd6:	781b      	ldrb	r3, [r3, #0]
 8007cd8:	7afa      	ldrb	r2, [r7, #11]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d20a      	bcs.n	8007cf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	607b      	str	r3, [r7, #4]
}
 8007cf0:	bf00      	nop
 8007cf2:	e7fe      	b.n	8007cf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007cf4:	4b0e      	ldr	r3, [pc, #56]	; (8007d30 <vPortValidateInterruptPriority+0x78>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007cfc:	4b0d      	ldr	r3, [pc, #52]	; (8007d34 <vPortValidateInterruptPriority+0x7c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d90a      	bls.n	8007d1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	603b      	str	r3, [r7, #0]
}
 8007d16:	bf00      	nop
 8007d18:	e7fe      	b.n	8007d18 <vPortValidateInterruptPriority+0x60>
	}
 8007d1a:	bf00      	nop
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	e000e3f0 	.word	0xe000e3f0
 8007d2c:	2000041c 	.word	0x2000041c
 8007d30:	e000ed0c 	.word	0xe000ed0c
 8007d34:	20000420 	.word	0x20000420

08007d38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b08a      	sub	sp, #40	; 0x28
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d40:	2300      	movs	r3, #0
 8007d42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d44:	f7ff f902 	bl	8006f4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d48:	4b58      	ldr	r3, [pc, #352]	; (8007eac <pvPortMalloc+0x174>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d101      	bne.n	8007d54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d50:	f000 f910 	bl	8007f74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d54:	4b56      	ldr	r3, [pc, #344]	; (8007eb0 <pvPortMalloc+0x178>)
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4013      	ands	r3, r2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f040 808e 	bne.w	8007e7e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d01d      	beq.n	8007da4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d68:	2208      	movs	r2, #8
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d014      	beq.n	8007da4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f023 0307 	bic.w	r3, r3, #7
 8007d80:	3308      	adds	r3, #8
 8007d82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f003 0307 	and.w	r3, r3, #7
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <pvPortMalloc+0x6c>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	617b      	str	r3, [r7, #20]
}
 8007da0:	bf00      	nop
 8007da2:	e7fe      	b.n	8007da2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d069      	beq.n	8007e7e <pvPortMalloc+0x146>
 8007daa:	4b42      	ldr	r3, [pc, #264]	; (8007eb4 <pvPortMalloc+0x17c>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d864      	bhi.n	8007e7e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007db4:	4b40      	ldr	r3, [pc, #256]	; (8007eb8 <pvPortMalloc+0x180>)
 8007db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007db8:	4b3f      	ldr	r3, [pc, #252]	; (8007eb8 <pvPortMalloc+0x180>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dbe:	e004      	b.n	8007dca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d903      	bls.n	8007ddc <pvPortMalloc+0xa4>
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1f1      	bne.n	8007dc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ddc:	4b33      	ldr	r3, [pc, #204]	; (8007eac <pvPortMalloc+0x174>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d04b      	beq.n	8007e7e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2208      	movs	r2, #8
 8007dec:	4413      	add	r3, r2
 8007dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	6a3b      	ldr	r3, [r7, #32]
 8007df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	1ad2      	subs	r2, r2, r3
 8007e00:	2308      	movs	r3, #8
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	429a      	cmp	r2, r3
 8007e06:	d91f      	bls.n	8007e48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4413      	add	r3, r2
 8007e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e10:	69bb      	ldr	r3, [r7, #24]
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <pvPortMalloc+0xf8>
	__asm volatile
 8007e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1e:	f383 8811 	msr	BASEPRI, r3
 8007e22:	f3bf 8f6f 	isb	sy
 8007e26:	f3bf 8f4f 	dsb	sy
 8007e2a:	613b      	str	r3, [r7, #16]
}
 8007e2c:	bf00      	nop
 8007e2e:	e7fe      	b.n	8007e2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	685a      	ldr	r2, [r3, #4]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	1ad2      	subs	r2, r2, r3
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e42:	69b8      	ldr	r0, [r7, #24]
 8007e44:	f000 f8f8 	bl	8008038 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e48:	4b1a      	ldr	r3, [pc, #104]	; (8007eb4 <pvPortMalloc+0x17c>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	4a18      	ldr	r2, [pc, #96]	; (8007eb4 <pvPortMalloc+0x17c>)
 8007e54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e56:	4b17      	ldr	r3, [pc, #92]	; (8007eb4 <pvPortMalloc+0x17c>)
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	4b18      	ldr	r3, [pc, #96]	; (8007ebc <pvPortMalloc+0x184>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d203      	bcs.n	8007e6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e62:	4b14      	ldr	r3, [pc, #80]	; (8007eb4 <pvPortMalloc+0x17c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a15      	ldr	r2, [pc, #84]	; (8007ebc <pvPortMalloc+0x184>)
 8007e68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	4b10      	ldr	r3, [pc, #64]	; (8007eb0 <pvPortMalloc+0x178>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	431a      	orrs	r2, r3
 8007e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007e7e:	f7ff f873 	bl	8006f68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	f003 0307 	and.w	r3, r3, #7
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d00a      	beq.n	8007ea2 <pvPortMalloc+0x16a>
	__asm volatile
 8007e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	60fb      	str	r3, [r7, #12]
}
 8007e9e:	bf00      	nop
 8007ea0:	e7fe      	b.n	8007ea0 <pvPortMalloc+0x168>
	return pvReturn;
 8007ea2:	69fb      	ldr	r3, [r7, #28]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3728      	adds	r7, #40	; 0x28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}
 8007eac:	2000402c 	.word	0x2000402c
 8007eb0:	20004038 	.word	0x20004038
 8007eb4:	20004030 	.word	0x20004030
 8007eb8:	20004024 	.word	0x20004024
 8007ebc:	20004034 	.word	0x20004034

08007ec0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b086      	sub	sp, #24
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d048      	beq.n	8007f64 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007ed2:	2308      	movs	r3, #8
 8007ed4:	425b      	negs	r3, r3
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	4413      	add	r3, r2
 8007eda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	4b21      	ldr	r3, [pc, #132]	; (8007f6c <vPortFree+0xac>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4013      	ands	r3, r2
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d10a      	bne.n	8007f04 <vPortFree+0x44>
	__asm volatile
 8007eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef2:	f383 8811 	msr	BASEPRI, r3
 8007ef6:	f3bf 8f6f 	isb	sy
 8007efa:	f3bf 8f4f 	dsb	sy
 8007efe:	60fb      	str	r3, [r7, #12]
}
 8007f00:	bf00      	nop
 8007f02:	e7fe      	b.n	8007f02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00a      	beq.n	8007f22 <vPortFree+0x62>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	60bb      	str	r3, [r7, #8]
}
 8007f1e:	bf00      	nop
 8007f20:	e7fe      	b.n	8007f20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	4b11      	ldr	r3, [pc, #68]	; (8007f6c <vPortFree+0xac>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d019      	beq.n	8007f64 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f30:	693b      	ldr	r3, [r7, #16]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d115      	bne.n	8007f64 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f38:	693b      	ldr	r3, [r7, #16]
 8007f3a:	685a      	ldr	r2, [r3, #4]
 8007f3c:	4b0b      	ldr	r3, [pc, #44]	; (8007f6c <vPortFree+0xac>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	43db      	mvns	r3, r3
 8007f42:	401a      	ands	r2, r3
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f48:	f7ff f800 	bl	8006f4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f4c:	693b      	ldr	r3, [r7, #16]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	4b07      	ldr	r3, [pc, #28]	; (8007f70 <vPortFree+0xb0>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4413      	add	r3, r2
 8007f56:	4a06      	ldr	r2, [pc, #24]	; (8007f70 <vPortFree+0xb0>)
 8007f58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f5a:	6938      	ldr	r0, [r7, #16]
 8007f5c:	f000 f86c 	bl	8008038 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8007f60:	f7ff f802 	bl	8006f68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007f64:	bf00      	nop
 8007f66:	3718      	adds	r7, #24
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	20004038 	.word	0x20004038
 8007f70:	20004030 	.word	0x20004030

08007f74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007f7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007f7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007f80:	4b27      	ldr	r3, [pc, #156]	; (8008020 <prvHeapInit+0xac>)
 8007f82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d00c      	beq.n	8007fa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	3307      	adds	r3, #7
 8007f92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f023 0307 	bic.w	r3, r3, #7
 8007f9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007f9c:	68ba      	ldr	r2, [r7, #8]
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	1ad3      	subs	r3, r2, r3
 8007fa2:	4a1f      	ldr	r2, [pc, #124]	; (8008020 <prvHeapInit+0xac>)
 8007fa4:	4413      	add	r3, r2
 8007fa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007fac:	4a1d      	ldr	r2, [pc, #116]	; (8008024 <prvHeapInit+0xb0>)
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007fb2:	4b1c      	ldr	r3, [pc, #112]	; (8008024 <prvHeapInit+0xb0>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68ba      	ldr	r2, [r7, #8]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007fc0:	2208      	movs	r2, #8
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	1a9b      	subs	r3, r3, r2
 8007fc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f023 0307 	bic.w	r3, r3, #7
 8007fce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4a15      	ldr	r2, [pc, #84]	; (8008028 <prvHeapInit+0xb4>)
 8007fd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007fd6:	4b14      	ldr	r3, [pc, #80]	; (8008028 <prvHeapInit+0xb4>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007fde:	4b12      	ldr	r3, [pc, #72]	; (8008028 <prvHeapInit+0xb4>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	1ad2      	subs	r2, r2, r3
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ff4:	4b0c      	ldr	r3, [pc, #48]	; (8008028 <prvHeapInit+0xb4>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	4a0a      	ldr	r2, [pc, #40]	; (800802c <prvHeapInit+0xb8>)
 8008002:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	4a09      	ldr	r2, [pc, #36]	; (8008030 <prvHeapInit+0xbc>)
 800800a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800800c:	4b09      	ldr	r3, [pc, #36]	; (8008034 <prvHeapInit+0xc0>)
 800800e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008012:	601a      	str	r2, [r3, #0]
}
 8008014:	bf00      	nop
 8008016:	3714      	adds	r7, #20
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	20000424 	.word	0x20000424
 8008024:	20004024 	.word	0x20004024
 8008028:	2000402c 	.word	0x2000402c
 800802c:	20004034 	.word	0x20004034
 8008030:	20004030 	.word	0x20004030
 8008034:	20004038 	.word	0x20004038

08008038 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008040:	4b28      	ldr	r3, [pc, #160]	; (80080e4 <prvInsertBlockIntoFreeList+0xac>)
 8008042:	60fb      	str	r3, [r7, #12]
 8008044:	e002      	b.n	800804c <prvInsertBlockIntoFreeList+0x14>
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	687a      	ldr	r2, [r7, #4]
 8008052:	429a      	cmp	r2, r3
 8008054:	d8f7      	bhi.n	8008046 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	685b      	ldr	r3, [r3, #4]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	4413      	add	r3, r2
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	429a      	cmp	r2, r3
 8008066:	d108      	bne.n	800807a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	685a      	ldr	r2, [r3, #4]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	441a      	add	r2, r3
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	441a      	add	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	429a      	cmp	r2, r3
 800808c:	d118      	bne.n	80080c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <prvInsertBlockIntoFreeList+0xb0>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	429a      	cmp	r2, r3
 8008098:	d00d      	beq.n	80080b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	441a      	add	r2, r3
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	e008      	b.n	80080c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80080b6:	4b0c      	ldr	r3, [pc, #48]	; (80080e8 <prvInsertBlockIntoFreeList+0xb0>)
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	e003      	b.n	80080c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	429a      	cmp	r2, r3
 80080ce:	d002      	beq.n	80080d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080d6:	bf00      	nop
 80080d8:	3714      	adds	r7, #20
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	20004024 	.word	0x20004024
 80080e8:	2000402c 	.word	0x2000402c

080080ec <__errno>:
 80080ec:	4b01      	ldr	r3, [pc, #4]	; (80080f4 <__errno+0x8>)
 80080ee:	6818      	ldr	r0, [r3, #0]
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	20000010 	.word	0x20000010

080080f8 <__libc_init_array>:
 80080f8:	b570      	push	{r4, r5, r6, lr}
 80080fa:	4d0d      	ldr	r5, [pc, #52]	; (8008130 <__libc_init_array+0x38>)
 80080fc:	4c0d      	ldr	r4, [pc, #52]	; (8008134 <__libc_init_array+0x3c>)
 80080fe:	1b64      	subs	r4, r4, r5
 8008100:	10a4      	asrs	r4, r4, #2
 8008102:	2600      	movs	r6, #0
 8008104:	42a6      	cmp	r6, r4
 8008106:	d109      	bne.n	800811c <__libc_init_array+0x24>
 8008108:	4d0b      	ldr	r5, [pc, #44]	; (8008138 <__libc_init_array+0x40>)
 800810a:	4c0c      	ldr	r4, [pc, #48]	; (800813c <__libc_init_array+0x44>)
 800810c:	f000 ffe2 	bl	80090d4 <_init>
 8008110:	1b64      	subs	r4, r4, r5
 8008112:	10a4      	asrs	r4, r4, #2
 8008114:	2600      	movs	r6, #0
 8008116:	42a6      	cmp	r6, r4
 8008118:	d105      	bne.n	8008126 <__libc_init_array+0x2e>
 800811a:	bd70      	pop	{r4, r5, r6, pc}
 800811c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008120:	4798      	blx	r3
 8008122:	3601      	adds	r6, #1
 8008124:	e7ee      	b.n	8008104 <__libc_init_array+0xc>
 8008126:	f855 3b04 	ldr.w	r3, [r5], #4
 800812a:	4798      	blx	r3
 800812c:	3601      	adds	r6, #1
 800812e:	e7f2      	b.n	8008116 <__libc_init_array+0x1e>
 8008130:	08009220 	.word	0x08009220
 8008134:	08009220 	.word	0x08009220
 8008138:	08009220 	.word	0x08009220
 800813c:	08009224 	.word	0x08009224

08008140 <memcpy>:
 8008140:	440a      	add	r2, r1
 8008142:	4291      	cmp	r1, r2
 8008144:	f100 33ff 	add.w	r3, r0, #4294967295
 8008148:	d100      	bne.n	800814c <memcpy+0xc>
 800814a:	4770      	bx	lr
 800814c:	b510      	push	{r4, lr}
 800814e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008152:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008156:	4291      	cmp	r1, r2
 8008158:	d1f9      	bne.n	800814e <memcpy+0xe>
 800815a:	bd10      	pop	{r4, pc}

0800815c <memset>:
 800815c:	4402      	add	r2, r0
 800815e:	4603      	mov	r3, r0
 8008160:	4293      	cmp	r3, r2
 8008162:	d100      	bne.n	8008166 <memset+0xa>
 8008164:	4770      	bx	lr
 8008166:	f803 1b01 	strb.w	r1, [r3], #1
 800816a:	e7f9      	b.n	8008160 <memset+0x4>

0800816c <pow>:
 800816c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008170:	ec59 8b10 	vmov	r8, r9, d0
 8008174:	ec57 6b11 	vmov	r6, r7, d1
 8008178:	f000 f8a6 	bl	80082c8 <__ieee754_pow>
 800817c:	4b4e      	ldr	r3, [pc, #312]	; (80082b8 <pow+0x14c>)
 800817e:	f993 3000 	ldrsb.w	r3, [r3]
 8008182:	3301      	adds	r3, #1
 8008184:	ec55 4b10 	vmov	r4, r5, d0
 8008188:	d015      	beq.n	80081b6 <pow+0x4a>
 800818a:	4632      	mov	r2, r6
 800818c:	463b      	mov	r3, r7
 800818e:	4630      	mov	r0, r6
 8008190:	4639      	mov	r1, r7
 8008192:	f7f8 fc73 	bl	8000a7c <__aeabi_dcmpun>
 8008196:	b970      	cbnz	r0, 80081b6 <pow+0x4a>
 8008198:	4642      	mov	r2, r8
 800819a:	464b      	mov	r3, r9
 800819c:	4640      	mov	r0, r8
 800819e:	4649      	mov	r1, r9
 80081a0:	f7f8 fc6c 	bl	8000a7c <__aeabi_dcmpun>
 80081a4:	2200      	movs	r2, #0
 80081a6:	2300      	movs	r3, #0
 80081a8:	b148      	cbz	r0, 80081be <pow+0x52>
 80081aa:	4630      	mov	r0, r6
 80081ac:	4639      	mov	r1, r7
 80081ae:	f7f8 fc33 	bl	8000a18 <__aeabi_dcmpeq>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d17d      	bne.n	80082b2 <pow+0x146>
 80081b6:	ec45 4b10 	vmov	d0, r4, r5
 80081ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081be:	4640      	mov	r0, r8
 80081c0:	4649      	mov	r1, r9
 80081c2:	f7f8 fc29 	bl	8000a18 <__aeabi_dcmpeq>
 80081c6:	b1e0      	cbz	r0, 8008202 <pow+0x96>
 80081c8:	2200      	movs	r2, #0
 80081ca:	2300      	movs	r3, #0
 80081cc:	4630      	mov	r0, r6
 80081ce:	4639      	mov	r1, r7
 80081d0:	f7f8 fc22 	bl	8000a18 <__aeabi_dcmpeq>
 80081d4:	2800      	cmp	r0, #0
 80081d6:	d16c      	bne.n	80082b2 <pow+0x146>
 80081d8:	ec47 6b10 	vmov	d0, r6, r7
 80081dc:	f000 fe53 	bl	8008e86 <finite>
 80081e0:	2800      	cmp	r0, #0
 80081e2:	d0e8      	beq.n	80081b6 <pow+0x4a>
 80081e4:	2200      	movs	r2, #0
 80081e6:	2300      	movs	r3, #0
 80081e8:	4630      	mov	r0, r6
 80081ea:	4639      	mov	r1, r7
 80081ec:	f7f8 fc1e 	bl	8000a2c <__aeabi_dcmplt>
 80081f0:	2800      	cmp	r0, #0
 80081f2:	d0e0      	beq.n	80081b6 <pow+0x4a>
 80081f4:	f7ff ff7a 	bl	80080ec <__errno>
 80081f8:	2321      	movs	r3, #33	; 0x21
 80081fa:	6003      	str	r3, [r0, #0]
 80081fc:	2400      	movs	r4, #0
 80081fe:	4d2f      	ldr	r5, [pc, #188]	; (80082bc <pow+0x150>)
 8008200:	e7d9      	b.n	80081b6 <pow+0x4a>
 8008202:	ec45 4b10 	vmov	d0, r4, r5
 8008206:	f000 fe3e 	bl	8008e86 <finite>
 800820a:	bbb8      	cbnz	r0, 800827c <pow+0x110>
 800820c:	ec49 8b10 	vmov	d0, r8, r9
 8008210:	f000 fe39 	bl	8008e86 <finite>
 8008214:	b390      	cbz	r0, 800827c <pow+0x110>
 8008216:	ec47 6b10 	vmov	d0, r6, r7
 800821a:	f000 fe34 	bl	8008e86 <finite>
 800821e:	b368      	cbz	r0, 800827c <pow+0x110>
 8008220:	4622      	mov	r2, r4
 8008222:	462b      	mov	r3, r5
 8008224:	4620      	mov	r0, r4
 8008226:	4629      	mov	r1, r5
 8008228:	f7f8 fc28 	bl	8000a7c <__aeabi_dcmpun>
 800822c:	b160      	cbz	r0, 8008248 <pow+0xdc>
 800822e:	f7ff ff5d 	bl	80080ec <__errno>
 8008232:	2321      	movs	r3, #33	; 0x21
 8008234:	6003      	str	r3, [r0, #0]
 8008236:	2200      	movs	r2, #0
 8008238:	2300      	movs	r3, #0
 800823a:	4610      	mov	r0, r2
 800823c:	4619      	mov	r1, r3
 800823e:	f7f8 faad 	bl	800079c <__aeabi_ddiv>
 8008242:	4604      	mov	r4, r0
 8008244:	460d      	mov	r5, r1
 8008246:	e7b6      	b.n	80081b6 <pow+0x4a>
 8008248:	f7ff ff50 	bl	80080ec <__errno>
 800824c:	2322      	movs	r3, #34	; 0x22
 800824e:	6003      	str	r3, [r0, #0]
 8008250:	2200      	movs	r2, #0
 8008252:	2300      	movs	r3, #0
 8008254:	4640      	mov	r0, r8
 8008256:	4649      	mov	r1, r9
 8008258:	f7f8 fbe8 	bl	8000a2c <__aeabi_dcmplt>
 800825c:	2400      	movs	r4, #0
 800825e:	b158      	cbz	r0, 8008278 <pow+0x10c>
 8008260:	ec47 6b10 	vmov	d0, r6, r7
 8008264:	f000 fe24 	bl	8008eb0 <rint>
 8008268:	4632      	mov	r2, r6
 800826a:	ec51 0b10 	vmov	r0, r1, d0
 800826e:	463b      	mov	r3, r7
 8008270:	f7f8 fbd2 	bl	8000a18 <__aeabi_dcmpeq>
 8008274:	2800      	cmp	r0, #0
 8008276:	d0c2      	beq.n	80081fe <pow+0x92>
 8008278:	4d11      	ldr	r5, [pc, #68]	; (80082c0 <pow+0x154>)
 800827a:	e79c      	b.n	80081b6 <pow+0x4a>
 800827c:	2200      	movs	r2, #0
 800827e:	2300      	movs	r3, #0
 8008280:	4620      	mov	r0, r4
 8008282:	4629      	mov	r1, r5
 8008284:	f7f8 fbc8 	bl	8000a18 <__aeabi_dcmpeq>
 8008288:	2800      	cmp	r0, #0
 800828a:	d094      	beq.n	80081b6 <pow+0x4a>
 800828c:	ec49 8b10 	vmov	d0, r8, r9
 8008290:	f000 fdf9 	bl	8008e86 <finite>
 8008294:	2800      	cmp	r0, #0
 8008296:	d08e      	beq.n	80081b6 <pow+0x4a>
 8008298:	ec47 6b10 	vmov	d0, r6, r7
 800829c:	f000 fdf3 	bl	8008e86 <finite>
 80082a0:	2800      	cmp	r0, #0
 80082a2:	d088      	beq.n	80081b6 <pow+0x4a>
 80082a4:	f7ff ff22 	bl	80080ec <__errno>
 80082a8:	2322      	movs	r3, #34	; 0x22
 80082aa:	6003      	str	r3, [r0, #0]
 80082ac:	2400      	movs	r4, #0
 80082ae:	2500      	movs	r5, #0
 80082b0:	e781      	b.n	80081b6 <pow+0x4a>
 80082b2:	4d04      	ldr	r5, [pc, #16]	; (80082c4 <pow+0x158>)
 80082b4:	2400      	movs	r4, #0
 80082b6:	e77e      	b.n	80081b6 <pow+0x4a>
 80082b8:	20000074 	.word	0x20000074
 80082bc:	fff00000 	.word	0xfff00000
 80082c0:	7ff00000 	.word	0x7ff00000
 80082c4:	3ff00000 	.word	0x3ff00000

080082c8 <__ieee754_pow>:
 80082c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082cc:	ed2d 8b06 	vpush	{d8-d10}
 80082d0:	b08d      	sub	sp, #52	; 0x34
 80082d2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80082d6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80082da:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80082de:	ea56 0100 	orrs.w	r1, r6, r0
 80082e2:	ec53 2b10 	vmov	r2, r3, d0
 80082e6:	f000 84d1 	beq.w	8008c8c <__ieee754_pow+0x9c4>
 80082ea:	497f      	ldr	r1, [pc, #508]	; (80084e8 <__ieee754_pow+0x220>)
 80082ec:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80082f0:	428c      	cmp	r4, r1
 80082f2:	ee10 8a10 	vmov	r8, s0
 80082f6:	4699      	mov	r9, r3
 80082f8:	dc09      	bgt.n	800830e <__ieee754_pow+0x46>
 80082fa:	d103      	bne.n	8008304 <__ieee754_pow+0x3c>
 80082fc:	b97a      	cbnz	r2, 800831e <__ieee754_pow+0x56>
 80082fe:	42a6      	cmp	r6, r4
 8008300:	dd02      	ble.n	8008308 <__ieee754_pow+0x40>
 8008302:	e00c      	b.n	800831e <__ieee754_pow+0x56>
 8008304:	428e      	cmp	r6, r1
 8008306:	dc02      	bgt.n	800830e <__ieee754_pow+0x46>
 8008308:	428e      	cmp	r6, r1
 800830a:	d110      	bne.n	800832e <__ieee754_pow+0x66>
 800830c:	b178      	cbz	r0, 800832e <__ieee754_pow+0x66>
 800830e:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008312:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008316:	ea54 0308 	orrs.w	r3, r4, r8
 800831a:	f000 84b7 	beq.w	8008c8c <__ieee754_pow+0x9c4>
 800831e:	4873      	ldr	r0, [pc, #460]	; (80084ec <__ieee754_pow+0x224>)
 8008320:	b00d      	add	sp, #52	; 0x34
 8008322:	ecbd 8b06 	vpop	{d8-d10}
 8008326:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832a:	f000 bdb9 	b.w	8008ea0 <nan>
 800832e:	f1b9 0f00 	cmp.w	r9, #0
 8008332:	da36      	bge.n	80083a2 <__ieee754_pow+0xda>
 8008334:	496e      	ldr	r1, [pc, #440]	; (80084f0 <__ieee754_pow+0x228>)
 8008336:	428e      	cmp	r6, r1
 8008338:	dc51      	bgt.n	80083de <__ieee754_pow+0x116>
 800833a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800833e:	428e      	cmp	r6, r1
 8008340:	f340 84af 	ble.w	8008ca2 <__ieee754_pow+0x9da>
 8008344:	1531      	asrs	r1, r6, #20
 8008346:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800834a:	2914      	cmp	r1, #20
 800834c:	dd0f      	ble.n	800836e <__ieee754_pow+0xa6>
 800834e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8008352:	fa20 fc01 	lsr.w	ip, r0, r1
 8008356:	fa0c f101 	lsl.w	r1, ip, r1
 800835a:	4281      	cmp	r1, r0
 800835c:	f040 84a1 	bne.w	8008ca2 <__ieee754_pow+0x9da>
 8008360:	f00c 0c01 	and.w	ip, ip, #1
 8008364:	f1cc 0102 	rsb	r1, ip, #2
 8008368:	9100      	str	r1, [sp, #0]
 800836a:	b180      	cbz	r0, 800838e <__ieee754_pow+0xc6>
 800836c:	e059      	b.n	8008422 <__ieee754_pow+0x15a>
 800836e:	2800      	cmp	r0, #0
 8008370:	d155      	bne.n	800841e <__ieee754_pow+0x156>
 8008372:	f1c1 0114 	rsb	r1, r1, #20
 8008376:	fa46 fc01 	asr.w	ip, r6, r1
 800837a:	fa0c f101 	lsl.w	r1, ip, r1
 800837e:	42b1      	cmp	r1, r6
 8008380:	f040 848c 	bne.w	8008c9c <__ieee754_pow+0x9d4>
 8008384:	f00c 0c01 	and.w	ip, ip, #1
 8008388:	f1cc 0102 	rsb	r1, ip, #2
 800838c:	9100      	str	r1, [sp, #0]
 800838e:	4959      	ldr	r1, [pc, #356]	; (80084f4 <__ieee754_pow+0x22c>)
 8008390:	428e      	cmp	r6, r1
 8008392:	d12d      	bne.n	80083f0 <__ieee754_pow+0x128>
 8008394:	2f00      	cmp	r7, #0
 8008396:	da79      	bge.n	800848c <__ieee754_pow+0x1c4>
 8008398:	4956      	ldr	r1, [pc, #344]	; (80084f4 <__ieee754_pow+0x22c>)
 800839a:	2000      	movs	r0, #0
 800839c:	f7f8 f9fe 	bl	800079c <__aeabi_ddiv>
 80083a0:	e016      	b.n	80083d0 <__ieee754_pow+0x108>
 80083a2:	2100      	movs	r1, #0
 80083a4:	9100      	str	r1, [sp, #0]
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d13b      	bne.n	8008422 <__ieee754_pow+0x15a>
 80083aa:	494f      	ldr	r1, [pc, #316]	; (80084e8 <__ieee754_pow+0x220>)
 80083ac:	428e      	cmp	r6, r1
 80083ae:	d1ee      	bne.n	800838e <__ieee754_pow+0xc6>
 80083b0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80083b4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80083b8:	ea53 0308 	orrs.w	r3, r3, r8
 80083bc:	f000 8466 	beq.w	8008c8c <__ieee754_pow+0x9c4>
 80083c0:	4b4d      	ldr	r3, [pc, #308]	; (80084f8 <__ieee754_pow+0x230>)
 80083c2:	429c      	cmp	r4, r3
 80083c4:	dd0d      	ble.n	80083e2 <__ieee754_pow+0x11a>
 80083c6:	2f00      	cmp	r7, #0
 80083c8:	f280 8464 	bge.w	8008c94 <__ieee754_pow+0x9cc>
 80083cc:	2000      	movs	r0, #0
 80083ce:	2100      	movs	r1, #0
 80083d0:	ec41 0b10 	vmov	d0, r0, r1
 80083d4:	b00d      	add	sp, #52	; 0x34
 80083d6:	ecbd 8b06 	vpop	{d8-d10}
 80083da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083de:	2102      	movs	r1, #2
 80083e0:	e7e0      	b.n	80083a4 <__ieee754_pow+0xdc>
 80083e2:	2f00      	cmp	r7, #0
 80083e4:	daf2      	bge.n	80083cc <__ieee754_pow+0x104>
 80083e6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80083ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80083ee:	e7ef      	b.n	80083d0 <__ieee754_pow+0x108>
 80083f0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80083f4:	d104      	bne.n	8008400 <__ieee754_pow+0x138>
 80083f6:	4610      	mov	r0, r2
 80083f8:	4619      	mov	r1, r3
 80083fa:	f7f8 f8a5 	bl	8000548 <__aeabi_dmul>
 80083fe:	e7e7      	b.n	80083d0 <__ieee754_pow+0x108>
 8008400:	493e      	ldr	r1, [pc, #248]	; (80084fc <__ieee754_pow+0x234>)
 8008402:	428f      	cmp	r7, r1
 8008404:	d10d      	bne.n	8008422 <__ieee754_pow+0x15a>
 8008406:	f1b9 0f00 	cmp.w	r9, #0
 800840a:	db0a      	blt.n	8008422 <__ieee754_pow+0x15a>
 800840c:	ec43 2b10 	vmov	d0, r2, r3
 8008410:	b00d      	add	sp, #52	; 0x34
 8008412:	ecbd 8b06 	vpop	{d8-d10}
 8008416:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800841a:	f000 bc77 	b.w	8008d0c <__ieee754_sqrt>
 800841e:	2100      	movs	r1, #0
 8008420:	9100      	str	r1, [sp, #0]
 8008422:	ec43 2b10 	vmov	d0, r2, r3
 8008426:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800842a:	f000 fd23 	bl	8008e74 <fabs>
 800842e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008432:	ec51 0b10 	vmov	r0, r1, d0
 8008436:	f1b8 0f00 	cmp.w	r8, #0
 800843a:	d12a      	bne.n	8008492 <__ieee754_pow+0x1ca>
 800843c:	b12c      	cbz	r4, 800844a <__ieee754_pow+0x182>
 800843e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80084f4 <__ieee754_pow+0x22c>
 8008442:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8008446:	45e6      	cmp	lr, ip
 8008448:	d123      	bne.n	8008492 <__ieee754_pow+0x1ca>
 800844a:	2f00      	cmp	r7, #0
 800844c:	da05      	bge.n	800845a <__ieee754_pow+0x192>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	2000      	movs	r0, #0
 8008454:	4927      	ldr	r1, [pc, #156]	; (80084f4 <__ieee754_pow+0x22c>)
 8008456:	f7f8 f9a1 	bl	800079c <__aeabi_ddiv>
 800845a:	f1b9 0f00 	cmp.w	r9, #0
 800845e:	dab7      	bge.n	80083d0 <__ieee754_pow+0x108>
 8008460:	9b00      	ldr	r3, [sp, #0]
 8008462:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008466:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800846a:	4323      	orrs	r3, r4
 800846c:	d108      	bne.n	8008480 <__ieee754_pow+0x1b8>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	4610      	mov	r0, r2
 8008474:	4619      	mov	r1, r3
 8008476:	f7f7 feaf 	bl	80001d8 <__aeabi_dsub>
 800847a:	4602      	mov	r2, r0
 800847c:	460b      	mov	r3, r1
 800847e:	e78d      	b.n	800839c <__ieee754_pow+0xd4>
 8008480:	9b00      	ldr	r3, [sp, #0]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d1a4      	bne.n	80083d0 <__ieee754_pow+0x108>
 8008486:	4602      	mov	r2, r0
 8008488:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800848c:	4610      	mov	r0, r2
 800848e:	4619      	mov	r1, r3
 8008490:	e79e      	b.n	80083d0 <__ieee754_pow+0x108>
 8008492:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8008496:	f10c 35ff 	add.w	r5, ip, #4294967295
 800849a:	950a      	str	r5, [sp, #40]	; 0x28
 800849c:	9d00      	ldr	r5, [sp, #0]
 800849e:	46ac      	mov	ip, r5
 80084a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80084a2:	ea5c 0505 	orrs.w	r5, ip, r5
 80084a6:	d0e4      	beq.n	8008472 <__ieee754_pow+0x1aa>
 80084a8:	4b15      	ldr	r3, [pc, #84]	; (8008500 <__ieee754_pow+0x238>)
 80084aa:	429e      	cmp	r6, r3
 80084ac:	f340 80fc 	ble.w	80086a8 <__ieee754_pow+0x3e0>
 80084b0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80084b4:	429e      	cmp	r6, r3
 80084b6:	4b10      	ldr	r3, [pc, #64]	; (80084f8 <__ieee754_pow+0x230>)
 80084b8:	dd07      	ble.n	80084ca <__ieee754_pow+0x202>
 80084ba:	429c      	cmp	r4, r3
 80084bc:	dc0a      	bgt.n	80084d4 <__ieee754_pow+0x20c>
 80084be:	2f00      	cmp	r7, #0
 80084c0:	da84      	bge.n	80083cc <__ieee754_pow+0x104>
 80084c2:	a307      	add	r3, pc, #28	; (adr r3, 80084e0 <__ieee754_pow+0x218>)
 80084c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c8:	e795      	b.n	80083f6 <__ieee754_pow+0x12e>
 80084ca:	429c      	cmp	r4, r3
 80084cc:	dbf7      	blt.n	80084be <__ieee754_pow+0x1f6>
 80084ce:	4b09      	ldr	r3, [pc, #36]	; (80084f4 <__ieee754_pow+0x22c>)
 80084d0:	429c      	cmp	r4, r3
 80084d2:	dd17      	ble.n	8008504 <__ieee754_pow+0x23c>
 80084d4:	2f00      	cmp	r7, #0
 80084d6:	dcf4      	bgt.n	80084c2 <__ieee754_pow+0x1fa>
 80084d8:	e778      	b.n	80083cc <__ieee754_pow+0x104>
 80084da:	bf00      	nop
 80084dc:	f3af 8000 	nop.w
 80084e0:	8800759c 	.word	0x8800759c
 80084e4:	7e37e43c 	.word	0x7e37e43c
 80084e8:	7ff00000 	.word	0x7ff00000
 80084ec:	080091d4 	.word	0x080091d4
 80084f0:	433fffff 	.word	0x433fffff
 80084f4:	3ff00000 	.word	0x3ff00000
 80084f8:	3fefffff 	.word	0x3fefffff
 80084fc:	3fe00000 	.word	0x3fe00000
 8008500:	41e00000 	.word	0x41e00000
 8008504:	4b64      	ldr	r3, [pc, #400]	; (8008698 <__ieee754_pow+0x3d0>)
 8008506:	2200      	movs	r2, #0
 8008508:	f7f7 fe66 	bl	80001d8 <__aeabi_dsub>
 800850c:	a356      	add	r3, pc, #344	; (adr r3, 8008668 <__ieee754_pow+0x3a0>)
 800850e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008512:	4604      	mov	r4, r0
 8008514:	460d      	mov	r5, r1
 8008516:	f7f8 f817 	bl	8000548 <__aeabi_dmul>
 800851a:	a355      	add	r3, pc, #340	; (adr r3, 8008670 <__ieee754_pow+0x3a8>)
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	4606      	mov	r6, r0
 8008522:	460f      	mov	r7, r1
 8008524:	4620      	mov	r0, r4
 8008526:	4629      	mov	r1, r5
 8008528:	f7f8 f80e 	bl	8000548 <__aeabi_dmul>
 800852c:	4b5b      	ldr	r3, [pc, #364]	; (800869c <__ieee754_pow+0x3d4>)
 800852e:	4682      	mov	sl, r0
 8008530:	468b      	mov	fp, r1
 8008532:	2200      	movs	r2, #0
 8008534:	4620      	mov	r0, r4
 8008536:	4629      	mov	r1, r5
 8008538:	f7f8 f806 	bl	8000548 <__aeabi_dmul>
 800853c:	4602      	mov	r2, r0
 800853e:	460b      	mov	r3, r1
 8008540:	a14d      	add	r1, pc, #308	; (adr r1, 8008678 <__ieee754_pow+0x3b0>)
 8008542:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008546:	f7f7 fe47 	bl	80001d8 <__aeabi_dsub>
 800854a:	4622      	mov	r2, r4
 800854c:	462b      	mov	r3, r5
 800854e:	f7f7 fffb 	bl	8000548 <__aeabi_dmul>
 8008552:	4602      	mov	r2, r0
 8008554:	460b      	mov	r3, r1
 8008556:	2000      	movs	r0, #0
 8008558:	4951      	ldr	r1, [pc, #324]	; (80086a0 <__ieee754_pow+0x3d8>)
 800855a:	f7f7 fe3d 	bl	80001d8 <__aeabi_dsub>
 800855e:	4622      	mov	r2, r4
 8008560:	4680      	mov	r8, r0
 8008562:	4689      	mov	r9, r1
 8008564:	462b      	mov	r3, r5
 8008566:	4620      	mov	r0, r4
 8008568:	4629      	mov	r1, r5
 800856a:	f7f7 ffed 	bl	8000548 <__aeabi_dmul>
 800856e:	4602      	mov	r2, r0
 8008570:	460b      	mov	r3, r1
 8008572:	4640      	mov	r0, r8
 8008574:	4649      	mov	r1, r9
 8008576:	f7f7 ffe7 	bl	8000548 <__aeabi_dmul>
 800857a:	a341      	add	r3, pc, #260	; (adr r3, 8008680 <__ieee754_pow+0x3b8>)
 800857c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008580:	f7f7 ffe2 	bl	8000548 <__aeabi_dmul>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	4650      	mov	r0, sl
 800858a:	4659      	mov	r1, fp
 800858c:	f7f7 fe24 	bl	80001d8 <__aeabi_dsub>
 8008590:	4602      	mov	r2, r0
 8008592:	460b      	mov	r3, r1
 8008594:	4680      	mov	r8, r0
 8008596:	4689      	mov	r9, r1
 8008598:	4630      	mov	r0, r6
 800859a:	4639      	mov	r1, r7
 800859c:	f7f7 fe1e 	bl	80001dc <__adddf3>
 80085a0:	2400      	movs	r4, #0
 80085a2:	4632      	mov	r2, r6
 80085a4:	463b      	mov	r3, r7
 80085a6:	4620      	mov	r0, r4
 80085a8:	460d      	mov	r5, r1
 80085aa:	f7f7 fe15 	bl	80001d8 <__aeabi_dsub>
 80085ae:	4602      	mov	r2, r0
 80085b0:	460b      	mov	r3, r1
 80085b2:	4640      	mov	r0, r8
 80085b4:	4649      	mov	r1, r9
 80085b6:	f7f7 fe0f 	bl	80001d8 <__aeabi_dsub>
 80085ba:	9b00      	ldr	r3, [sp, #0]
 80085bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085be:	3b01      	subs	r3, #1
 80085c0:	4313      	orrs	r3, r2
 80085c2:	4682      	mov	sl, r0
 80085c4:	468b      	mov	fp, r1
 80085c6:	f040 81f1 	bne.w	80089ac <__ieee754_pow+0x6e4>
 80085ca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008688 <__ieee754_pow+0x3c0>
 80085ce:	eeb0 8a47 	vmov.f32	s16, s14
 80085d2:	eef0 8a67 	vmov.f32	s17, s15
 80085d6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085da:	2600      	movs	r6, #0
 80085dc:	4632      	mov	r2, r6
 80085de:	463b      	mov	r3, r7
 80085e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085e4:	f7f7 fdf8 	bl	80001d8 <__aeabi_dsub>
 80085e8:	4622      	mov	r2, r4
 80085ea:	462b      	mov	r3, r5
 80085ec:	f7f7 ffac 	bl	8000548 <__aeabi_dmul>
 80085f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085f4:	4680      	mov	r8, r0
 80085f6:	4689      	mov	r9, r1
 80085f8:	4650      	mov	r0, sl
 80085fa:	4659      	mov	r1, fp
 80085fc:	f7f7 ffa4 	bl	8000548 <__aeabi_dmul>
 8008600:	4602      	mov	r2, r0
 8008602:	460b      	mov	r3, r1
 8008604:	4640      	mov	r0, r8
 8008606:	4649      	mov	r1, r9
 8008608:	f7f7 fde8 	bl	80001dc <__adddf3>
 800860c:	4632      	mov	r2, r6
 800860e:	463b      	mov	r3, r7
 8008610:	4680      	mov	r8, r0
 8008612:	4689      	mov	r9, r1
 8008614:	4620      	mov	r0, r4
 8008616:	4629      	mov	r1, r5
 8008618:	f7f7 ff96 	bl	8000548 <__aeabi_dmul>
 800861c:	460b      	mov	r3, r1
 800861e:	4604      	mov	r4, r0
 8008620:	460d      	mov	r5, r1
 8008622:	4602      	mov	r2, r0
 8008624:	4649      	mov	r1, r9
 8008626:	4640      	mov	r0, r8
 8008628:	f7f7 fdd8 	bl	80001dc <__adddf3>
 800862c:	4b1d      	ldr	r3, [pc, #116]	; (80086a4 <__ieee754_pow+0x3dc>)
 800862e:	4299      	cmp	r1, r3
 8008630:	ec45 4b19 	vmov	d9, r4, r5
 8008634:	4606      	mov	r6, r0
 8008636:	460f      	mov	r7, r1
 8008638:	468b      	mov	fp, r1
 800863a:	f340 82fe 	ble.w	8008c3a <__ieee754_pow+0x972>
 800863e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008642:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008646:	4303      	orrs	r3, r0
 8008648:	f000 81f0 	beq.w	8008a2c <__ieee754_pow+0x764>
 800864c:	a310      	add	r3, pc, #64	; (adr r3, 8008690 <__ieee754_pow+0x3c8>)
 800864e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008652:	ec51 0b18 	vmov	r0, r1, d8
 8008656:	f7f7 ff77 	bl	8000548 <__aeabi_dmul>
 800865a:	a30d      	add	r3, pc, #52	; (adr r3, 8008690 <__ieee754_pow+0x3c8>)
 800865c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008660:	e6cb      	b.n	80083fa <__ieee754_pow+0x132>
 8008662:	bf00      	nop
 8008664:	f3af 8000 	nop.w
 8008668:	60000000 	.word	0x60000000
 800866c:	3ff71547 	.word	0x3ff71547
 8008670:	f85ddf44 	.word	0xf85ddf44
 8008674:	3e54ae0b 	.word	0x3e54ae0b
 8008678:	55555555 	.word	0x55555555
 800867c:	3fd55555 	.word	0x3fd55555
 8008680:	652b82fe 	.word	0x652b82fe
 8008684:	3ff71547 	.word	0x3ff71547
 8008688:	00000000 	.word	0x00000000
 800868c:	bff00000 	.word	0xbff00000
 8008690:	8800759c 	.word	0x8800759c
 8008694:	7e37e43c 	.word	0x7e37e43c
 8008698:	3ff00000 	.word	0x3ff00000
 800869c:	3fd00000 	.word	0x3fd00000
 80086a0:	3fe00000 	.word	0x3fe00000
 80086a4:	408fffff 	.word	0x408fffff
 80086a8:	4bd7      	ldr	r3, [pc, #860]	; (8008a08 <__ieee754_pow+0x740>)
 80086aa:	ea03 0309 	and.w	r3, r3, r9
 80086ae:	2200      	movs	r2, #0
 80086b0:	b92b      	cbnz	r3, 80086be <__ieee754_pow+0x3f6>
 80086b2:	4bd6      	ldr	r3, [pc, #856]	; (8008a0c <__ieee754_pow+0x744>)
 80086b4:	f7f7 ff48 	bl	8000548 <__aeabi_dmul>
 80086b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80086bc:	460c      	mov	r4, r1
 80086be:	1523      	asrs	r3, r4, #20
 80086c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80086c4:	4413      	add	r3, r2
 80086c6:	9309      	str	r3, [sp, #36]	; 0x24
 80086c8:	4bd1      	ldr	r3, [pc, #836]	; (8008a10 <__ieee754_pow+0x748>)
 80086ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80086ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80086d2:	429c      	cmp	r4, r3
 80086d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80086d8:	dd08      	ble.n	80086ec <__ieee754_pow+0x424>
 80086da:	4bce      	ldr	r3, [pc, #824]	; (8008a14 <__ieee754_pow+0x74c>)
 80086dc:	429c      	cmp	r4, r3
 80086de:	f340 8163 	ble.w	80089a8 <__ieee754_pow+0x6e0>
 80086e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086e4:	3301      	adds	r3, #1
 80086e6:	9309      	str	r3, [sp, #36]	; 0x24
 80086e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80086ec:	2400      	movs	r4, #0
 80086ee:	00e3      	lsls	r3, r4, #3
 80086f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80086f2:	4bc9      	ldr	r3, [pc, #804]	; (8008a18 <__ieee754_pow+0x750>)
 80086f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80086f8:	ed93 7b00 	vldr	d7, [r3]
 80086fc:	4629      	mov	r1, r5
 80086fe:	ec53 2b17 	vmov	r2, r3, d7
 8008702:	eeb0 8a47 	vmov.f32	s16, s14
 8008706:	eef0 8a67 	vmov.f32	s17, s15
 800870a:	4682      	mov	sl, r0
 800870c:	f7f7 fd64 	bl	80001d8 <__aeabi_dsub>
 8008710:	4652      	mov	r2, sl
 8008712:	4606      	mov	r6, r0
 8008714:	460f      	mov	r7, r1
 8008716:	462b      	mov	r3, r5
 8008718:	ec51 0b18 	vmov	r0, r1, d8
 800871c:	f7f7 fd5e 	bl	80001dc <__adddf3>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	2000      	movs	r0, #0
 8008726:	49bd      	ldr	r1, [pc, #756]	; (8008a1c <__ieee754_pow+0x754>)
 8008728:	f7f8 f838 	bl	800079c <__aeabi_ddiv>
 800872c:	ec41 0b19 	vmov	d9, r0, r1
 8008730:	4602      	mov	r2, r0
 8008732:	460b      	mov	r3, r1
 8008734:	4630      	mov	r0, r6
 8008736:	4639      	mov	r1, r7
 8008738:	f7f7 ff06 	bl	8000548 <__aeabi_dmul>
 800873c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008740:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008744:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008748:	2300      	movs	r3, #0
 800874a:	9304      	str	r3, [sp, #16]
 800874c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008750:	46ab      	mov	fp, r5
 8008752:	106d      	asrs	r5, r5, #1
 8008754:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008758:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800875c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008760:	2200      	movs	r2, #0
 8008762:	4640      	mov	r0, r8
 8008764:	4649      	mov	r1, r9
 8008766:	4614      	mov	r4, r2
 8008768:	461d      	mov	r5, r3
 800876a:	f7f7 feed 	bl	8000548 <__aeabi_dmul>
 800876e:	4602      	mov	r2, r0
 8008770:	460b      	mov	r3, r1
 8008772:	4630      	mov	r0, r6
 8008774:	4639      	mov	r1, r7
 8008776:	f7f7 fd2f 	bl	80001d8 <__aeabi_dsub>
 800877a:	ec53 2b18 	vmov	r2, r3, d8
 800877e:	4606      	mov	r6, r0
 8008780:	460f      	mov	r7, r1
 8008782:	4620      	mov	r0, r4
 8008784:	4629      	mov	r1, r5
 8008786:	f7f7 fd27 	bl	80001d8 <__aeabi_dsub>
 800878a:	4602      	mov	r2, r0
 800878c:	460b      	mov	r3, r1
 800878e:	4650      	mov	r0, sl
 8008790:	4659      	mov	r1, fp
 8008792:	f7f7 fd21 	bl	80001d8 <__aeabi_dsub>
 8008796:	4642      	mov	r2, r8
 8008798:	464b      	mov	r3, r9
 800879a:	f7f7 fed5 	bl	8000548 <__aeabi_dmul>
 800879e:	4602      	mov	r2, r0
 80087a0:	460b      	mov	r3, r1
 80087a2:	4630      	mov	r0, r6
 80087a4:	4639      	mov	r1, r7
 80087a6:	f7f7 fd17 	bl	80001d8 <__aeabi_dsub>
 80087aa:	ec53 2b19 	vmov	r2, r3, d9
 80087ae:	f7f7 fecb 	bl	8000548 <__aeabi_dmul>
 80087b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80087b6:	ec41 0b18 	vmov	d8, r0, r1
 80087ba:	4610      	mov	r0, r2
 80087bc:	4619      	mov	r1, r3
 80087be:	f7f7 fec3 	bl	8000548 <__aeabi_dmul>
 80087c2:	a37d      	add	r3, pc, #500	; (adr r3, 80089b8 <__ieee754_pow+0x6f0>)
 80087c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c8:	4604      	mov	r4, r0
 80087ca:	460d      	mov	r5, r1
 80087cc:	f7f7 febc 	bl	8000548 <__aeabi_dmul>
 80087d0:	a37b      	add	r3, pc, #492	; (adr r3, 80089c0 <__ieee754_pow+0x6f8>)
 80087d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087d6:	f7f7 fd01 	bl	80001dc <__adddf3>
 80087da:	4622      	mov	r2, r4
 80087dc:	462b      	mov	r3, r5
 80087de:	f7f7 feb3 	bl	8000548 <__aeabi_dmul>
 80087e2:	a379      	add	r3, pc, #484	; (adr r3, 80089c8 <__ieee754_pow+0x700>)
 80087e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087e8:	f7f7 fcf8 	bl	80001dc <__adddf3>
 80087ec:	4622      	mov	r2, r4
 80087ee:	462b      	mov	r3, r5
 80087f0:	f7f7 feaa 	bl	8000548 <__aeabi_dmul>
 80087f4:	a376      	add	r3, pc, #472	; (adr r3, 80089d0 <__ieee754_pow+0x708>)
 80087f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087fa:	f7f7 fcef 	bl	80001dc <__adddf3>
 80087fe:	4622      	mov	r2, r4
 8008800:	462b      	mov	r3, r5
 8008802:	f7f7 fea1 	bl	8000548 <__aeabi_dmul>
 8008806:	a374      	add	r3, pc, #464	; (adr r3, 80089d8 <__ieee754_pow+0x710>)
 8008808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880c:	f7f7 fce6 	bl	80001dc <__adddf3>
 8008810:	4622      	mov	r2, r4
 8008812:	462b      	mov	r3, r5
 8008814:	f7f7 fe98 	bl	8000548 <__aeabi_dmul>
 8008818:	a371      	add	r3, pc, #452	; (adr r3, 80089e0 <__ieee754_pow+0x718>)
 800881a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800881e:	f7f7 fcdd 	bl	80001dc <__adddf3>
 8008822:	4622      	mov	r2, r4
 8008824:	4606      	mov	r6, r0
 8008826:	460f      	mov	r7, r1
 8008828:	462b      	mov	r3, r5
 800882a:	4620      	mov	r0, r4
 800882c:	4629      	mov	r1, r5
 800882e:	f7f7 fe8b 	bl	8000548 <__aeabi_dmul>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	4630      	mov	r0, r6
 8008838:	4639      	mov	r1, r7
 800883a:	f7f7 fe85 	bl	8000548 <__aeabi_dmul>
 800883e:	4642      	mov	r2, r8
 8008840:	4604      	mov	r4, r0
 8008842:	460d      	mov	r5, r1
 8008844:	464b      	mov	r3, r9
 8008846:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800884a:	f7f7 fcc7 	bl	80001dc <__adddf3>
 800884e:	ec53 2b18 	vmov	r2, r3, d8
 8008852:	f7f7 fe79 	bl	8000548 <__aeabi_dmul>
 8008856:	4622      	mov	r2, r4
 8008858:	462b      	mov	r3, r5
 800885a:	f7f7 fcbf 	bl	80001dc <__adddf3>
 800885e:	4642      	mov	r2, r8
 8008860:	4682      	mov	sl, r0
 8008862:	468b      	mov	fp, r1
 8008864:	464b      	mov	r3, r9
 8008866:	4640      	mov	r0, r8
 8008868:	4649      	mov	r1, r9
 800886a:	f7f7 fe6d 	bl	8000548 <__aeabi_dmul>
 800886e:	4b6c      	ldr	r3, [pc, #432]	; (8008a20 <__ieee754_pow+0x758>)
 8008870:	2200      	movs	r2, #0
 8008872:	4606      	mov	r6, r0
 8008874:	460f      	mov	r7, r1
 8008876:	f7f7 fcb1 	bl	80001dc <__adddf3>
 800887a:	4652      	mov	r2, sl
 800887c:	465b      	mov	r3, fp
 800887e:	f7f7 fcad 	bl	80001dc <__adddf3>
 8008882:	9c04      	ldr	r4, [sp, #16]
 8008884:	460d      	mov	r5, r1
 8008886:	4622      	mov	r2, r4
 8008888:	460b      	mov	r3, r1
 800888a:	4640      	mov	r0, r8
 800888c:	4649      	mov	r1, r9
 800888e:	f7f7 fe5b 	bl	8000548 <__aeabi_dmul>
 8008892:	4b63      	ldr	r3, [pc, #396]	; (8008a20 <__ieee754_pow+0x758>)
 8008894:	4680      	mov	r8, r0
 8008896:	4689      	mov	r9, r1
 8008898:	2200      	movs	r2, #0
 800889a:	4620      	mov	r0, r4
 800889c:	4629      	mov	r1, r5
 800889e:	f7f7 fc9b 	bl	80001d8 <__aeabi_dsub>
 80088a2:	4632      	mov	r2, r6
 80088a4:	463b      	mov	r3, r7
 80088a6:	f7f7 fc97 	bl	80001d8 <__aeabi_dsub>
 80088aa:	4602      	mov	r2, r0
 80088ac:	460b      	mov	r3, r1
 80088ae:	4650      	mov	r0, sl
 80088b0:	4659      	mov	r1, fp
 80088b2:	f7f7 fc91 	bl	80001d8 <__aeabi_dsub>
 80088b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088ba:	f7f7 fe45 	bl	8000548 <__aeabi_dmul>
 80088be:	4622      	mov	r2, r4
 80088c0:	4606      	mov	r6, r0
 80088c2:	460f      	mov	r7, r1
 80088c4:	462b      	mov	r3, r5
 80088c6:	ec51 0b18 	vmov	r0, r1, d8
 80088ca:	f7f7 fe3d 	bl	8000548 <__aeabi_dmul>
 80088ce:	4602      	mov	r2, r0
 80088d0:	460b      	mov	r3, r1
 80088d2:	4630      	mov	r0, r6
 80088d4:	4639      	mov	r1, r7
 80088d6:	f7f7 fc81 	bl	80001dc <__adddf3>
 80088da:	4606      	mov	r6, r0
 80088dc:	460f      	mov	r7, r1
 80088de:	4602      	mov	r2, r0
 80088e0:	460b      	mov	r3, r1
 80088e2:	4640      	mov	r0, r8
 80088e4:	4649      	mov	r1, r9
 80088e6:	f7f7 fc79 	bl	80001dc <__adddf3>
 80088ea:	9c04      	ldr	r4, [sp, #16]
 80088ec:	a33e      	add	r3, pc, #248	; (adr r3, 80089e8 <__ieee754_pow+0x720>)
 80088ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f2:	4620      	mov	r0, r4
 80088f4:	460d      	mov	r5, r1
 80088f6:	f7f7 fe27 	bl	8000548 <__aeabi_dmul>
 80088fa:	4642      	mov	r2, r8
 80088fc:	ec41 0b18 	vmov	d8, r0, r1
 8008900:	464b      	mov	r3, r9
 8008902:	4620      	mov	r0, r4
 8008904:	4629      	mov	r1, r5
 8008906:	f7f7 fc67 	bl	80001d8 <__aeabi_dsub>
 800890a:	4602      	mov	r2, r0
 800890c:	460b      	mov	r3, r1
 800890e:	4630      	mov	r0, r6
 8008910:	4639      	mov	r1, r7
 8008912:	f7f7 fc61 	bl	80001d8 <__aeabi_dsub>
 8008916:	a336      	add	r3, pc, #216	; (adr r3, 80089f0 <__ieee754_pow+0x728>)
 8008918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891c:	f7f7 fe14 	bl	8000548 <__aeabi_dmul>
 8008920:	a335      	add	r3, pc, #212	; (adr r3, 80089f8 <__ieee754_pow+0x730>)
 8008922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008926:	4606      	mov	r6, r0
 8008928:	460f      	mov	r7, r1
 800892a:	4620      	mov	r0, r4
 800892c:	4629      	mov	r1, r5
 800892e:	f7f7 fe0b 	bl	8000548 <__aeabi_dmul>
 8008932:	4602      	mov	r2, r0
 8008934:	460b      	mov	r3, r1
 8008936:	4630      	mov	r0, r6
 8008938:	4639      	mov	r1, r7
 800893a:	f7f7 fc4f 	bl	80001dc <__adddf3>
 800893e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008940:	4b38      	ldr	r3, [pc, #224]	; (8008a24 <__ieee754_pow+0x75c>)
 8008942:	4413      	add	r3, r2
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	f7f7 fc48 	bl	80001dc <__adddf3>
 800894c:	4682      	mov	sl, r0
 800894e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008950:	468b      	mov	fp, r1
 8008952:	f7f7 fd8f 	bl	8000474 <__aeabi_i2d>
 8008956:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008958:	4b33      	ldr	r3, [pc, #204]	; (8008a28 <__ieee754_pow+0x760>)
 800895a:	4413      	add	r3, r2
 800895c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008960:	4606      	mov	r6, r0
 8008962:	460f      	mov	r7, r1
 8008964:	4652      	mov	r2, sl
 8008966:	465b      	mov	r3, fp
 8008968:	ec51 0b18 	vmov	r0, r1, d8
 800896c:	f7f7 fc36 	bl	80001dc <__adddf3>
 8008970:	4642      	mov	r2, r8
 8008972:	464b      	mov	r3, r9
 8008974:	f7f7 fc32 	bl	80001dc <__adddf3>
 8008978:	4632      	mov	r2, r6
 800897a:	463b      	mov	r3, r7
 800897c:	f7f7 fc2e 	bl	80001dc <__adddf3>
 8008980:	9c04      	ldr	r4, [sp, #16]
 8008982:	4632      	mov	r2, r6
 8008984:	463b      	mov	r3, r7
 8008986:	4620      	mov	r0, r4
 8008988:	460d      	mov	r5, r1
 800898a:	f7f7 fc25 	bl	80001d8 <__aeabi_dsub>
 800898e:	4642      	mov	r2, r8
 8008990:	464b      	mov	r3, r9
 8008992:	f7f7 fc21 	bl	80001d8 <__aeabi_dsub>
 8008996:	ec53 2b18 	vmov	r2, r3, d8
 800899a:	f7f7 fc1d 	bl	80001d8 <__aeabi_dsub>
 800899e:	4602      	mov	r2, r0
 80089a0:	460b      	mov	r3, r1
 80089a2:	4650      	mov	r0, sl
 80089a4:	4659      	mov	r1, fp
 80089a6:	e606      	b.n	80085b6 <__ieee754_pow+0x2ee>
 80089a8:	2401      	movs	r4, #1
 80089aa:	e6a0      	b.n	80086ee <__ieee754_pow+0x426>
 80089ac:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008a00 <__ieee754_pow+0x738>
 80089b0:	e60d      	b.n	80085ce <__ieee754_pow+0x306>
 80089b2:	bf00      	nop
 80089b4:	f3af 8000 	nop.w
 80089b8:	4a454eef 	.word	0x4a454eef
 80089bc:	3fca7e28 	.word	0x3fca7e28
 80089c0:	93c9db65 	.word	0x93c9db65
 80089c4:	3fcd864a 	.word	0x3fcd864a
 80089c8:	a91d4101 	.word	0xa91d4101
 80089cc:	3fd17460 	.word	0x3fd17460
 80089d0:	518f264d 	.word	0x518f264d
 80089d4:	3fd55555 	.word	0x3fd55555
 80089d8:	db6fabff 	.word	0xdb6fabff
 80089dc:	3fdb6db6 	.word	0x3fdb6db6
 80089e0:	33333303 	.word	0x33333303
 80089e4:	3fe33333 	.word	0x3fe33333
 80089e8:	e0000000 	.word	0xe0000000
 80089ec:	3feec709 	.word	0x3feec709
 80089f0:	dc3a03fd 	.word	0xdc3a03fd
 80089f4:	3feec709 	.word	0x3feec709
 80089f8:	145b01f5 	.word	0x145b01f5
 80089fc:	be3e2fe0 	.word	0xbe3e2fe0
 8008a00:	00000000 	.word	0x00000000
 8008a04:	3ff00000 	.word	0x3ff00000
 8008a08:	7ff00000 	.word	0x7ff00000
 8008a0c:	43400000 	.word	0x43400000
 8008a10:	0003988e 	.word	0x0003988e
 8008a14:	000bb679 	.word	0x000bb679
 8008a18:	080091d8 	.word	0x080091d8
 8008a1c:	3ff00000 	.word	0x3ff00000
 8008a20:	40080000 	.word	0x40080000
 8008a24:	080091f8 	.word	0x080091f8
 8008a28:	080091e8 	.word	0x080091e8
 8008a2c:	a3b5      	add	r3, pc, #724	; (adr r3, 8008d04 <__ieee754_pow+0xa3c>)
 8008a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a32:	4640      	mov	r0, r8
 8008a34:	4649      	mov	r1, r9
 8008a36:	f7f7 fbd1 	bl	80001dc <__adddf3>
 8008a3a:	4622      	mov	r2, r4
 8008a3c:	ec41 0b1a 	vmov	d10, r0, r1
 8008a40:	462b      	mov	r3, r5
 8008a42:	4630      	mov	r0, r6
 8008a44:	4639      	mov	r1, r7
 8008a46:	f7f7 fbc7 	bl	80001d8 <__aeabi_dsub>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	460b      	mov	r3, r1
 8008a4e:	ec51 0b1a 	vmov	r0, r1, d10
 8008a52:	f7f8 f809 	bl	8000a68 <__aeabi_dcmpgt>
 8008a56:	2800      	cmp	r0, #0
 8008a58:	f47f adf8 	bne.w	800864c <__ieee754_pow+0x384>
 8008a5c:	4aa4      	ldr	r2, [pc, #656]	; (8008cf0 <__ieee754_pow+0xa28>)
 8008a5e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a62:	4293      	cmp	r3, r2
 8008a64:	f340 810b 	ble.w	8008c7e <__ieee754_pow+0x9b6>
 8008a68:	151b      	asrs	r3, r3, #20
 8008a6a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008a6e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008a72:	fa4a f303 	asr.w	r3, sl, r3
 8008a76:	445b      	add	r3, fp
 8008a78:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008a7c:	4e9d      	ldr	r6, [pc, #628]	; (8008cf4 <__ieee754_pow+0xa2c>)
 8008a7e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008a82:	4116      	asrs	r6, r2
 8008a84:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008a88:	2000      	movs	r0, #0
 8008a8a:	ea23 0106 	bic.w	r1, r3, r6
 8008a8e:	f1c2 0214 	rsb	r2, r2, #20
 8008a92:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008a96:	fa4a fa02 	asr.w	sl, sl, r2
 8008a9a:	f1bb 0f00 	cmp.w	fp, #0
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	4629      	mov	r1, r5
 8008aa6:	bfb8      	it	lt
 8008aa8:	f1ca 0a00 	rsblt	sl, sl, #0
 8008aac:	f7f7 fb94 	bl	80001d8 <__aeabi_dsub>
 8008ab0:	ec41 0b19 	vmov	d9, r0, r1
 8008ab4:	4642      	mov	r2, r8
 8008ab6:	464b      	mov	r3, r9
 8008ab8:	ec51 0b19 	vmov	r0, r1, d9
 8008abc:	f7f7 fb8e 	bl	80001dc <__adddf3>
 8008ac0:	2400      	movs	r4, #0
 8008ac2:	a379      	add	r3, pc, #484	; (adr r3, 8008ca8 <__ieee754_pow+0x9e0>)
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	4620      	mov	r0, r4
 8008aca:	460d      	mov	r5, r1
 8008acc:	f7f7 fd3c 	bl	8000548 <__aeabi_dmul>
 8008ad0:	ec53 2b19 	vmov	r2, r3, d9
 8008ad4:	4606      	mov	r6, r0
 8008ad6:	460f      	mov	r7, r1
 8008ad8:	4620      	mov	r0, r4
 8008ada:	4629      	mov	r1, r5
 8008adc:	f7f7 fb7c 	bl	80001d8 <__aeabi_dsub>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	4640      	mov	r0, r8
 8008ae6:	4649      	mov	r1, r9
 8008ae8:	f7f7 fb76 	bl	80001d8 <__aeabi_dsub>
 8008aec:	a370      	add	r3, pc, #448	; (adr r3, 8008cb0 <__ieee754_pow+0x9e8>)
 8008aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af2:	f7f7 fd29 	bl	8000548 <__aeabi_dmul>
 8008af6:	a370      	add	r3, pc, #448	; (adr r3, 8008cb8 <__ieee754_pow+0x9f0>)
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	4680      	mov	r8, r0
 8008afe:	4689      	mov	r9, r1
 8008b00:	4620      	mov	r0, r4
 8008b02:	4629      	mov	r1, r5
 8008b04:	f7f7 fd20 	bl	8000548 <__aeabi_dmul>
 8008b08:	4602      	mov	r2, r0
 8008b0a:	460b      	mov	r3, r1
 8008b0c:	4640      	mov	r0, r8
 8008b0e:	4649      	mov	r1, r9
 8008b10:	f7f7 fb64 	bl	80001dc <__adddf3>
 8008b14:	4604      	mov	r4, r0
 8008b16:	460d      	mov	r5, r1
 8008b18:	4602      	mov	r2, r0
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	4639      	mov	r1, r7
 8008b20:	f7f7 fb5c 	bl	80001dc <__adddf3>
 8008b24:	4632      	mov	r2, r6
 8008b26:	463b      	mov	r3, r7
 8008b28:	4680      	mov	r8, r0
 8008b2a:	4689      	mov	r9, r1
 8008b2c:	f7f7 fb54 	bl	80001d8 <__aeabi_dsub>
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	4620      	mov	r0, r4
 8008b36:	4629      	mov	r1, r5
 8008b38:	f7f7 fb4e 	bl	80001d8 <__aeabi_dsub>
 8008b3c:	4642      	mov	r2, r8
 8008b3e:	4606      	mov	r6, r0
 8008b40:	460f      	mov	r7, r1
 8008b42:	464b      	mov	r3, r9
 8008b44:	4640      	mov	r0, r8
 8008b46:	4649      	mov	r1, r9
 8008b48:	f7f7 fcfe 	bl	8000548 <__aeabi_dmul>
 8008b4c:	a35c      	add	r3, pc, #368	; (adr r3, 8008cc0 <__ieee754_pow+0x9f8>)
 8008b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b52:	4604      	mov	r4, r0
 8008b54:	460d      	mov	r5, r1
 8008b56:	f7f7 fcf7 	bl	8000548 <__aeabi_dmul>
 8008b5a:	a35b      	add	r3, pc, #364	; (adr r3, 8008cc8 <__ieee754_pow+0xa00>)
 8008b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b60:	f7f7 fb3a 	bl	80001d8 <__aeabi_dsub>
 8008b64:	4622      	mov	r2, r4
 8008b66:	462b      	mov	r3, r5
 8008b68:	f7f7 fcee 	bl	8000548 <__aeabi_dmul>
 8008b6c:	a358      	add	r3, pc, #352	; (adr r3, 8008cd0 <__ieee754_pow+0xa08>)
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	f7f7 fb33 	bl	80001dc <__adddf3>
 8008b76:	4622      	mov	r2, r4
 8008b78:	462b      	mov	r3, r5
 8008b7a:	f7f7 fce5 	bl	8000548 <__aeabi_dmul>
 8008b7e:	a356      	add	r3, pc, #344	; (adr r3, 8008cd8 <__ieee754_pow+0xa10>)
 8008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b84:	f7f7 fb28 	bl	80001d8 <__aeabi_dsub>
 8008b88:	4622      	mov	r2, r4
 8008b8a:	462b      	mov	r3, r5
 8008b8c:	f7f7 fcdc 	bl	8000548 <__aeabi_dmul>
 8008b90:	a353      	add	r3, pc, #332	; (adr r3, 8008ce0 <__ieee754_pow+0xa18>)
 8008b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b96:	f7f7 fb21 	bl	80001dc <__adddf3>
 8008b9a:	4622      	mov	r2, r4
 8008b9c:	462b      	mov	r3, r5
 8008b9e:	f7f7 fcd3 	bl	8000548 <__aeabi_dmul>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4640      	mov	r0, r8
 8008ba8:	4649      	mov	r1, r9
 8008baa:	f7f7 fb15 	bl	80001d8 <__aeabi_dsub>
 8008bae:	4604      	mov	r4, r0
 8008bb0:	460d      	mov	r5, r1
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	4640      	mov	r0, r8
 8008bb8:	4649      	mov	r1, r9
 8008bba:	f7f7 fcc5 	bl	8000548 <__aeabi_dmul>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	ec41 0b19 	vmov	d9, r0, r1
 8008bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008bc8:	4620      	mov	r0, r4
 8008bca:	4629      	mov	r1, r5
 8008bcc:	f7f7 fb04 	bl	80001d8 <__aeabi_dsub>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	ec51 0b19 	vmov	r0, r1, d9
 8008bd8:	f7f7 fde0 	bl	800079c <__aeabi_ddiv>
 8008bdc:	4632      	mov	r2, r6
 8008bde:	4604      	mov	r4, r0
 8008be0:	460d      	mov	r5, r1
 8008be2:	463b      	mov	r3, r7
 8008be4:	4640      	mov	r0, r8
 8008be6:	4649      	mov	r1, r9
 8008be8:	f7f7 fcae 	bl	8000548 <__aeabi_dmul>
 8008bec:	4632      	mov	r2, r6
 8008bee:	463b      	mov	r3, r7
 8008bf0:	f7f7 faf4 	bl	80001dc <__adddf3>
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	460b      	mov	r3, r1
 8008bf8:	4620      	mov	r0, r4
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	f7f7 faec 	bl	80001d8 <__aeabi_dsub>
 8008c00:	4642      	mov	r2, r8
 8008c02:	464b      	mov	r3, r9
 8008c04:	f7f7 fae8 	bl	80001d8 <__aeabi_dsub>
 8008c08:	460b      	mov	r3, r1
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	493a      	ldr	r1, [pc, #232]	; (8008cf8 <__ieee754_pow+0xa30>)
 8008c0e:	2000      	movs	r0, #0
 8008c10:	f7f7 fae2 	bl	80001d8 <__aeabi_dsub>
 8008c14:	e9cd 0100 	strd	r0, r1, [sp]
 8008c18:	9b01      	ldr	r3, [sp, #4]
 8008c1a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008c1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c22:	da2f      	bge.n	8008c84 <__ieee754_pow+0x9bc>
 8008c24:	4650      	mov	r0, sl
 8008c26:	ed9d 0b00 	vldr	d0, [sp]
 8008c2a:	f000 f9cd 	bl	8008fc8 <scalbn>
 8008c2e:	ec51 0b10 	vmov	r0, r1, d0
 8008c32:	ec53 2b18 	vmov	r2, r3, d8
 8008c36:	f7ff bbe0 	b.w	80083fa <__ieee754_pow+0x132>
 8008c3a:	4b30      	ldr	r3, [pc, #192]	; (8008cfc <__ieee754_pow+0xa34>)
 8008c3c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008c40:	429e      	cmp	r6, r3
 8008c42:	f77f af0b 	ble.w	8008a5c <__ieee754_pow+0x794>
 8008c46:	4b2e      	ldr	r3, [pc, #184]	; (8008d00 <__ieee754_pow+0xa38>)
 8008c48:	440b      	add	r3, r1
 8008c4a:	4303      	orrs	r3, r0
 8008c4c:	d00b      	beq.n	8008c66 <__ieee754_pow+0x99e>
 8008c4e:	a326      	add	r3, pc, #152	; (adr r3, 8008ce8 <__ieee754_pow+0xa20>)
 8008c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c54:	ec51 0b18 	vmov	r0, r1, d8
 8008c58:	f7f7 fc76 	bl	8000548 <__aeabi_dmul>
 8008c5c:	a322      	add	r3, pc, #136	; (adr r3, 8008ce8 <__ieee754_pow+0xa20>)
 8008c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c62:	f7ff bbca 	b.w	80083fa <__ieee754_pow+0x132>
 8008c66:	4622      	mov	r2, r4
 8008c68:	462b      	mov	r3, r5
 8008c6a:	f7f7 fab5 	bl	80001d8 <__aeabi_dsub>
 8008c6e:	4642      	mov	r2, r8
 8008c70:	464b      	mov	r3, r9
 8008c72:	f7f7 feef 	bl	8000a54 <__aeabi_dcmpge>
 8008c76:	2800      	cmp	r0, #0
 8008c78:	f43f aef0 	beq.w	8008a5c <__ieee754_pow+0x794>
 8008c7c:	e7e7      	b.n	8008c4e <__ieee754_pow+0x986>
 8008c7e:	f04f 0a00 	mov.w	sl, #0
 8008c82:	e717      	b.n	8008ab4 <__ieee754_pow+0x7ec>
 8008c84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c88:	4619      	mov	r1, r3
 8008c8a:	e7d2      	b.n	8008c32 <__ieee754_pow+0x96a>
 8008c8c:	491a      	ldr	r1, [pc, #104]	; (8008cf8 <__ieee754_pow+0xa30>)
 8008c8e:	2000      	movs	r0, #0
 8008c90:	f7ff bb9e 	b.w	80083d0 <__ieee754_pow+0x108>
 8008c94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c98:	f7ff bb9a 	b.w	80083d0 <__ieee754_pow+0x108>
 8008c9c:	9000      	str	r0, [sp, #0]
 8008c9e:	f7ff bb76 	b.w	800838e <__ieee754_pow+0xc6>
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	f7ff bb60 	b.w	8008368 <__ieee754_pow+0xa0>
 8008ca8:	00000000 	.word	0x00000000
 8008cac:	3fe62e43 	.word	0x3fe62e43
 8008cb0:	fefa39ef 	.word	0xfefa39ef
 8008cb4:	3fe62e42 	.word	0x3fe62e42
 8008cb8:	0ca86c39 	.word	0x0ca86c39
 8008cbc:	be205c61 	.word	0xbe205c61
 8008cc0:	72bea4d0 	.word	0x72bea4d0
 8008cc4:	3e663769 	.word	0x3e663769
 8008cc8:	c5d26bf1 	.word	0xc5d26bf1
 8008ccc:	3ebbbd41 	.word	0x3ebbbd41
 8008cd0:	af25de2c 	.word	0xaf25de2c
 8008cd4:	3f11566a 	.word	0x3f11566a
 8008cd8:	16bebd93 	.word	0x16bebd93
 8008cdc:	3f66c16c 	.word	0x3f66c16c
 8008ce0:	5555553e 	.word	0x5555553e
 8008ce4:	3fc55555 	.word	0x3fc55555
 8008ce8:	c2f8f359 	.word	0xc2f8f359
 8008cec:	01a56e1f 	.word	0x01a56e1f
 8008cf0:	3fe00000 	.word	0x3fe00000
 8008cf4:	000fffff 	.word	0x000fffff
 8008cf8:	3ff00000 	.word	0x3ff00000
 8008cfc:	4090cbff 	.word	0x4090cbff
 8008d00:	3f6f3400 	.word	0x3f6f3400
 8008d04:	652b82fe 	.word	0x652b82fe
 8008d08:	3c971547 	.word	0x3c971547

08008d0c <__ieee754_sqrt>:
 8008d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d10:	ec55 4b10 	vmov	r4, r5, d0
 8008d14:	4e56      	ldr	r6, [pc, #344]	; (8008e70 <__ieee754_sqrt+0x164>)
 8008d16:	43ae      	bics	r6, r5
 8008d18:	ee10 0a10 	vmov	r0, s0
 8008d1c:	ee10 3a10 	vmov	r3, s0
 8008d20:	4629      	mov	r1, r5
 8008d22:	462a      	mov	r2, r5
 8008d24:	d110      	bne.n	8008d48 <__ieee754_sqrt+0x3c>
 8008d26:	ee10 2a10 	vmov	r2, s0
 8008d2a:	462b      	mov	r3, r5
 8008d2c:	f7f7 fc0c 	bl	8000548 <__aeabi_dmul>
 8008d30:	4602      	mov	r2, r0
 8008d32:	460b      	mov	r3, r1
 8008d34:	4620      	mov	r0, r4
 8008d36:	4629      	mov	r1, r5
 8008d38:	f7f7 fa50 	bl	80001dc <__adddf3>
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	460d      	mov	r5, r1
 8008d40:	ec45 4b10 	vmov	d0, r4, r5
 8008d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d48:	2d00      	cmp	r5, #0
 8008d4a:	dc10      	bgt.n	8008d6e <__ieee754_sqrt+0x62>
 8008d4c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008d50:	4330      	orrs	r0, r6
 8008d52:	d0f5      	beq.n	8008d40 <__ieee754_sqrt+0x34>
 8008d54:	b15d      	cbz	r5, 8008d6e <__ieee754_sqrt+0x62>
 8008d56:	ee10 2a10 	vmov	r2, s0
 8008d5a:	462b      	mov	r3, r5
 8008d5c:	ee10 0a10 	vmov	r0, s0
 8008d60:	f7f7 fa3a 	bl	80001d8 <__aeabi_dsub>
 8008d64:	4602      	mov	r2, r0
 8008d66:	460b      	mov	r3, r1
 8008d68:	f7f7 fd18 	bl	800079c <__aeabi_ddiv>
 8008d6c:	e7e6      	b.n	8008d3c <__ieee754_sqrt+0x30>
 8008d6e:	1509      	asrs	r1, r1, #20
 8008d70:	d076      	beq.n	8008e60 <__ieee754_sqrt+0x154>
 8008d72:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8008d76:	07ce      	lsls	r6, r1, #31
 8008d78:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8008d7c:	bf5e      	ittt	pl
 8008d7e:	0fda      	lsrpl	r2, r3, #31
 8008d80:	005b      	lslpl	r3, r3, #1
 8008d82:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8008d86:	0fda      	lsrs	r2, r3, #31
 8008d88:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8008d8c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8008d90:	2000      	movs	r0, #0
 8008d92:	106d      	asrs	r5, r5, #1
 8008d94:	005b      	lsls	r3, r3, #1
 8008d96:	f04f 0e16 	mov.w	lr, #22
 8008d9a:	4684      	mov	ip, r0
 8008d9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008da0:	eb0c 0401 	add.w	r4, ip, r1
 8008da4:	4294      	cmp	r4, r2
 8008da6:	bfde      	ittt	le
 8008da8:	1b12      	suble	r2, r2, r4
 8008daa:	eb04 0c01 	addle.w	ip, r4, r1
 8008dae:	1840      	addle	r0, r0, r1
 8008db0:	0052      	lsls	r2, r2, #1
 8008db2:	f1be 0e01 	subs.w	lr, lr, #1
 8008db6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008dba:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8008dbe:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008dc2:	d1ed      	bne.n	8008da0 <__ieee754_sqrt+0x94>
 8008dc4:	4671      	mov	r1, lr
 8008dc6:	2720      	movs	r7, #32
 8008dc8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8008dcc:	4562      	cmp	r2, ip
 8008dce:	eb04 060e 	add.w	r6, r4, lr
 8008dd2:	dc02      	bgt.n	8008dda <__ieee754_sqrt+0xce>
 8008dd4:	d113      	bne.n	8008dfe <__ieee754_sqrt+0xf2>
 8008dd6:	429e      	cmp	r6, r3
 8008dd8:	d811      	bhi.n	8008dfe <__ieee754_sqrt+0xf2>
 8008dda:	2e00      	cmp	r6, #0
 8008ddc:	eb06 0e04 	add.w	lr, r6, r4
 8008de0:	da43      	bge.n	8008e6a <__ieee754_sqrt+0x15e>
 8008de2:	f1be 0f00 	cmp.w	lr, #0
 8008de6:	db40      	blt.n	8008e6a <__ieee754_sqrt+0x15e>
 8008de8:	f10c 0801 	add.w	r8, ip, #1
 8008dec:	eba2 020c 	sub.w	r2, r2, ip
 8008df0:	429e      	cmp	r6, r3
 8008df2:	bf88      	it	hi
 8008df4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8008df8:	1b9b      	subs	r3, r3, r6
 8008dfa:	4421      	add	r1, r4
 8008dfc:	46c4      	mov	ip, r8
 8008dfe:	0052      	lsls	r2, r2, #1
 8008e00:	3f01      	subs	r7, #1
 8008e02:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8008e06:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8008e0a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008e0e:	d1dd      	bne.n	8008dcc <__ieee754_sqrt+0xc0>
 8008e10:	4313      	orrs	r3, r2
 8008e12:	d006      	beq.n	8008e22 <__ieee754_sqrt+0x116>
 8008e14:	1c4c      	adds	r4, r1, #1
 8008e16:	bf13      	iteet	ne
 8008e18:	3101      	addne	r1, #1
 8008e1a:	3001      	addeq	r0, #1
 8008e1c:	4639      	moveq	r1, r7
 8008e1e:	f021 0101 	bicne.w	r1, r1, #1
 8008e22:	1043      	asrs	r3, r0, #1
 8008e24:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008e28:	0849      	lsrs	r1, r1, #1
 8008e2a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008e2e:	07c2      	lsls	r2, r0, #31
 8008e30:	bf48      	it	mi
 8008e32:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8008e36:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8008e3a:	460c      	mov	r4, r1
 8008e3c:	463d      	mov	r5, r7
 8008e3e:	e77f      	b.n	8008d40 <__ieee754_sqrt+0x34>
 8008e40:	0ada      	lsrs	r2, r3, #11
 8008e42:	3815      	subs	r0, #21
 8008e44:	055b      	lsls	r3, r3, #21
 8008e46:	2a00      	cmp	r2, #0
 8008e48:	d0fa      	beq.n	8008e40 <__ieee754_sqrt+0x134>
 8008e4a:	02d7      	lsls	r7, r2, #11
 8008e4c:	d50a      	bpl.n	8008e64 <__ieee754_sqrt+0x158>
 8008e4e:	f1c1 0420 	rsb	r4, r1, #32
 8008e52:	fa23 f404 	lsr.w	r4, r3, r4
 8008e56:	1e4d      	subs	r5, r1, #1
 8008e58:	408b      	lsls	r3, r1
 8008e5a:	4322      	orrs	r2, r4
 8008e5c:	1b41      	subs	r1, r0, r5
 8008e5e:	e788      	b.n	8008d72 <__ieee754_sqrt+0x66>
 8008e60:	4608      	mov	r0, r1
 8008e62:	e7f0      	b.n	8008e46 <__ieee754_sqrt+0x13a>
 8008e64:	0052      	lsls	r2, r2, #1
 8008e66:	3101      	adds	r1, #1
 8008e68:	e7ef      	b.n	8008e4a <__ieee754_sqrt+0x13e>
 8008e6a:	46e0      	mov	r8, ip
 8008e6c:	e7be      	b.n	8008dec <__ieee754_sqrt+0xe0>
 8008e6e:	bf00      	nop
 8008e70:	7ff00000 	.word	0x7ff00000

08008e74 <fabs>:
 8008e74:	ec51 0b10 	vmov	r0, r1, d0
 8008e78:	ee10 2a10 	vmov	r2, s0
 8008e7c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008e80:	ec43 2b10 	vmov	d0, r2, r3
 8008e84:	4770      	bx	lr

08008e86 <finite>:
 8008e86:	b082      	sub	sp, #8
 8008e88:	ed8d 0b00 	vstr	d0, [sp]
 8008e8c:	9801      	ldr	r0, [sp, #4]
 8008e8e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008e92:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008e96:	0fc0      	lsrs	r0, r0, #31
 8008e98:	b002      	add	sp, #8
 8008e9a:	4770      	bx	lr
 8008e9c:	0000      	movs	r0, r0
	...

08008ea0 <nan>:
 8008ea0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008ea8 <nan+0x8>
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	00000000 	.word	0x00000000
 8008eac:	7ff80000 	.word	0x7ff80000

08008eb0 <rint>:
 8008eb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008eb2:	ec51 0b10 	vmov	r0, r1, d0
 8008eb6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008eba:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8008ebe:	2e13      	cmp	r6, #19
 8008ec0:	ee10 4a10 	vmov	r4, s0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008eca:	dc58      	bgt.n	8008f7e <rint+0xce>
 8008ecc:	2e00      	cmp	r6, #0
 8008ece:	da2b      	bge.n	8008f28 <rint+0x78>
 8008ed0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008ed4:	4302      	orrs	r2, r0
 8008ed6:	d023      	beq.n	8008f20 <rint+0x70>
 8008ed8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008edc:	4302      	orrs	r2, r0
 8008ede:	4254      	negs	r4, r2
 8008ee0:	4314      	orrs	r4, r2
 8008ee2:	0c4b      	lsrs	r3, r1, #17
 8008ee4:	0b24      	lsrs	r4, r4, #12
 8008ee6:	045b      	lsls	r3, r3, #17
 8008ee8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008eec:	ea44 0103 	orr.w	r1, r4, r3
 8008ef0:	4b32      	ldr	r3, [pc, #200]	; (8008fbc <rint+0x10c>)
 8008ef2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008ef6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4630      	mov	r0, r6
 8008f00:	4639      	mov	r1, r7
 8008f02:	f7f7 f96b 	bl	80001dc <__adddf3>
 8008f06:	e9cd 0100 	strd	r0, r1, [sp]
 8008f0a:	463b      	mov	r3, r7
 8008f0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f10:	4632      	mov	r2, r6
 8008f12:	f7f7 f961 	bl	80001d8 <__aeabi_dsub>
 8008f16:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f1a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008f1e:	4639      	mov	r1, r7
 8008f20:	ec41 0b10 	vmov	d0, r0, r1
 8008f24:	b003      	add	sp, #12
 8008f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f28:	4a25      	ldr	r2, [pc, #148]	; (8008fc0 <rint+0x110>)
 8008f2a:	4132      	asrs	r2, r6
 8008f2c:	ea01 0702 	and.w	r7, r1, r2
 8008f30:	4307      	orrs	r7, r0
 8008f32:	d0f5      	beq.n	8008f20 <rint+0x70>
 8008f34:	0851      	lsrs	r1, r2, #1
 8008f36:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8008f3a:	4314      	orrs	r4, r2
 8008f3c:	d00c      	beq.n	8008f58 <rint+0xa8>
 8008f3e:	ea23 0201 	bic.w	r2, r3, r1
 8008f42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008f46:	2e13      	cmp	r6, #19
 8008f48:	fa43 f606 	asr.w	r6, r3, r6
 8008f4c:	bf0c      	ite	eq
 8008f4e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008f52:	2400      	movne	r4, #0
 8008f54:	ea42 0306 	orr.w	r3, r2, r6
 8008f58:	4918      	ldr	r1, [pc, #96]	; (8008fbc <rint+0x10c>)
 8008f5a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008f5e:	4622      	mov	r2, r4
 8008f60:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008f64:	4620      	mov	r0, r4
 8008f66:	4629      	mov	r1, r5
 8008f68:	f7f7 f938 	bl	80001dc <__adddf3>
 8008f6c:	e9cd 0100 	strd	r0, r1, [sp]
 8008f70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f74:	4622      	mov	r2, r4
 8008f76:	462b      	mov	r3, r5
 8008f78:	f7f7 f92e 	bl	80001d8 <__aeabi_dsub>
 8008f7c:	e7d0      	b.n	8008f20 <rint+0x70>
 8008f7e:	2e33      	cmp	r6, #51	; 0x33
 8008f80:	dd07      	ble.n	8008f92 <rint+0xe2>
 8008f82:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008f86:	d1cb      	bne.n	8008f20 <rint+0x70>
 8008f88:	ee10 2a10 	vmov	r2, s0
 8008f8c:	f7f7 f926 	bl	80001dc <__adddf3>
 8008f90:	e7c6      	b.n	8008f20 <rint+0x70>
 8008f92:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8008f96:	f04f 36ff 	mov.w	r6, #4294967295
 8008f9a:	40d6      	lsrs	r6, r2
 8008f9c:	4230      	tst	r0, r6
 8008f9e:	d0bf      	beq.n	8008f20 <rint+0x70>
 8008fa0:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8008fa4:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8008fa8:	bf1f      	itttt	ne
 8008faa:	ea24 0101 	bicne.w	r1, r4, r1
 8008fae:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008fb2:	fa44 f202 	asrne.w	r2, r4, r2
 8008fb6:	ea41 0402 	orrne.w	r4, r1, r2
 8008fba:	e7cd      	b.n	8008f58 <rint+0xa8>
 8008fbc:	08009208 	.word	0x08009208
 8008fc0:	000fffff 	.word	0x000fffff
 8008fc4:	00000000 	.word	0x00000000

08008fc8 <scalbn>:
 8008fc8:	b570      	push	{r4, r5, r6, lr}
 8008fca:	ec55 4b10 	vmov	r4, r5, d0
 8008fce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008fd2:	4606      	mov	r6, r0
 8008fd4:	462b      	mov	r3, r5
 8008fd6:	b99a      	cbnz	r2, 8009000 <scalbn+0x38>
 8008fd8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008fdc:	4323      	orrs	r3, r4
 8008fde:	d036      	beq.n	800904e <scalbn+0x86>
 8008fe0:	4b39      	ldr	r3, [pc, #228]	; (80090c8 <scalbn+0x100>)
 8008fe2:	4629      	mov	r1, r5
 8008fe4:	ee10 0a10 	vmov	r0, s0
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f7f7 faad 	bl	8000548 <__aeabi_dmul>
 8008fee:	4b37      	ldr	r3, [pc, #220]	; (80090cc <scalbn+0x104>)
 8008ff0:	429e      	cmp	r6, r3
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	460d      	mov	r5, r1
 8008ff6:	da10      	bge.n	800901a <scalbn+0x52>
 8008ff8:	a32b      	add	r3, pc, #172	; (adr r3, 80090a8 <scalbn+0xe0>)
 8008ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffe:	e03a      	b.n	8009076 <scalbn+0xae>
 8009000:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009004:	428a      	cmp	r2, r1
 8009006:	d10c      	bne.n	8009022 <scalbn+0x5a>
 8009008:	ee10 2a10 	vmov	r2, s0
 800900c:	4620      	mov	r0, r4
 800900e:	4629      	mov	r1, r5
 8009010:	f7f7 f8e4 	bl	80001dc <__adddf3>
 8009014:	4604      	mov	r4, r0
 8009016:	460d      	mov	r5, r1
 8009018:	e019      	b.n	800904e <scalbn+0x86>
 800901a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800901e:	460b      	mov	r3, r1
 8009020:	3a36      	subs	r2, #54	; 0x36
 8009022:	4432      	add	r2, r6
 8009024:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009028:	428a      	cmp	r2, r1
 800902a:	dd08      	ble.n	800903e <scalbn+0x76>
 800902c:	2d00      	cmp	r5, #0
 800902e:	a120      	add	r1, pc, #128	; (adr r1, 80090b0 <scalbn+0xe8>)
 8009030:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009034:	da1c      	bge.n	8009070 <scalbn+0xa8>
 8009036:	a120      	add	r1, pc, #128	; (adr r1, 80090b8 <scalbn+0xf0>)
 8009038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800903c:	e018      	b.n	8009070 <scalbn+0xa8>
 800903e:	2a00      	cmp	r2, #0
 8009040:	dd08      	ble.n	8009054 <scalbn+0x8c>
 8009042:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009046:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800904a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800904e:	ec45 4b10 	vmov	d0, r4, r5
 8009052:	bd70      	pop	{r4, r5, r6, pc}
 8009054:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009058:	da19      	bge.n	800908e <scalbn+0xc6>
 800905a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800905e:	429e      	cmp	r6, r3
 8009060:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009064:	dd0a      	ble.n	800907c <scalbn+0xb4>
 8009066:	a112      	add	r1, pc, #72	; (adr r1, 80090b0 <scalbn+0xe8>)
 8009068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1e2      	bne.n	8009036 <scalbn+0x6e>
 8009070:	a30f      	add	r3, pc, #60	; (adr r3, 80090b0 <scalbn+0xe8>)
 8009072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009076:	f7f7 fa67 	bl	8000548 <__aeabi_dmul>
 800907a:	e7cb      	b.n	8009014 <scalbn+0x4c>
 800907c:	a10a      	add	r1, pc, #40	; (adr r1, 80090a8 <scalbn+0xe0>)
 800907e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d0b8      	beq.n	8008ff8 <scalbn+0x30>
 8009086:	a10e      	add	r1, pc, #56	; (adr r1, 80090c0 <scalbn+0xf8>)
 8009088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800908c:	e7b4      	b.n	8008ff8 <scalbn+0x30>
 800908e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009092:	3236      	adds	r2, #54	; 0x36
 8009094:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009098:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800909c:	4620      	mov	r0, r4
 800909e:	4b0c      	ldr	r3, [pc, #48]	; (80090d0 <scalbn+0x108>)
 80090a0:	2200      	movs	r2, #0
 80090a2:	e7e8      	b.n	8009076 <scalbn+0xae>
 80090a4:	f3af 8000 	nop.w
 80090a8:	c2f8f359 	.word	0xc2f8f359
 80090ac:	01a56e1f 	.word	0x01a56e1f
 80090b0:	8800759c 	.word	0x8800759c
 80090b4:	7e37e43c 	.word	0x7e37e43c
 80090b8:	8800759c 	.word	0x8800759c
 80090bc:	fe37e43c 	.word	0xfe37e43c
 80090c0:	c2f8f359 	.word	0xc2f8f359
 80090c4:	81a56e1f 	.word	0x81a56e1f
 80090c8:	43500000 	.word	0x43500000
 80090cc:	ffff3cb0 	.word	0xffff3cb0
 80090d0:	3c900000 	.word	0x3c900000

080090d4 <_init>:
 80090d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d6:	bf00      	nop
 80090d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090da:	bc08      	pop	{r3}
 80090dc:	469e      	mov	lr, r3
 80090de:	4770      	bx	lr

080090e0 <_fini>:
 80090e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e2:	bf00      	nop
 80090e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e6:	bc08      	pop	{r3}
 80090e8:	469e      	mov	lr, r3
 80090ea:	4770      	bx	lr
